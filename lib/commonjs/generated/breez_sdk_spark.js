"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Utxo = exports.UpdateDepositPayload_Tags = exports.UpdateDepositPayload = exports.TxStatus = exports.SyncWalletResponse = exports.SyncWalletRequest = exports.StorageImpl = exports.StorageError_Tags = exports.StorageError = exports.SendPaymentResponse = exports.SendPaymentRequest = exports.SendPaymentOptions_Tags = exports.SendPaymentOptions = exports.SendPaymentMethod_Tags = exports.SendPaymentMethod = exports.SendOnchainSpeedFeeQuote = exports.SendOnchainFeeQuote = exports.Seed_Tags = exports.Seed = exports.SdkEvent_Tags = exports.SdkEvent = exports.SdkError_Tags = exports.SdkError = exports.SdkBuilder = exports.RegisterLightningAddressRequest = exports.RefundDepositResponse = exports.RefundDepositRequest = exports.ReceivePaymentResponse = exports.ReceivePaymentRequest = exports.ReceivePaymentMethod_Tags = exports.ReceivePaymentMethod = exports.PrepareSendPaymentResponse = exports.PrepareSendPaymentRequest = exports.PrepareLnurlPayResponse = exports.PrepareLnurlPayRequest = exports.PaymentType = exports.PaymentStatus = exports.PaymentMethod = exports.PaymentMetadata = exports.PaymentDetails_Tags = exports.PaymentDetails = exports.Payment = exports.OnchainConfirmationSpeed = exports.Network = exports.LogEntry = exports.LnurlPayResponse = exports.LnurlPayRequest = exports.LnurlPayInfo = exports.ListUnclaimedDepositsResponse = exports.ListUnclaimedDepositsRequest = exports.ListPaymentsResponse = exports.ListPaymentsRequest = exports.ListFiatRatesResponse = exports.ListFiatCurrenciesResponse = exports.LightningAddressInfo = exports.KeySetType = exports.GetPaymentResponse = exports.GetPaymentRequest = exports.GetInfoResponse = exports.GetInfoRequest = exports.Fee_Tags = exports.Fee = exports.DepositInfo = exports.DepositClaimError_Tags = exports.DepositClaimError = exports.Credentials = exports.ConnectRequest = exports.Config = exports.ClaimDepositResponse = exports.ClaimDepositRequest = exports.CheckLightningAddressRequest = exports.ChainServiceError_Tags = exports.ChainServiceError = exports.BreezSdk = exports.BitcoinChainServiceImpl = void 0;
exports.connect = connect;
exports.default = void 0;
exports.defaultConfig = defaultConfig;
exports.defaultStorage = defaultStorage;
exports.initLogging = initLogging;
exports.parse = parse;
var _breez_sdk_sparkFfi = _interopRequireDefault(require("./breez_sdk_spark-ffi.js"));
var _uniffiBindgenReactNative = require("uniffi-bindgen-react-native");
var _breez_sdk_common = _interopRequireDefault(require("./breez_sdk_common.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// This file was autogenerated by some hot garbage in the `uniffi-bindgen-react-native` crate.
// Trust me, you don't want to mess with it!

// Get converters from the other files, if any.

const {
  FfiConverterTypeBitcoinAddressDetails,
  FfiConverterTypeBolt11InvoiceDetails,
  FfiConverterTypeFiatCurrency,
  FfiConverterTypeFiatService,
  FfiConverterTypeInputType,
  FfiConverterTypeLnurlPayRequestDetails,
  FfiConverterTypeRate,
  FfiConverterTypeRestClient,
  FfiConverterTypeSuccessAction,
  FfiConverterTypeSuccessActionProcessed
} = _breez_sdk_common.default.converters;
const uniffiCaller = new _uniffiBindgenReactNative.UniffiRustCaller();
const uniffiIsDebug =
// @ts-ignore -- The process global might not be defined
typeof process !== 'object' ||
// @ts-ignore -- The process global might not be defined
process?.env?.NODE_ENV !== 'production' || false;
// Public interface members begin here.

/**
 * Connects to the Spark network using the provided configuration and mnemonic.
 *
 * # Arguments
 *
 * * `request` - The connection request object
 *
 * # Returns
 *
 * Result containing either the initialized `BreezSdk` or an `SdkError`
 */
async function connect(request, asyncOpts_) /*throws*/{
  const __stack = uniffiIsDebug ? new Error().stack : undefined;
  try {
    return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
      return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_func_connect(FfiConverterTypeConnectRequest.lower(request));
    }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_pointer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_pointer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_pointer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_pointer, /*liftFunc:*/FfiConverterTypeBreezSdk.lift.bind(FfiConverterTypeBreezSdk), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
  } catch (__error) {
    if (uniffiIsDebug && __error instanceof Error) {
      __error.stack = __stack;
    }
    throw __error;
  }
}
function defaultConfig(network) {
  return FfiConverterTypeConfig.lift(uniffiCaller.rustCall(/*caller:*/callStatus => {
    return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_func_default_config(FfiConverterTypeNetwork.lower(network), callStatus);
  }, /*liftString:*/FfiConverterString.lift));
}
function defaultStorage(dataDir) /*throws*/{
  return FfiConverterTypeStorage.lift(uniffiCaller.rustCallWithError(/*liftError:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError), /*caller:*/callStatus => {
    return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_func_default_storage(FfiConverterString.lower(dataDir), callStatus);
  }, /*liftString:*/FfiConverterString.lift));
}
function initLogging(logDir, appLogger, logFilter) /*throws*/{
  uniffiCaller.rustCallWithError(/*liftError:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError), /*caller:*/callStatus => {
    (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_func_init_logging(FfiConverterOptionalString.lower(logDir), FfiConverterOptionalTypeLogger.lower(appLogger), FfiConverterOptionalString.lower(logFilter), callStatus);
  }, /*liftString:*/FfiConverterString.lift);
}
async function parse(input, asyncOpts_) /*throws*/{
  const __stack = uniffiIsDebug ? new Error().stack : undefined;
  try {
    return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
      return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_func_parse(FfiConverterString.lower(input));
    }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterTypeInputType.lift.bind(FfiConverterTypeInputType), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
  } catch (__error) {
    if (uniffiIsDebug && __error instanceof Error) {
      __error.stack = __stack;
    }
    throw __error;
  }
}

/**
 * Trait for event listeners
 */

// Put the implementation in a struct so we don't pollute the top-level namespace
const uniffiCallbackInterfaceEventListener = {
  // Create the VTable using a series of closures.
  // ts automatically converts these into C callback functions.
  vtable: {
    onEvent: (uniffiHandle, event) => {
      const uniffiMakeCall = () => {
        const jsCallback = FfiConverterTypeEventListener.lift(uniffiHandle);
        return jsCallback.onEvent(FfiConverterTypeSdkEvent.lift(event));
      };
      const uniffiResult = _uniffiBindgenReactNative.UniffiResult.ready();
      const uniffiHandleSuccess = obj => {};
      const uniffiHandleError = (code, errBuf) => {
        _uniffiBindgenReactNative.UniffiResult.writeError(uniffiResult, code, errBuf);
      };
      (0, _uniffiBindgenReactNative.uniffiTraitInterfaceCall)(/*makeCall:*/uniffiMakeCall, /*handleSuccess:*/uniffiHandleSuccess, /*handleError:*/uniffiHandleError, /*lowerString:*/FfiConverterString.lower);
      return uniffiResult;
    },
    uniffiFree: uniffiHandle => {
      // EventListener: this will throw a stale handle error if the handle isn't found.
      FfiConverterTypeEventListener.drop(uniffiHandle);
    }
  },
  register: () => {
    (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_init_callback_vtable_eventlistener(uniffiCallbackInterfaceEventListener.vtable);
  }
};

// FfiConverter protocol for callback interfaces
const FfiConverterTypeEventListener = new _uniffiBindgenReactNative.FfiConverterCallback();
// Put the implementation in a struct so we don't pollute the top-level namespace
const uniffiCallbackInterfaceLogger = {
  // Create the VTable using a series of closures.
  // ts automatically converts these into C callback functions.
  vtable: {
    log: (uniffiHandle, l) => {
      const uniffiMakeCall = () => {
        const jsCallback = FfiConverterTypeLogger.lift(uniffiHandle);
        return jsCallback.log(FfiConverterTypeLogEntry.lift(l));
      };
      const uniffiResult = _uniffiBindgenReactNative.UniffiResult.ready();
      const uniffiHandleSuccess = obj => {};
      const uniffiHandleError = (code, errBuf) => {
        _uniffiBindgenReactNative.UniffiResult.writeError(uniffiResult, code, errBuf);
      };
      (0, _uniffiBindgenReactNative.uniffiTraitInterfaceCall)(/*makeCall:*/uniffiMakeCall, /*handleSuccess:*/uniffiHandleSuccess, /*handleError:*/uniffiHandleError, /*lowerString:*/FfiConverterString.lower);
      return uniffiResult;
    },
    uniffiFree: uniffiHandle => {
      // Logger: this will throw a stale handle error if the handle isn't found.
      FfiConverterTypeLogger.drop(uniffiHandle);
    }
  },
  register: () => {
    (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_init_callback_vtable_logger(uniffiCallbackInterfaceLogger.vtable);
  }
};

// FfiConverter protocol for callback interfaces
const FfiConverterTypeLogger = new _uniffiBindgenReactNative.FfiConverterCallback();
/**
 * Generated factory for {@link CheckLightningAddressRequest} record objects.
 */
const CheckLightningAddressRequest = exports.CheckLightningAddressRequest = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link CheckLightningAddressRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link CheckLightningAddressRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeCheckLightningAddressRequest = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        username: FfiConverterString.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.username, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.username);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link ClaimDepositRequest} record objects.
 */
const ClaimDepositRequest = exports.ClaimDepositRequest = (() => {
  const defaults = () => ({
    maxFee: undefined
  });
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link ClaimDepositRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link ClaimDepositRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeClaimDepositRequest = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        txid: FfiConverterString.read(from),
        vout: _uniffiBindgenReactNative.FfiConverterUInt32.read(from),
        maxFee: FfiConverterOptionalTypeFee.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.txid, into);
      _uniffiBindgenReactNative.FfiConverterUInt32.write(value.vout, into);
      FfiConverterOptionalTypeFee.write(value.maxFee, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.txid) + _uniffiBindgenReactNative.FfiConverterUInt32.allocationSize(value.vout) + FfiConverterOptionalTypeFee.allocationSize(value.maxFee);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link ClaimDepositResponse} record objects.
 */
const ClaimDepositResponse = exports.ClaimDepositResponse = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link ClaimDepositResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link ClaimDepositResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeClaimDepositResponse = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        payment: FfiConverterTypePayment.read(from)
      };
    }
    write(value, into) {
      FfiConverterTypePayment.write(value.payment, into);
    }
    allocationSize(value) {
      return FfiConverterTypePayment.allocationSize(value.payment);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link Config} record objects.
 */
const Config = exports.Config = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link Config}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link Config}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeConfig = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        apiKey: FfiConverterOptionalString.read(from),
        network: FfiConverterTypeNetwork.read(from),
        syncIntervalSecs: _uniffiBindgenReactNative.FfiConverterUInt32.read(from),
        maxDepositClaimFee: FfiConverterOptionalTypeFee.read(from),
        lnurlDomain: FfiConverterOptionalString.read(from),
        preferSparkOverLightning: _uniffiBindgenReactNative.FfiConverterBool.read(from)
      };
    }
    write(value, into) {
      FfiConverterOptionalString.write(value.apiKey, into);
      FfiConverterTypeNetwork.write(value.network, into);
      _uniffiBindgenReactNative.FfiConverterUInt32.write(value.syncIntervalSecs, into);
      FfiConverterOptionalTypeFee.write(value.maxDepositClaimFee, into);
      FfiConverterOptionalString.write(value.lnurlDomain, into);
      _uniffiBindgenReactNative.FfiConverterBool.write(value.preferSparkOverLightning, into);
    }
    allocationSize(value) {
      return FfiConverterOptionalString.allocationSize(value.apiKey) + FfiConverterTypeNetwork.allocationSize(value.network) + _uniffiBindgenReactNative.FfiConverterUInt32.allocationSize(value.syncIntervalSecs) + FfiConverterOptionalTypeFee.allocationSize(value.maxDepositClaimFee) + FfiConverterOptionalString.allocationSize(value.lnurlDomain) + _uniffiBindgenReactNative.FfiConverterBool.allocationSize(value.preferSparkOverLightning);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link ConnectRequest} record objects.
 */
const ConnectRequest = exports.ConnectRequest = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link ConnectRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link ConnectRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeConnectRequest = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        config: FfiConverterTypeConfig.read(from),
        seed: FfiConverterTypeSeed.read(from),
        storageDir: FfiConverterString.read(from)
      };
    }
    write(value, into) {
      FfiConverterTypeConfig.write(value.config, into);
      FfiConverterTypeSeed.write(value.seed, into);
      FfiConverterString.write(value.storageDir, into);
    }
    allocationSize(value) {
      return FfiConverterTypeConfig.allocationSize(value.config) + FfiConverterTypeSeed.allocationSize(value.seed) + FfiConverterString.allocationSize(value.storageDir);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link Credentials} record objects.
 */
const Credentials = exports.Credentials = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link Credentials}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link Credentials}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeCredentials = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        username: FfiConverterString.read(from),
        password: FfiConverterString.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.username, into);
      FfiConverterString.write(value.password, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.username) + FfiConverterString.allocationSize(value.password);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link DepositInfo} record objects.
 */
const DepositInfo = exports.DepositInfo = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link DepositInfo}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link DepositInfo}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeDepositInfo = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        txid: FfiConverterString.read(from),
        vout: _uniffiBindgenReactNative.FfiConverterUInt32.read(from),
        amountSats: _uniffiBindgenReactNative.FfiConverterUInt64.read(from),
        refundTx: FfiConverterOptionalString.read(from),
        refundTxId: FfiConverterOptionalString.read(from),
        claimError: FfiConverterOptionalTypeDepositClaimError.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.txid, into);
      _uniffiBindgenReactNative.FfiConverterUInt32.write(value.vout, into);
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.amountSats, into);
      FfiConverterOptionalString.write(value.refundTx, into);
      FfiConverterOptionalString.write(value.refundTxId, into);
      FfiConverterOptionalTypeDepositClaimError.write(value.claimError, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.txid) + _uniffiBindgenReactNative.FfiConverterUInt32.allocationSize(value.vout) + _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.amountSats) + FfiConverterOptionalString.allocationSize(value.refundTx) + FfiConverterOptionalString.allocationSize(value.refundTxId) + FfiConverterOptionalTypeDepositClaimError.allocationSize(value.claimError);
    }
  }
  return new FFIConverter();
})();

/**
 * Request to get the balance of the wallet
 */

/**
 * Generated factory for {@link GetInfoRequest} record objects.
 */
const GetInfoRequest = exports.GetInfoRequest = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link GetInfoRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link GetInfoRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeGetInfoRequest = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {};
    }
    write(value, into) {}
    allocationSize(value) {
      return 0;
    }
  }
  return new FFIConverter();
})();

/**
 * Response containing the balance of the wallet
 */

/**
 * Generated factory for {@link GetInfoResponse} record objects.
 */
const GetInfoResponse = exports.GetInfoResponse = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link GetInfoResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link GetInfoResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeGetInfoResponse = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        balanceSats: _uniffiBindgenReactNative.FfiConverterUInt64.read(from)
      };
    }
    write(value, into) {
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.balanceSats, into);
    }
    allocationSize(value) {
      return _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.balanceSats);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link GetPaymentRequest} record objects.
 */
const GetPaymentRequest = exports.GetPaymentRequest = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link GetPaymentRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link GetPaymentRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeGetPaymentRequest = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        paymentId: FfiConverterString.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.paymentId, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.paymentId);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link GetPaymentResponse} record objects.
 */
const GetPaymentResponse = exports.GetPaymentResponse = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link GetPaymentResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link GetPaymentResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeGetPaymentResponse = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        payment: FfiConverterTypePayment.read(from)
      };
    }
    write(value, into) {
      FfiConverterTypePayment.write(value.payment, into);
    }
    allocationSize(value) {
      return FfiConverterTypePayment.allocationSize(value.payment);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link LightningAddressInfo} record objects.
 */
const LightningAddressInfo = exports.LightningAddressInfo = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link LightningAddressInfo}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link LightningAddressInfo}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeLightningAddressInfo = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        description: FfiConverterString.read(from),
        lightningAddress: FfiConverterString.read(from),
        lnurl: FfiConverterString.read(from),
        username: FfiConverterString.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.description, into);
      FfiConverterString.write(value.lightningAddress, into);
      FfiConverterString.write(value.lnurl, into);
      FfiConverterString.write(value.username, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.description) + FfiConverterString.allocationSize(value.lightningAddress) + FfiConverterString.allocationSize(value.lnurl) + FfiConverterString.allocationSize(value.username);
    }
  }
  return new FFIConverter();
})();

/**
 * Response from listing fiat currencies
 */

/**
 * Generated factory for {@link ListFiatCurrenciesResponse} record objects.
 */
const ListFiatCurrenciesResponse = exports.ListFiatCurrenciesResponse = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link ListFiatCurrenciesResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link ListFiatCurrenciesResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeListFiatCurrenciesResponse = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        currencies: FfiConverterArrayTypeFiatCurrency.read(from)
      };
    }
    write(value, into) {
      FfiConverterArrayTypeFiatCurrency.write(value.currencies, into);
    }
    allocationSize(value) {
      return FfiConverterArrayTypeFiatCurrency.allocationSize(value.currencies);
    }
  }
  return new FFIConverter();
})();

/**
 * Response from listing fiat rates
 */

/**
 * Generated factory for {@link ListFiatRatesResponse} record objects.
 */
const ListFiatRatesResponse = exports.ListFiatRatesResponse = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link ListFiatRatesResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link ListFiatRatesResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeListFiatRatesResponse = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        rates: FfiConverterArrayTypeRate.read(from)
      };
    }
    write(value, into) {
      FfiConverterArrayTypeRate.write(value.rates, into);
    }
    allocationSize(value) {
      return FfiConverterArrayTypeRate.allocationSize(value.rates);
    }
  }
  return new FFIConverter();
})();

/**
 * Request to list payments with pagination
 */

/**
 * Generated factory for {@link ListPaymentsRequest} record objects.
 */
const ListPaymentsRequest = exports.ListPaymentsRequest = (() => {
  const defaults = () => ({
    offset: undefined,
    limit: undefined
  });
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link ListPaymentsRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link ListPaymentsRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeListPaymentsRequest = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        offset: FfiConverterOptionalUInt32.read(from),
        limit: FfiConverterOptionalUInt32.read(from)
      };
    }
    write(value, into) {
      FfiConverterOptionalUInt32.write(value.offset, into);
      FfiConverterOptionalUInt32.write(value.limit, into);
    }
    allocationSize(value) {
      return FfiConverterOptionalUInt32.allocationSize(value.offset) + FfiConverterOptionalUInt32.allocationSize(value.limit);
    }
  }
  return new FFIConverter();
})();

/**
 * Response from listing payments
 */

/**
 * Generated factory for {@link ListPaymentsResponse} record objects.
 */
const ListPaymentsResponse = exports.ListPaymentsResponse = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link ListPaymentsResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link ListPaymentsResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeListPaymentsResponse = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        payments: FfiConverterArrayTypePayment.read(from)
      };
    }
    write(value, into) {
      FfiConverterArrayTypePayment.write(value.payments, into);
    }
    allocationSize(value) {
      return FfiConverterArrayTypePayment.allocationSize(value.payments);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link ListUnclaimedDepositsRequest} record objects.
 */
const ListUnclaimedDepositsRequest = exports.ListUnclaimedDepositsRequest = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link ListUnclaimedDepositsRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link ListUnclaimedDepositsRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeListUnclaimedDepositsRequest = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {};
    }
    write(value, into) {}
    allocationSize(value) {
      return 0;
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link ListUnclaimedDepositsResponse} record objects.
 */
const ListUnclaimedDepositsResponse = exports.ListUnclaimedDepositsResponse = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link ListUnclaimedDepositsResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link ListUnclaimedDepositsResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeListUnclaimedDepositsResponse = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        deposits: FfiConverterArrayTypeDepositInfo.read(from)
      };
    }
    write(value, into) {
      FfiConverterArrayTypeDepositInfo.write(value.deposits, into);
    }
    allocationSize(value) {
      return FfiConverterArrayTypeDepositInfo.allocationSize(value.deposits);
    }
  }
  return new FFIConverter();
})();

/**
 * Represents the payment LNURL info
 */

/**
 * Generated factory for {@link LnurlPayInfo} record objects.
 */
const LnurlPayInfo = exports.LnurlPayInfo = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link LnurlPayInfo}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link LnurlPayInfo}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeLnurlPayInfo = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        lnAddress: FfiConverterOptionalString.read(from),
        comment: FfiConverterOptionalString.read(from),
        domain: FfiConverterOptionalString.read(from),
        metadata: FfiConverterOptionalString.read(from),
        processedSuccessAction: FfiConverterOptionalTypeSuccessActionProcessed.read(from),
        rawSuccessAction: FfiConverterOptionalTypeSuccessAction.read(from)
      };
    }
    write(value, into) {
      FfiConverterOptionalString.write(value.lnAddress, into);
      FfiConverterOptionalString.write(value.comment, into);
      FfiConverterOptionalString.write(value.domain, into);
      FfiConverterOptionalString.write(value.metadata, into);
      FfiConverterOptionalTypeSuccessActionProcessed.write(value.processedSuccessAction, into);
      FfiConverterOptionalTypeSuccessAction.write(value.rawSuccessAction, into);
    }
    allocationSize(value) {
      return FfiConverterOptionalString.allocationSize(value.lnAddress) + FfiConverterOptionalString.allocationSize(value.comment) + FfiConverterOptionalString.allocationSize(value.domain) + FfiConverterOptionalString.allocationSize(value.metadata) + FfiConverterOptionalTypeSuccessActionProcessed.allocationSize(value.processedSuccessAction) + FfiConverterOptionalTypeSuccessAction.allocationSize(value.rawSuccessAction);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link LnurlPayRequest} record objects.
 */
const LnurlPayRequest = exports.LnurlPayRequest = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link LnurlPayRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link LnurlPayRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeLnurlPayRequest = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        prepareResponse: FfiConverterTypePrepareLnurlPayResponse.read(from)
      };
    }
    write(value, into) {
      FfiConverterTypePrepareLnurlPayResponse.write(value.prepareResponse, into);
    }
    allocationSize(value) {
      return FfiConverterTypePrepareLnurlPayResponse.allocationSize(value.prepareResponse);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link LnurlPayResponse} record objects.
 */
const LnurlPayResponse = exports.LnurlPayResponse = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link LnurlPayResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link LnurlPayResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeLnurlPayResponse = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        payment: FfiConverterTypePayment.read(from),
        successAction: FfiConverterOptionalTypeSuccessActionProcessed.read(from)
      };
    }
    write(value, into) {
      FfiConverterTypePayment.write(value.payment, into);
      FfiConverterOptionalTypeSuccessActionProcessed.write(value.successAction, into);
    }
    allocationSize(value) {
      return FfiConverterTypePayment.allocationSize(value.payment) + FfiConverterOptionalTypeSuccessActionProcessed.allocationSize(value.successAction);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link LogEntry} record objects.
 */
const LogEntry = exports.LogEntry = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link LogEntry}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link LogEntry}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeLogEntry = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        line: FfiConverterString.read(from),
        level: FfiConverterString.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.line, into);
      FfiConverterString.write(value.level, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.line) + FfiConverterString.allocationSize(value.level);
    }
  }
  return new FFIConverter();
})();

/**
 * Represents a payment (sent or received)
 */

/**
 * Generated factory for {@link Payment} record objects.
 */
const Payment = exports.Payment = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link Payment}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link Payment}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypePayment = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        id: FfiConverterString.read(from),
        paymentType: FfiConverterTypePaymentType.read(from),
        status: FfiConverterTypePaymentStatus.read(from),
        amount: _uniffiBindgenReactNative.FfiConverterUInt64.read(from),
        fees: _uniffiBindgenReactNative.FfiConverterUInt64.read(from),
        timestamp: _uniffiBindgenReactNative.FfiConverterUInt64.read(from),
        method: FfiConverterTypePaymentMethod.read(from),
        details: FfiConverterOptionalTypePaymentDetails.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.id, into);
      FfiConverterTypePaymentType.write(value.paymentType, into);
      FfiConverterTypePaymentStatus.write(value.status, into);
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.amount, into);
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.fees, into);
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.timestamp, into);
      FfiConverterTypePaymentMethod.write(value.method, into);
      FfiConverterOptionalTypePaymentDetails.write(value.details, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.id) + FfiConverterTypePaymentType.allocationSize(value.paymentType) + FfiConverterTypePaymentStatus.allocationSize(value.status) + _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.amount) + _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.fees) + _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.timestamp) + FfiConverterTypePaymentMethod.allocationSize(value.method) + FfiConverterOptionalTypePaymentDetails.allocationSize(value.details);
    }
  }
  return new FFIConverter();
})();

/**
 * Metadata associated with a payment that cannot be extracted from the Spark operator.
 */

/**
 * Generated factory for {@link PaymentMetadata} record objects.
 */
const PaymentMetadata = exports.PaymentMetadata = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link PaymentMetadata}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link PaymentMetadata}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypePaymentMetadata = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        lnurlPayInfo: FfiConverterOptionalTypeLnurlPayInfo.read(from),
        lnurlDescription: FfiConverterOptionalString.read(from)
      };
    }
    write(value, into) {
      FfiConverterOptionalTypeLnurlPayInfo.write(value.lnurlPayInfo, into);
      FfiConverterOptionalString.write(value.lnurlDescription, into);
    }
    allocationSize(value) {
      return FfiConverterOptionalTypeLnurlPayInfo.allocationSize(value.lnurlPayInfo) + FfiConverterOptionalString.allocationSize(value.lnurlDescription);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link PrepareLnurlPayRequest} record objects.
 */
const PrepareLnurlPayRequest = exports.PrepareLnurlPayRequest = (() => {
  const defaults = () => ({
    comment: undefined,
    validateSuccessActionUrl: undefined
  });
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link PrepareLnurlPayRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link PrepareLnurlPayRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypePrepareLnurlPayRequest = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        amountSats: _uniffiBindgenReactNative.FfiConverterUInt64.read(from),
        payRequest: FfiConverterTypeLnurlPayRequestDetails.read(from),
        comment: FfiConverterOptionalString.read(from),
        validateSuccessActionUrl: FfiConverterOptionalBool.read(from)
      };
    }
    write(value, into) {
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.amountSats, into);
      FfiConverterTypeLnurlPayRequestDetails.write(value.payRequest, into);
      FfiConverterOptionalString.write(value.comment, into);
      FfiConverterOptionalBool.write(value.validateSuccessActionUrl, into);
    }
    allocationSize(value) {
      return _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.amountSats) + FfiConverterTypeLnurlPayRequestDetails.allocationSize(value.payRequest) + FfiConverterOptionalString.allocationSize(value.comment) + FfiConverterOptionalBool.allocationSize(value.validateSuccessActionUrl);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link PrepareLnurlPayResponse} record objects.
 */
const PrepareLnurlPayResponse = exports.PrepareLnurlPayResponse = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link PrepareLnurlPayResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link PrepareLnurlPayResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypePrepareLnurlPayResponse = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        amountSats: _uniffiBindgenReactNative.FfiConverterUInt64.read(from),
        comment: FfiConverterOptionalString.read(from),
        payRequest: FfiConverterTypeLnurlPayRequestDetails.read(from),
        feeSats: _uniffiBindgenReactNative.FfiConverterUInt64.read(from),
        invoiceDetails: FfiConverterTypeBolt11InvoiceDetails.read(from),
        successAction: FfiConverterOptionalTypeSuccessAction.read(from)
      };
    }
    write(value, into) {
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.amountSats, into);
      FfiConverterOptionalString.write(value.comment, into);
      FfiConverterTypeLnurlPayRequestDetails.write(value.payRequest, into);
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.feeSats, into);
      FfiConverterTypeBolt11InvoiceDetails.write(value.invoiceDetails, into);
      FfiConverterOptionalTypeSuccessAction.write(value.successAction, into);
    }
    allocationSize(value) {
      return _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.amountSats) + FfiConverterOptionalString.allocationSize(value.comment) + FfiConverterTypeLnurlPayRequestDetails.allocationSize(value.payRequest) + _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.feeSats) + FfiConverterTypeBolt11InvoiceDetails.allocationSize(value.invoiceDetails) + FfiConverterOptionalTypeSuccessAction.allocationSize(value.successAction);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link PrepareSendPaymentRequest} record objects.
 */
const PrepareSendPaymentRequest = exports.PrepareSendPaymentRequest = (() => {
  const defaults = () => ({
    amountSats: undefined
  });
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link PrepareSendPaymentRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link PrepareSendPaymentRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypePrepareSendPaymentRequest = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        paymentRequest: FfiConverterString.read(from),
        amountSats: FfiConverterOptionalUInt64.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.paymentRequest, into);
      FfiConverterOptionalUInt64.write(value.amountSats, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.paymentRequest) + FfiConverterOptionalUInt64.allocationSize(value.amountSats);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link PrepareSendPaymentResponse} record objects.
 */
const PrepareSendPaymentResponse = exports.PrepareSendPaymentResponse = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link PrepareSendPaymentResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link PrepareSendPaymentResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypePrepareSendPaymentResponse = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        paymentMethod: FfiConverterTypeSendPaymentMethod.read(from),
        amountSats: _uniffiBindgenReactNative.FfiConverterUInt64.read(from)
      };
    }
    write(value, into) {
      FfiConverterTypeSendPaymentMethod.write(value.paymentMethod, into);
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.amountSats, into);
    }
    allocationSize(value) {
      return FfiConverterTypeSendPaymentMethod.allocationSize(value.paymentMethod) + _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.amountSats);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link ReceivePaymentRequest} record objects.
 */
const ReceivePaymentRequest = exports.ReceivePaymentRequest = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link ReceivePaymentRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link ReceivePaymentRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeReceivePaymentRequest = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        paymentMethod: FfiConverterTypeReceivePaymentMethod.read(from)
      };
    }
    write(value, into) {
      FfiConverterTypeReceivePaymentMethod.write(value.paymentMethod, into);
    }
    allocationSize(value) {
      return FfiConverterTypeReceivePaymentMethod.allocationSize(value.paymentMethod);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link ReceivePaymentResponse} record objects.
 */
const ReceivePaymentResponse = exports.ReceivePaymentResponse = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link ReceivePaymentResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link ReceivePaymentResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeReceivePaymentResponse = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        paymentRequest: FfiConverterString.read(from),
        feeSats: _uniffiBindgenReactNative.FfiConverterUInt64.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.paymentRequest, into);
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.feeSats, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.paymentRequest) + _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.feeSats);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link RefundDepositRequest} record objects.
 */
const RefundDepositRequest = exports.RefundDepositRequest = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link RefundDepositRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link RefundDepositRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeRefundDepositRequest = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        txid: FfiConverterString.read(from),
        vout: _uniffiBindgenReactNative.FfiConverterUInt32.read(from),
        destinationAddress: FfiConverterString.read(from),
        fee: FfiConverterTypeFee.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.txid, into);
      _uniffiBindgenReactNative.FfiConverterUInt32.write(value.vout, into);
      FfiConverterString.write(value.destinationAddress, into);
      FfiConverterTypeFee.write(value.fee, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.txid) + _uniffiBindgenReactNative.FfiConverterUInt32.allocationSize(value.vout) + FfiConverterString.allocationSize(value.destinationAddress) + FfiConverterTypeFee.allocationSize(value.fee);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link RefundDepositResponse} record objects.
 */
const RefundDepositResponse = exports.RefundDepositResponse = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link RefundDepositResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link RefundDepositResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeRefundDepositResponse = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        txId: FfiConverterString.read(from),
        txHex: FfiConverterString.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.txId, into);
      FfiConverterString.write(value.txHex, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.txId) + FfiConverterString.allocationSize(value.txHex);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link RegisterLightningAddressRequest} record objects.
 */
const RegisterLightningAddressRequest = exports.RegisterLightningAddressRequest = (() => {
  const defaults = () => ({
    description: undefined
  });
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link RegisterLightningAddressRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link RegisterLightningAddressRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeRegisterLightningAddressRequest = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        username: FfiConverterString.read(from),
        description: FfiConverterOptionalString.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.username, into);
      FfiConverterOptionalString.write(value.description, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.username) + FfiConverterOptionalString.allocationSize(value.description);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link SendOnchainFeeQuote} record objects.
 */
const SendOnchainFeeQuote = exports.SendOnchainFeeQuote = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link SendOnchainFeeQuote}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link SendOnchainFeeQuote}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeSendOnchainFeeQuote = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        id: FfiConverterString.read(from),
        expiresAt: _uniffiBindgenReactNative.FfiConverterUInt64.read(from),
        speedFast: FfiConverterTypeSendOnchainSpeedFeeQuote.read(from),
        speedMedium: FfiConverterTypeSendOnchainSpeedFeeQuote.read(from),
        speedSlow: FfiConverterTypeSendOnchainSpeedFeeQuote.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.id, into);
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.expiresAt, into);
      FfiConverterTypeSendOnchainSpeedFeeQuote.write(value.speedFast, into);
      FfiConverterTypeSendOnchainSpeedFeeQuote.write(value.speedMedium, into);
      FfiConverterTypeSendOnchainSpeedFeeQuote.write(value.speedSlow, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.id) + _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.expiresAt) + FfiConverterTypeSendOnchainSpeedFeeQuote.allocationSize(value.speedFast) + FfiConverterTypeSendOnchainSpeedFeeQuote.allocationSize(value.speedMedium) + FfiConverterTypeSendOnchainSpeedFeeQuote.allocationSize(value.speedSlow);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link SendOnchainSpeedFeeQuote} record objects.
 */
const SendOnchainSpeedFeeQuote = exports.SendOnchainSpeedFeeQuote = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link SendOnchainSpeedFeeQuote}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link SendOnchainSpeedFeeQuote}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeSendOnchainSpeedFeeQuote = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        userFeeSat: _uniffiBindgenReactNative.FfiConverterUInt64.read(from),
        l1BroadcastFeeSat: _uniffiBindgenReactNative.FfiConverterUInt64.read(from)
      };
    }
    write(value, into) {
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.userFeeSat, into);
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.l1BroadcastFeeSat, into);
    }
    allocationSize(value) {
      return _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.userFeeSat) + _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.l1BroadcastFeeSat);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link SendPaymentRequest} record objects.
 */
const SendPaymentRequest = exports.SendPaymentRequest = (() => {
  const defaults = () => ({
    options: undefined
  });
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link SendPaymentRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link SendPaymentRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeSendPaymentRequest = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        prepareResponse: FfiConverterTypePrepareSendPaymentResponse.read(from),
        options: FfiConverterOptionalTypeSendPaymentOptions.read(from)
      };
    }
    write(value, into) {
      FfiConverterTypePrepareSendPaymentResponse.write(value.prepareResponse, into);
      FfiConverterOptionalTypeSendPaymentOptions.write(value.options, into);
    }
    allocationSize(value) {
      return FfiConverterTypePrepareSendPaymentResponse.allocationSize(value.prepareResponse) + FfiConverterOptionalTypeSendPaymentOptions.allocationSize(value.options);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link SendPaymentResponse} record objects.
 */
const SendPaymentResponse = exports.SendPaymentResponse = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link SendPaymentResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link SendPaymentResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeSendPaymentResponse = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        payment: FfiConverterTypePayment.read(from)
      };
    }
    write(value, into) {
      FfiConverterTypePayment.write(value.payment, into);
    }
    allocationSize(value) {
      return FfiConverterTypePayment.allocationSize(value.payment);
    }
  }
  return new FFIConverter();
})();

/**
 * Request to sync the wallet with the Spark network
 */

/**
 * Generated factory for {@link SyncWalletRequest} record objects.
 */
const SyncWalletRequest = exports.SyncWalletRequest = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link SyncWalletRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link SyncWalletRequest}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeSyncWalletRequest = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {};
    }
    write(value, into) {}
    allocationSize(value) {
      return 0;
    }
  }
  return new FFIConverter();
})();

/**
 * Response from synchronizing the wallet
 */

/**
 * Generated factory for {@link SyncWalletResponse} record objects.
 */
const SyncWalletResponse = exports.SyncWalletResponse = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link SyncWalletResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link SyncWalletResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeSyncWalletResponse = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {};
    }
    write(value, into) {}
    allocationSize(value) {
      return 0;
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link TxStatus} record objects.
 */
const TxStatus = exports.TxStatus = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link TxStatus}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link TxStatus}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeTxStatus = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        confirmed: _uniffiBindgenReactNative.FfiConverterBool.read(from),
        blockHeight: FfiConverterOptionalUInt32.read(from),
        blockTime: FfiConverterOptionalUInt64.read(from)
      };
    }
    write(value, into) {
      _uniffiBindgenReactNative.FfiConverterBool.write(value.confirmed, into);
      FfiConverterOptionalUInt32.write(value.blockHeight, into);
      FfiConverterOptionalUInt64.write(value.blockTime, into);
    }
    allocationSize(value) {
      return _uniffiBindgenReactNative.FfiConverterBool.allocationSize(value.confirmed) + FfiConverterOptionalUInt32.allocationSize(value.blockHeight) + FfiConverterOptionalUInt64.allocationSize(value.blockTime);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link Utxo} record objects.
 */
const Utxo = exports.Utxo = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link Utxo}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link Utxo}, with defaults specified
     * in Rust, in the {@link breez_sdk_spark} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_spark} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeUtxo = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        txid: FfiConverterString.read(from),
        vout: _uniffiBindgenReactNative.FfiConverterUInt32.read(from),
        value: _uniffiBindgenReactNative.FfiConverterUInt64.read(from),
        status: FfiConverterTypeTxStatus.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.txid, into);
      _uniffiBindgenReactNative.FfiConverterUInt32.write(value.vout, into);
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.value, into);
      FfiConverterTypeTxStatus.write(value.status, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.txid) + _uniffiBindgenReactNative.FfiConverterUInt32.allocationSize(value.vout) + _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.value) + FfiConverterTypeTxStatus.allocationSize(value.status);
    }
  }
  return new FFIConverter();
})();
const stringConverter = {
  stringToBytes: s => uniffiCaller.rustCall(status => (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_internal_fn_func_ffi__string_to_arraybuffer(s, status)),
  bytesToString: ab => uniffiCaller.rustCall(status => (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_internal_fn_func_ffi__arraybuffer_to_string(ab, status)),
  stringByteLength: s => uniffiCaller.rustCall(status => (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_internal_fn_func_ffi__string_to_byte_length(s, status))
};
const FfiConverterString = (0, _uniffiBindgenReactNative.uniffiCreateFfiConverterString)(stringConverter);

// Error type: ChainServiceError

// Enum: ChainServiceError
let ChainServiceError_Tags = exports.ChainServiceError_Tags = /*#__PURE__*/function (ChainServiceError_Tags) {
  ChainServiceError_Tags["InvalidAddress"] = "InvalidAddress";
  ChainServiceError_Tags["ServiceConnectivity"] = "ServiceConnectivity";
  ChainServiceError_Tags["Generic"] = "Generic";
  return ChainServiceError_Tags;
}({});
const ChainServiceError = exports.ChainServiceError = (() => {
  class InvalidAddress_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'ChainServiceError';
    tag = ChainServiceError_Tags.InvalidAddress;
    constructor(v0) {
      super('ChainServiceError', 'InvalidAddress');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new InvalidAddress_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === ChainServiceError_Tags.InvalidAddress;
    }
    static hasInner(obj) {
      return InvalidAddress_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  class ServiceConnectivity_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'ChainServiceError';
    tag = ChainServiceError_Tags.ServiceConnectivity;
    constructor(v0) {
      super('ChainServiceError', 'ServiceConnectivity');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new ServiceConnectivity_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === ChainServiceError_Tags.ServiceConnectivity;
    }
    static hasInner(obj) {
      return ServiceConnectivity_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  class Generic_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'ChainServiceError';
    tag = ChainServiceError_Tags.Generic;
    constructor(v0) {
      super('ChainServiceError', 'Generic');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new Generic_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === ChainServiceError_Tags.Generic;
    }
    static hasInner(obj) {
      return Generic_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  function instanceOf(obj) {
    return obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'ChainServiceError';
  }
  return Object.freeze({
    instanceOf,
    InvalidAddress: InvalidAddress_,
    ServiceConnectivity: ServiceConnectivity_,
    Generic: Generic_
  });
})();
// FfiConverter for enum ChainServiceError
const FfiConverterTypeChainServiceError = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new ChainServiceError.InvalidAddress(FfiConverterString.read(from));
        case 2:
          return new ChainServiceError.ServiceConnectivity(FfiConverterString.read(from));
        case 3:
          return new ChainServiceError.Generic(FfiConverterString.read(from));
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value.tag) {
        case ChainServiceError_Tags.InvalidAddress:
          {
            ordinalConverter.write(1, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        case ChainServiceError_Tags.ServiceConnectivity:
          {
            ordinalConverter.write(2, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        case ChainServiceError_Tags.Generic:
          {
            ordinalConverter.write(3, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        default:
          // Throwing from here means that ChainServiceError_Tags hasn't matched an ordinal.
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value) {
      switch (value.tag) {
        case ChainServiceError_Tags.InvalidAddress:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(1);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        case ChainServiceError_Tags.ServiceConnectivity:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(2);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        case ChainServiceError_Tags.Generic:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(3);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();

// Enum: DepositClaimError
let DepositClaimError_Tags = exports.DepositClaimError_Tags = /*#__PURE__*/function (DepositClaimError_Tags) {
  DepositClaimError_Tags["DepositClaimFeeExceeded"] = "DepositClaimFeeExceeded";
  DepositClaimError_Tags["MissingUtxo"] = "MissingUtxo";
  DepositClaimError_Tags["Generic"] = "Generic";
  return DepositClaimError_Tags;
}({});
const DepositClaimError = exports.DepositClaimError = (() => {
  class DepositClaimFeeExceeded_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'DepositClaimError';
    tag = DepositClaimError_Tags.DepositClaimFeeExceeded;
    constructor(inner) {
      super('DepositClaimError', 'DepositClaimFeeExceeded');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new DepositClaimFeeExceeded_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === DepositClaimError_Tags.DepositClaimFeeExceeded;
    }
  }
  class MissingUtxo_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'DepositClaimError';
    tag = DepositClaimError_Tags.MissingUtxo;
    constructor(inner) {
      super('DepositClaimError', 'MissingUtxo');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new MissingUtxo_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === DepositClaimError_Tags.MissingUtxo;
    }
  }
  class Generic_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'DepositClaimError';
    tag = DepositClaimError_Tags.Generic;
    constructor(inner) {
      super('DepositClaimError', 'Generic');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new Generic_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === DepositClaimError_Tags.Generic;
    }
  }
  function instanceOf(obj) {
    return obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'DepositClaimError';
  }
  return Object.freeze({
    instanceOf,
    DepositClaimFeeExceeded: DepositClaimFeeExceeded_,
    MissingUtxo: MissingUtxo_,
    Generic: Generic_
  });
})();
// FfiConverter for enum DepositClaimError
const FfiConverterTypeDepositClaimError = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new DepositClaimError.DepositClaimFeeExceeded({
            tx: FfiConverterString.read(from),
            vout: _uniffiBindgenReactNative.FfiConverterUInt32.read(from),
            maxFee: FfiConverterTypeFee.read(from),
            actualFee: _uniffiBindgenReactNative.FfiConverterUInt64.read(from)
          });
        case 2:
          return new DepositClaimError.MissingUtxo({
            tx: FfiConverterString.read(from),
            vout: _uniffiBindgenReactNative.FfiConverterUInt32.read(from)
          });
        case 3:
          return new DepositClaimError.Generic({
            message: FfiConverterString.read(from)
          });
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value.tag) {
        case DepositClaimError_Tags.DepositClaimFeeExceeded:
          {
            ordinalConverter.write(1, into);
            const inner = value.inner;
            FfiConverterString.write(inner.tx, into);
            _uniffiBindgenReactNative.FfiConverterUInt32.write(inner.vout, into);
            FfiConverterTypeFee.write(inner.maxFee, into);
            _uniffiBindgenReactNative.FfiConverterUInt64.write(inner.actualFee, into);
            return;
          }
        case DepositClaimError_Tags.MissingUtxo:
          {
            ordinalConverter.write(2, into);
            const inner = value.inner;
            FfiConverterString.write(inner.tx, into);
            _uniffiBindgenReactNative.FfiConverterUInt32.write(inner.vout, into);
            return;
          }
        case DepositClaimError_Tags.Generic:
          {
            ordinalConverter.write(3, into);
            const inner = value.inner;
            FfiConverterString.write(inner.message, into);
            return;
          }
        default:
          // Throwing from here means that DepositClaimError_Tags hasn't matched an ordinal.
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value) {
      switch (value.tag) {
        case DepositClaimError_Tags.DepositClaimFeeExceeded:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(1);
            size += FfiConverterString.allocationSize(inner.tx);
            size += _uniffiBindgenReactNative.FfiConverterUInt32.allocationSize(inner.vout);
            size += FfiConverterTypeFee.allocationSize(inner.maxFee);
            size += _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(inner.actualFee);
            return size;
          }
        case DepositClaimError_Tags.MissingUtxo:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(2);
            size += FfiConverterString.allocationSize(inner.tx);
            size += _uniffiBindgenReactNative.FfiConverterUInt32.allocationSize(inner.vout);
            return size;
          }
        case DepositClaimError_Tags.Generic:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(3);
            size += FfiConverterString.allocationSize(inner.message);
            return size;
          }
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();

// Enum: Fee
let Fee_Tags = exports.Fee_Tags = /*#__PURE__*/function (Fee_Tags) {
  Fee_Tags["Fixed"] = "Fixed";
  Fee_Tags["Rate"] = "Rate";
  return Fee_Tags;
}({});
const Fee = exports.Fee = (() => {
  class Fixed_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'Fee';
    tag = Fee_Tags.Fixed;
    constructor(inner) {
      super('Fee', 'Fixed');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new Fixed_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === Fee_Tags.Fixed;
    }
  }
  class Rate_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'Fee';
    tag = Fee_Tags.Rate;
    constructor(inner) {
      super('Fee', 'Rate');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new Rate_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === Fee_Tags.Rate;
    }
  }
  function instanceOf(obj) {
    return obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'Fee';
  }
  return Object.freeze({
    instanceOf,
    Fixed: Fixed_,
    Rate: Rate_
  });
})();
// FfiConverter for enum Fee
const FfiConverterTypeFee = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new Fee.Fixed({
            amount: _uniffiBindgenReactNative.FfiConverterUInt64.read(from)
          });
        case 2:
          return new Fee.Rate({
            satPerVbyte: _uniffiBindgenReactNative.FfiConverterUInt64.read(from)
          });
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value.tag) {
        case Fee_Tags.Fixed:
          {
            ordinalConverter.write(1, into);
            const inner = value.inner;
            _uniffiBindgenReactNative.FfiConverterUInt64.write(inner.amount, into);
            return;
          }
        case Fee_Tags.Rate:
          {
            ordinalConverter.write(2, into);
            const inner = value.inner;
            _uniffiBindgenReactNative.FfiConverterUInt64.write(inner.satPerVbyte, into);
            return;
          }
        default:
          // Throwing from here means that Fee_Tags hasn't matched an ordinal.
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value) {
      switch (value.tag) {
        case Fee_Tags.Fixed:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(1);
            size += _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(inner.amount);
            return size;
          }
        case Fee_Tags.Rate:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(2);
            size += _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(inner.satPerVbyte);
            return size;
          }
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();
let KeySetType = exports.KeySetType = /*#__PURE__*/function (KeySetType) {
  KeySetType[KeySetType["Default"] = 0] = "Default";
  KeySetType[KeySetType["Taproot"] = 1] = "Taproot";
  KeySetType[KeySetType["NativeSegwit"] = 2] = "NativeSegwit";
  KeySetType[KeySetType["WrappedSegwit"] = 3] = "WrappedSegwit";
  KeySetType[KeySetType["Legacy"] = 4] = "Legacy";
  return KeySetType;
}({});
const FfiConverterTypeKeySetType = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return KeySetType.Default;
        case 2:
          return KeySetType.Taproot;
        case 3:
          return KeySetType.NativeSegwit;
        case 4:
          return KeySetType.WrappedSegwit;
        case 5:
          return KeySetType.Legacy;
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value) {
        case KeySetType.Default:
          return ordinalConverter.write(1, into);
        case KeySetType.Taproot:
          return ordinalConverter.write(2, into);
        case KeySetType.NativeSegwit:
          return ordinalConverter.write(3, into);
        case KeySetType.WrappedSegwit:
          return ordinalConverter.write(4, into);
        case KeySetType.Legacy:
          return ordinalConverter.write(5, into);
      }
    }
    allocationSize(value) {
      return ordinalConverter.allocationSize(0);
    }
  }
  return new FFIConverter();
})();
let Network = exports.Network = /*#__PURE__*/function (Network) {
  Network[Network["Mainnet"] = 0] = "Mainnet";
  Network[Network["Regtest"] = 1] = "Regtest";
  return Network;
}({});
const FfiConverterTypeNetwork = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return Network.Mainnet;
        case 2:
          return Network.Regtest;
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value) {
        case Network.Mainnet:
          return ordinalConverter.write(1, into);
        case Network.Regtest:
          return ordinalConverter.write(2, into);
      }
    }
    allocationSize(value) {
      return ordinalConverter.allocationSize(0);
    }
  }
  return new FFIConverter();
})();
let OnchainConfirmationSpeed = exports.OnchainConfirmationSpeed = /*#__PURE__*/function (OnchainConfirmationSpeed) {
  OnchainConfirmationSpeed[OnchainConfirmationSpeed["Fast"] = 0] = "Fast";
  OnchainConfirmationSpeed[OnchainConfirmationSpeed["Medium"] = 1] = "Medium";
  OnchainConfirmationSpeed[OnchainConfirmationSpeed["Slow"] = 2] = "Slow";
  return OnchainConfirmationSpeed;
}({});
const FfiConverterTypeOnchainConfirmationSpeed = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return OnchainConfirmationSpeed.Fast;
        case 2:
          return OnchainConfirmationSpeed.Medium;
        case 3:
          return OnchainConfirmationSpeed.Slow;
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value) {
        case OnchainConfirmationSpeed.Fast:
          return ordinalConverter.write(1, into);
        case OnchainConfirmationSpeed.Medium:
          return ordinalConverter.write(2, into);
        case OnchainConfirmationSpeed.Slow:
          return ordinalConverter.write(3, into);
      }
    }
    allocationSize(value) {
      return ordinalConverter.allocationSize(0);
    }
  }
  return new FFIConverter();
})();

// Enum: PaymentDetails
let PaymentDetails_Tags = exports.PaymentDetails_Tags = /*#__PURE__*/function (PaymentDetails_Tags) {
  PaymentDetails_Tags["Spark"] = "Spark";
  PaymentDetails_Tags["Lightning"] = "Lightning";
  PaymentDetails_Tags["Withdraw"] = "Withdraw";
  PaymentDetails_Tags["Deposit"] = "Deposit";
  return PaymentDetails_Tags;
}({});
const PaymentDetails = exports.PaymentDetails = (() => {
  class Spark_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'PaymentDetails';
    tag = PaymentDetails_Tags.Spark;
    constructor() {
      super('PaymentDetails', 'Spark');
    }
    static new() {
      return new Spark_();
    }
    static instanceOf(obj) {
      return obj.tag === PaymentDetails_Tags.Spark;
    }
  }
  class Lightning_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'PaymentDetails';
    tag = PaymentDetails_Tags.Lightning;
    constructor(inner) {
      super('PaymentDetails', 'Lightning');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new Lightning_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === PaymentDetails_Tags.Lightning;
    }
  }
  class Withdraw_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'PaymentDetails';
    tag = PaymentDetails_Tags.Withdraw;
    constructor(inner) {
      super('PaymentDetails', 'Withdraw');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new Withdraw_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === PaymentDetails_Tags.Withdraw;
    }
  }
  class Deposit_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'PaymentDetails';
    tag = PaymentDetails_Tags.Deposit;
    constructor(inner) {
      super('PaymentDetails', 'Deposit');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new Deposit_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === PaymentDetails_Tags.Deposit;
    }
  }
  function instanceOf(obj) {
    return obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'PaymentDetails';
  }
  return Object.freeze({
    instanceOf,
    Spark: Spark_,
    Lightning: Lightning_,
    Withdraw: Withdraw_,
    Deposit: Deposit_
  });
})();
// FfiConverter for enum PaymentDetails
const FfiConverterTypePaymentDetails = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new PaymentDetails.Spark();
        case 2:
          return new PaymentDetails.Lightning({
            description: FfiConverterOptionalString.read(from),
            preimage: FfiConverterOptionalString.read(from),
            invoice: FfiConverterString.read(from),
            paymentHash: FfiConverterString.read(from),
            destinationPubkey: FfiConverterString.read(from),
            lnurlPayInfo: FfiConverterOptionalTypeLnurlPayInfo.read(from)
          });
        case 3:
          return new PaymentDetails.Withdraw({
            txId: FfiConverterString.read(from)
          });
        case 4:
          return new PaymentDetails.Deposit({
            txId: FfiConverterString.read(from)
          });
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value.tag) {
        case PaymentDetails_Tags.Spark:
          {
            ordinalConverter.write(1, into);
            return;
          }
        case PaymentDetails_Tags.Lightning:
          {
            ordinalConverter.write(2, into);
            const inner = value.inner;
            FfiConverterOptionalString.write(inner.description, into);
            FfiConverterOptionalString.write(inner.preimage, into);
            FfiConverterString.write(inner.invoice, into);
            FfiConverterString.write(inner.paymentHash, into);
            FfiConverterString.write(inner.destinationPubkey, into);
            FfiConverterOptionalTypeLnurlPayInfo.write(inner.lnurlPayInfo, into);
            return;
          }
        case PaymentDetails_Tags.Withdraw:
          {
            ordinalConverter.write(3, into);
            const inner = value.inner;
            FfiConverterString.write(inner.txId, into);
            return;
          }
        case PaymentDetails_Tags.Deposit:
          {
            ordinalConverter.write(4, into);
            const inner = value.inner;
            FfiConverterString.write(inner.txId, into);
            return;
          }
        default:
          // Throwing from here means that PaymentDetails_Tags hasn't matched an ordinal.
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value) {
      switch (value.tag) {
        case PaymentDetails_Tags.Spark:
          {
            return ordinalConverter.allocationSize(1);
          }
        case PaymentDetails_Tags.Lightning:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(2);
            size += FfiConverterOptionalString.allocationSize(inner.description);
            size += FfiConverterOptionalString.allocationSize(inner.preimage);
            size += FfiConverterString.allocationSize(inner.invoice);
            size += FfiConverterString.allocationSize(inner.paymentHash);
            size += FfiConverterString.allocationSize(inner.destinationPubkey);
            size += FfiConverterOptionalTypeLnurlPayInfo.allocationSize(inner.lnurlPayInfo);
            return size;
          }
        case PaymentDetails_Tags.Withdraw:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(3);
            size += FfiConverterString.allocationSize(inner.txId);
            return size;
          }
        case PaymentDetails_Tags.Deposit:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(4);
            size += FfiConverterString.allocationSize(inner.txId);
            return size;
          }
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();
let PaymentMethod = exports.PaymentMethod = /*#__PURE__*/function (PaymentMethod) {
  PaymentMethod[PaymentMethod["Lightning"] = 0] = "Lightning";
  PaymentMethod[PaymentMethod["Spark"] = 1] = "Spark";
  PaymentMethod[PaymentMethod["Deposit"] = 2] = "Deposit";
  PaymentMethod[PaymentMethod["Withdraw"] = 3] = "Withdraw";
  PaymentMethod[PaymentMethod["Unknown"] = 4] = "Unknown";
  return PaymentMethod;
}({});
const FfiConverterTypePaymentMethod = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return PaymentMethod.Lightning;
        case 2:
          return PaymentMethod.Spark;
        case 3:
          return PaymentMethod.Deposit;
        case 4:
          return PaymentMethod.Withdraw;
        case 5:
          return PaymentMethod.Unknown;
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value) {
        case PaymentMethod.Lightning:
          return ordinalConverter.write(1, into);
        case PaymentMethod.Spark:
          return ordinalConverter.write(2, into);
        case PaymentMethod.Deposit:
          return ordinalConverter.write(3, into);
        case PaymentMethod.Withdraw:
          return ordinalConverter.write(4, into);
        case PaymentMethod.Unknown:
          return ordinalConverter.write(5, into);
      }
    }
    allocationSize(value) {
      return ordinalConverter.allocationSize(0);
    }
  }
  return new FFIConverter();
})();

/**
 * The status of a payment
 */
let PaymentStatus = exports.PaymentStatus = /*#__PURE__*/function (PaymentStatus) {
  /**
   * Payment is completed successfully
   */
  PaymentStatus[PaymentStatus["Completed"] = 0] = "Completed";
  /**
   * Payment is in progress
   */
  PaymentStatus[PaymentStatus["Pending"] = 1] = "Pending";
  /**
   * Payment has failed
   */
  PaymentStatus[PaymentStatus["Failed"] = 2] = "Failed";
  return PaymentStatus;
}({});
const FfiConverterTypePaymentStatus = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return PaymentStatus.Completed;
        case 2:
          return PaymentStatus.Pending;
        case 3:
          return PaymentStatus.Failed;
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value) {
        case PaymentStatus.Completed:
          return ordinalConverter.write(1, into);
        case PaymentStatus.Pending:
          return ordinalConverter.write(2, into);
        case PaymentStatus.Failed:
          return ordinalConverter.write(3, into);
      }
    }
    allocationSize(value) {
      return ordinalConverter.allocationSize(0);
    }
  }
  return new FFIConverter();
})();

/**
 * The type of payment
 */
let PaymentType = exports.PaymentType = /*#__PURE__*/function (PaymentType) {
  /**
   * Payment sent from this wallet
   */
  PaymentType[PaymentType["Send"] = 0] = "Send";
  /**
   * Payment received to this wallet
   */
  PaymentType[PaymentType["Receive"] = 1] = "Receive";
  return PaymentType;
}({});
const FfiConverterTypePaymentType = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return PaymentType.Send;
        case 2:
          return PaymentType.Receive;
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value) {
        case PaymentType.Send:
          return ordinalConverter.write(1, into);
        case PaymentType.Receive:
          return ordinalConverter.write(2, into);
      }
    }
    allocationSize(value) {
      return ordinalConverter.allocationSize(0);
    }
  }
  return new FFIConverter();
})();

// Enum: ReceivePaymentMethod
let ReceivePaymentMethod_Tags = exports.ReceivePaymentMethod_Tags = /*#__PURE__*/function (ReceivePaymentMethod_Tags) {
  ReceivePaymentMethod_Tags["SparkAddress"] = "SparkAddress";
  ReceivePaymentMethod_Tags["BitcoinAddress"] = "BitcoinAddress";
  ReceivePaymentMethod_Tags["Bolt11Invoice"] = "Bolt11Invoice";
  return ReceivePaymentMethod_Tags;
}({});
const ReceivePaymentMethod = exports.ReceivePaymentMethod = (() => {
  class SparkAddress_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'ReceivePaymentMethod';
    tag = ReceivePaymentMethod_Tags.SparkAddress;
    constructor() {
      super('ReceivePaymentMethod', 'SparkAddress');
    }
    static new() {
      return new SparkAddress_();
    }
    static instanceOf(obj) {
      return obj.tag === ReceivePaymentMethod_Tags.SparkAddress;
    }
  }
  class BitcoinAddress_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'ReceivePaymentMethod';
    tag = ReceivePaymentMethod_Tags.BitcoinAddress;
    constructor() {
      super('ReceivePaymentMethod', 'BitcoinAddress');
    }
    static new() {
      return new BitcoinAddress_();
    }
    static instanceOf(obj) {
      return obj.tag === ReceivePaymentMethod_Tags.BitcoinAddress;
    }
  }
  class Bolt11Invoice_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'ReceivePaymentMethod';
    tag = ReceivePaymentMethod_Tags.Bolt11Invoice;
    constructor(inner) {
      super('ReceivePaymentMethod', 'Bolt11Invoice');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new Bolt11Invoice_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === ReceivePaymentMethod_Tags.Bolt11Invoice;
    }
  }
  function instanceOf(obj) {
    return obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'ReceivePaymentMethod';
  }
  return Object.freeze({
    instanceOf,
    SparkAddress: SparkAddress_,
    BitcoinAddress: BitcoinAddress_,
    Bolt11Invoice: Bolt11Invoice_
  });
})();
// FfiConverter for enum ReceivePaymentMethod
const FfiConverterTypeReceivePaymentMethod = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new ReceivePaymentMethod.SparkAddress();
        case 2:
          return new ReceivePaymentMethod.BitcoinAddress();
        case 3:
          return new ReceivePaymentMethod.Bolt11Invoice({
            description: FfiConverterString.read(from),
            amountSats: FfiConverterOptionalUInt64.read(from)
          });
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value.tag) {
        case ReceivePaymentMethod_Tags.SparkAddress:
          {
            ordinalConverter.write(1, into);
            return;
          }
        case ReceivePaymentMethod_Tags.BitcoinAddress:
          {
            ordinalConverter.write(2, into);
            return;
          }
        case ReceivePaymentMethod_Tags.Bolt11Invoice:
          {
            ordinalConverter.write(3, into);
            const inner = value.inner;
            FfiConverterString.write(inner.description, into);
            FfiConverterOptionalUInt64.write(inner.amountSats, into);
            return;
          }
        default:
          // Throwing from here means that ReceivePaymentMethod_Tags hasn't matched an ordinal.
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value) {
      switch (value.tag) {
        case ReceivePaymentMethod_Tags.SparkAddress:
          {
            return ordinalConverter.allocationSize(1);
          }
        case ReceivePaymentMethod_Tags.BitcoinAddress:
          {
            return ordinalConverter.allocationSize(2);
          }
        case ReceivePaymentMethod_Tags.Bolt11Invoice:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(3);
            size += FfiConverterString.allocationSize(inner.description);
            size += FfiConverterOptionalUInt64.allocationSize(inner.amountSats);
            return size;
          }
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();

// Error type: SdkError

// Enum: SdkError
let SdkError_Tags = exports.SdkError_Tags = /*#__PURE__*/function (SdkError_Tags) {
  SdkError_Tags["SparkError"] = "SparkError";
  SdkError_Tags["InvalidUuid"] = "InvalidUuid";
  SdkError_Tags["InvalidInput"] = "InvalidInput";
  SdkError_Tags["NetworkError"] = "NetworkError";
  SdkError_Tags["StorageError"] = "StorageError";
  SdkError_Tags["ChainServiceError"] = "ChainServiceError";
  SdkError_Tags["DepositClaimFeeExceeded"] = "DepositClaimFeeExceeded";
  SdkError_Tags["MissingUtxo"] = "MissingUtxo";
  SdkError_Tags["LnurlError"] = "LnurlError";
  SdkError_Tags["Generic"] = "Generic";
  return SdkError_Tags;
}({});
/**
 * Error type for the `BreezSdk`
 */
const SdkError = exports.SdkError = (() => {
  class SparkError_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SdkError';
    tag = SdkError_Tags.SparkError;
    constructor(v0) {
      super('SdkError', 'SparkError');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new SparkError_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === SdkError_Tags.SparkError;
    }
    static hasInner(obj) {
      return SparkError_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  class InvalidUuid_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SdkError';
    tag = SdkError_Tags.InvalidUuid;
    constructor(v0) {
      super('SdkError', 'InvalidUuid');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new InvalidUuid_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === SdkError_Tags.InvalidUuid;
    }
    static hasInner(obj) {
      return InvalidUuid_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  /**
   * Invalid input error
   */
  class InvalidInput_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SdkError';
    tag = SdkError_Tags.InvalidInput;
    constructor(v0) {
      super('SdkError', 'InvalidInput');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new InvalidInput_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === SdkError_Tags.InvalidInput;
    }
    static hasInner(obj) {
      return InvalidInput_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  /**
   * Network error
   */
  class NetworkError_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SdkError';
    tag = SdkError_Tags.NetworkError;
    constructor(v0) {
      super('SdkError', 'NetworkError');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new NetworkError_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === SdkError_Tags.NetworkError;
    }
    static hasInner(obj) {
      return NetworkError_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  /**
   * Storage error
   */
  class StorageError_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SdkError';
    tag = SdkError_Tags.StorageError;
    constructor(v0) {
      super('SdkError', 'StorageError');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new StorageError_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === SdkError_Tags.StorageError;
    }
    static hasInner(obj) {
      return StorageError_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  class ChainServiceError_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SdkError';
    tag = SdkError_Tags.ChainServiceError;
    constructor(v0) {
      super('SdkError', 'ChainServiceError');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new ChainServiceError_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === SdkError_Tags.ChainServiceError;
    }
    static hasInner(obj) {
      return ChainServiceError_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  class DepositClaimFeeExceeded_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SdkError';
    tag = SdkError_Tags.DepositClaimFeeExceeded;
    constructor(inner) {
      super('SdkError', 'DepositClaimFeeExceeded');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new DepositClaimFeeExceeded_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === SdkError_Tags.DepositClaimFeeExceeded;
    }
    static hasInner(obj) {
      return DepositClaimFeeExceeded_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  class MissingUtxo_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SdkError';
    tag = SdkError_Tags.MissingUtxo;
    constructor(inner) {
      super('SdkError', 'MissingUtxo');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new MissingUtxo_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === SdkError_Tags.MissingUtxo;
    }
    static hasInner(obj) {
      return MissingUtxo_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  class LnurlError_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SdkError';
    tag = SdkError_Tags.LnurlError;
    constructor(v0) {
      super('SdkError', 'LnurlError');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new LnurlError_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === SdkError_Tags.LnurlError;
    }
    static hasInner(obj) {
      return LnurlError_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  class Generic_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SdkError';
    tag = SdkError_Tags.Generic;
    constructor(v0) {
      super('SdkError', 'Generic');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new Generic_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === SdkError_Tags.Generic;
    }
    static hasInner(obj) {
      return Generic_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  function instanceOf(obj) {
    return obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'SdkError';
  }
  return Object.freeze({
    instanceOf,
    SparkError: SparkError_,
    InvalidUuid: InvalidUuid_,
    InvalidInput: InvalidInput_,
    NetworkError: NetworkError_,
    StorageError: StorageError_,
    ChainServiceError: ChainServiceError_,
    DepositClaimFeeExceeded: DepositClaimFeeExceeded_,
    MissingUtxo: MissingUtxo_,
    LnurlError: LnurlError_,
    Generic: Generic_
  });
})();

/**
 * Error type for the `BreezSdk`
 */

// FfiConverter for enum SdkError
const FfiConverterTypeSdkError = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new SdkError.SparkError(FfiConverterString.read(from));
        case 2:
          return new SdkError.InvalidUuid(FfiConverterString.read(from));
        case 3:
          return new SdkError.InvalidInput(FfiConverterString.read(from));
        case 4:
          return new SdkError.NetworkError(FfiConverterString.read(from));
        case 5:
          return new SdkError.StorageError(FfiConverterString.read(from));
        case 6:
          return new SdkError.ChainServiceError(FfiConverterString.read(from));
        case 7:
          return new SdkError.DepositClaimFeeExceeded({
            tx: FfiConverterString.read(from),
            vout: _uniffiBindgenReactNative.FfiConverterUInt32.read(from),
            maxFee: FfiConverterTypeFee.read(from),
            actualFee: _uniffiBindgenReactNative.FfiConverterUInt64.read(from)
          });
        case 8:
          return new SdkError.MissingUtxo({
            tx: FfiConverterString.read(from),
            vout: _uniffiBindgenReactNative.FfiConverterUInt32.read(from)
          });
        case 9:
          return new SdkError.LnurlError(FfiConverterString.read(from));
        case 10:
          return new SdkError.Generic(FfiConverterString.read(from));
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value.tag) {
        case SdkError_Tags.SparkError:
          {
            ordinalConverter.write(1, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        case SdkError_Tags.InvalidUuid:
          {
            ordinalConverter.write(2, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        case SdkError_Tags.InvalidInput:
          {
            ordinalConverter.write(3, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        case SdkError_Tags.NetworkError:
          {
            ordinalConverter.write(4, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        case SdkError_Tags.StorageError:
          {
            ordinalConverter.write(5, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        case SdkError_Tags.ChainServiceError:
          {
            ordinalConverter.write(6, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        case SdkError_Tags.DepositClaimFeeExceeded:
          {
            ordinalConverter.write(7, into);
            const inner = value.inner;
            FfiConverterString.write(inner.tx, into);
            _uniffiBindgenReactNative.FfiConverterUInt32.write(inner.vout, into);
            FfiConverterTypeFee.write(inner.maxFee, into);
            _uniffiBindgenReactNative.FfiConverterUInt64.write(inner.actualFee, into);
            return;
          }
        case SdkError_Tags.MissingUtxo:
          {
            ordinalConverter.write(8, into);
            const inner = value.inner;
            FfiConverterString.write(inner.tx, into);
            _uniffiBindgenReactNative.FfiConverterUInt32.write(inner.vout, into);
            return;
          }
        case SdkError_Tags.LnurlError:
          {
            ordinalConverter.write(9, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        case SdkError_Tags.Generic:
          {
            ordinalConverter.write(10, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        default:
          // Throwing from here means that SdkError_Tags hasn't matched an ordinal.
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value) {
      switch (value.tag) {
        case SdkError_Tags.SparkError:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(1);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        case SdkError_Tags.InvalidUuid:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(2);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        case SdkError_Tags.InvalidInput:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(3);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        case SdkError_Tags.NetworkError:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(4);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        case SdkError_Tags.StorageError:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(5);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        case SdkError_Tags.ChainServiceError:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(6);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        case SdkError_Tags.DepositClaimFeeExceeded:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(7);
            size += FfiConverterString.allocationSize(inner.tx);
            size += _uniffiBindgenReactNative.FfiConverterUInt32.allocationSize(inner.vout);
            size += FfiConverterTypeFee.allocationSize(inner.maxFee);
            size += _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(inner.actualFee);
            return size;
          }
        case SdkError_Tags.MissingUtxo:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(8);
            size += FfiConverterString.allocationSize(inner.tx);
            size += _uniffiBindgenReactNative.FfiConverterUInt32.allocationSize(inner.vout);
            return size;
          }
        case SdkError_Tags.LnurlError:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(9);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        case SdkError_Tags.Generic:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(10);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();

// Enum: SdkEvent
let SdkEvent_Tags = exports.SdkEvent_Tags = /*#__PURE__*/function (SdkEvent_Tags) {
  SdkEvent_Tags["Synced"] = "Synced";
  SdkEvent_Tags["ClaimDepositsFailed"] = "ClaimDepositsFailed";
  SdkEvent_Tags["ClaimDepositsSucceeded"] = "ClaimDepositsSucceeded";
  SdkEvent_Tags["PaymentSucceeded"] = "PaymentSucceeded";
  SdkEvent_Tags["PaymentFailed"] = "PaymentFailed";
  return SdkEvent_Tags;
}({});
/**
 * Events emitted by the SDK
 */
const SdkEvent = exports.SdkEvent = (() => {
  /**
   * Emitted when the wallet has been synchronized with the network
   */
  class Synced_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SdkEvent';
    tag = SdkEvent_Tags.Synced;
    constructor() {
      super('SdkEvent', 'Synced');
    }
    static new() {
      return new Synced_();
    }
    static instanceOf(obj) {
      return obj.tag === SdkEvent_Tags.Synced;
    }
  }
  /**
   * Emitted when the wallet failed to claim some deposits
   */
  class ClaimDepositsFailed_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SdkEvent';
    tag = SdkEvent_Tags.ClaimDepositsFailed;
    constructor(inner) {
      super('SdkEvent', 'ClaimDepositsFailed');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new ClaimDepositsFailed_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === SdkEvent_Tags.ClaimDepositsFailed;
    }
  }
  class ClaimDepositsSucceeded_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SdkEvent';
    tag = SdkEvent_Tags.ClaimDepositsSucceeded;
    constructor(inner) {
      super('SdkEvent', 'ClaimDepositsSucceeded');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new ClaimDepositsSucceeded_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === SdkEvent_Tags.ClaimDepositsSucceeded;
    }
  }
  class PaymentSucceeded_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SdkEvent';
    tag = SdkEvent_Tags.PaymentSucceeded;
    constructor(inner) {
      super('SdkEvent', 'PaymentSucceeded');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new PaymentSucceeded_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === SdkEvent_Tags.PaymentSucceeded;
    }
  }
  class PaymentFailed_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SdkEvent';
    tag = SdkEvent_Tags.PaymentFailed;
    constructor(inner) {
      super('SdkEvent', 'PaymentFailed');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new PaymentFailed_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === SdkEvent_Tags.PaymentFailed;
    }
  }
  function instanceOf(obj) {
    return obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'SdkEvent';
  }
  return Object.freeze({
    instanceOf,
    Synced: Synced_,
    ClaimDepositsFailed: ClaimDepositsFailed_,
    ClaimDepositsSucceeded: ClaimDepositsSucceeded_,
    PaymentSucceeded: PaymentSucceeded_,
    PaymentFailed: PaymentFailed_
  });
})();

/**
 * Events emitted by the SDK
 */

// FfiConverter for enum SdkEvent
const FfiConverterTypeSdkEvent = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new SdkEvent.Synced();
        case 2:
          return new SdkEvent.ClaimDepositsFailed({
            unclaimedDeposits: FfiConverterArrayTypeDepositInfo.read(from)
          });
        case 3:
          return new SdkEvent.ClaimDepositsSucceeded({
            claimedDeposits: FfiConverterArrayTypeDepositInfo.read(from)
          });
        case 4:
          return new SdkEvent.PaymentSucceeded({
            payment: FfiConverterTypePayment.read(from)
          });
        case 5:
          return new SdkEvent.PaymentFailed({
            payment: FfiConverterTypePayment.read(from)
          });
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value.tag) {
        case SdkEvent_Tags.Synced:
          {
            ordinalConverter.write(1, into);
            return;
          }
        case SdkEvent_Tags.ClaimDepositsFailed:
          {
            ordinalConverter.write(2, into);
            const inner = value.inner;
            FfiConverterArrayTypeDepositInfo.write(inner.unclaimedDeposits, into);
            return;
          }
        case SdkEvent_Tags.ClaimDepositsSucceeded:
          {
            ordinalConverter.write(3, into);
            const inner = value.inner;
            FfiConverterArrayTypeDepositInfo.write(inner.claimedDeposits, into);
            return;
          }
        case SdkEvent_Tags.PaymentSucceeded:
          {
            ordinalConverter.write(4, into);
            const inner = value.inner;
            FfiConverterTypePayment.write(inner.payment, into);
            return;
          }
        case SdkEvent_Tags.PaymentFailed:
          {
            ordinalConverter.write(5, into);
            const inner = value.inner;
            FfiConverterTypePayment.write(inner.payment, into);
            return;
          }
        default:
          // Throwing from here means that SdkEvent_Tags hasn't matched an ordinal.
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value) {
      switch (value.tag) {
        case SdkEvent_Tags.Synced:
          {
            return ordinalConverter.allocationSize(1);
          }
        case SdkEvent_Tags.ClaimDepositsFailed:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(2);
            size += FfiConverterArrayTypeDepositInfo.allocationSize(inner.unclaimedDeposits);
            return size;
          }
        case SdkEvent_Tags.ClaimDepositsSucceeded:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(3);
            size += FfiConverterArrayTypeDepositInfo.allocationSize(inner.claimedDeposits);
            return size;
          }
        case SdkEvent_Tags.PaymentSucceeded:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(4);
            size += FfiConverterTypePayment.allocationSize(inner.payment);
            return size;
          }
        case SdkEvent_Tags.PaymentFailed:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(5);
            size += FfiConverterTypePayment.allocationSize(inner.payment);
            return size;
          }
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();

// Enum: Seed
let Seed_Tags = exports.Seed_Tags = /*#__PURE__*/function (Seed_Tags) {
  Seed_Tags["Mnemonic"] = "Mnemonic";
  Seed_Tags["Entropy"] = "Entropy";
  return Seed_Tags;
}({});
/**
 * Represents the seed for wallet generation, either as a mnemonic phrase with an optional
 * passphrase or as raw entropy bytes.
 */
const Seed = exports.Seed = (() => {
  /**
   * A BIP-39 mnemonic phrase with an optional passphrase.
   */
  class Mnemonic_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'Seed';
    tag = Seed_Tags.Mnemonic;
    constructor(inner) {
      super('Seed', 'Mnemonic');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new Mnemonic_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === Seed_Tags.Mnemonic;
    }
  }
  /**
   * Raw entropy bytes.
   */
  class Entropy_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'Seed';
    tag = Seed_Tags.Entropy;
    constructor(v0) {
      super('Seed', 'Entropy');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new Entropy_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === Seed_Tags.Entropy;
    }
  }
  function instanceOf(obj) {
    return obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'Seed';
  }
  return Object.freeze({
    instanceOf,
    Mnemonic: Mnemonic_,
    Entropy: Entropy_
  });
})();

/**
 * Represents the seed for wallet generation, either as a mnemonic phrase with an optional
 * passphrase or as raw entropy bytes.
 */

// FfiConverter for enum Seed
const FfiConverterTypeSeed = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new Seed.Mnemonic({
            mnemonic: FfiConverterString.read(from),
            passphrase: FfiConverterOptionalString.read(from)
          });
        case 2:
          return new Seed.Entropy(_uniffiBindgenReactNative.FfiConverterArrayBuffer.read(from));
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value.tag) {
        case Seed_Tags.Mnemonic:
          {
            ordinalConverter.write(1, into);
            const inner = value.inner;
            FfiConverterString.write(inner.mnemonic, into);
            FfiConverterOptionalString.write(inner.passphrase, into);
            return;
          }
        case Seed_Tags.Entropy:
          {
            ordinalConverter.write(2, into);
            const inner = value.inner;
            _uniffiBindgenReactNative.FfiConverterArrayBuffer.write(inner[0], into);
            return;
          }
        default:
          // Throwing from here means that Seed_Tags hasn't matched an ordinal.
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value) {
      switch (value.tag) {
        case Seed_Tags.Mnemonic:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(1);
            size += FfiConverterString.allocationSize(inner.mnemonic);
            size += FfiConverterOptionalString.allocationSize(inner.passphrase);
            return size;
          }
        case Seed_Tags.Entropy:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(2);
            size += _uniffiBindgenReactNative.FfiConverterArrayBuffer.allocationSize(inner[0]);
            return size;
          }
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();

// Enum: SendPaymentMethod
let SendPaymentMethod_Tags = exports.SendPaymentMethod_Tags = /*#__PURE__*/function (SendPaymentMethod_Tags) {
  SendPaymentMethod_Tags["BitcoinAddress"] = "BitcoinAddress";
  SendPaymentMethod_Tags["Bolt11Invoice"] = "Bolt11Invoice";
  SendPaymentMethod_Tags["SparkAddress"] = "SparkAddress";
  return SendPaymentMethod_Tags;
}({});
const SendPaymentMethod = exports.SendPaymentMethod = (() => {
  class BitcoinAddress_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SendPaymentMethod';
    tag = SendPaymentMethod_Tags.BitcoinAddress;
    constructor(inner) {
      super('SendPaymentMethod', 'BitcoinAddress');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new BitcoinAddress_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === SendPaymentMethod_Tags.BitcoinAddress;
    }
  }
  class Bolt11Invoice_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SendPaymentMethod';
    tag = SendPaymentMethod_Tags.Bolt11Invoice;
    constructor(inner) {
      super('SendPaymentMethod', 'Bolt11Invoice');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new Bolt11Invoice_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === SendPaymentMethod_Tags.Bolt11Invoice;
    }
  }
  class SparkAddress_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SendPaymentMethod';
    tag = SendPaymentMethod_Tags.SparkAddress;
    constructor(inner) {
      super('SendPaymentMethod', 'SparkAddress');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new SparkAddress_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === SendPaymentMethod_Tags.SparkAddress;
    }
  }
  function instanceOf(obj) {
    return obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'SendPaymentMethod';
  }
  return Object.freeze({
    instanceOf,
    BitcoinAddress: BitcoinAddress_,
    Bolt11Invoice: Bolt11Invoice_,
    SparkAddress: SparkAddress_
  });
})();
// FfiConverter for enum SendPaymentMethod
const FfiConverterTypeSendPaymentMethod = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new SendPaymentMethod.BitcoinAddress({
            address: FfiConverterTypeBitcoinAddressDetails.read(from),
            feeQuote: FfiConverterTypeSendOnchainFeeQuote.read(from)
          });
        case 2:
          return new SendPaymentMethod.Bolt11Invoice({
            invoiceDetails: FfiConverterTypeBolt11InvoiceDetails.read(from),
            sparkTransferFeeSats: FfiConverterOptionalUInt64.read(from),
            lightningFeeSats: _uniffiBindgenReactNative.FfiConverterUInt64.read(from)
          });
        case 3:
          return new SendPaymentMethod.SparkAddress({
            address: FfiConverterString.read(from),
            feeSats: _uniffiBindgenReactNative.FfiConverterUInt64.read(from)
          });
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value.tag) {
        case SendPaymentMethod_Tags.BitcoinAddress:
          {
            ordinalConverter.write(1, into);
            const inner = value.inner;
            FfiConverterTypeBitcoinAddressDetails.write(inner.address, into);
            FfiConverterTypeSendOnchainFeeQuote.write(inner.feeQuote, into);
            return;
          }
        case SendPaymentMethod_Tags.Bolt11Invoice:
          {
            ordinalConverter.write(2, into);
            const inner = value.inner;
            FfiConverterTypeBolt11InvoiceDetails.write(inner.invoiceDetails, into);
            FfiConverterOptionalUInt64.write(inner.sparkTransferFeeSats, into);
            _uniffiBindgenReactNative.FfiConverterUInt64.write(inner.lightningFeeSats, into);
            return;
          }
        case SendPaymentMethod_Tags.SparkAddress:
          {
            ordinalConverter.write(3, into);
            const inner = value.inner;
            FfiConverterString.write(inner.address, into);
            _uniffiBindgenReactNative.FfiConverterUInt64.write(inner.feeSats, into);
            return;
          }
        default:
          // Throwing from here means that SendPaymentMethod_Tags hasn't matched an ordinal.
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value) {
      switch (value.tag) {
        case SendPaymentMethod_Tags.BitcoinAddress:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(1);
            size += FfiConverterTypeBitcoinAddressDetails.allocationSize(inner.address);
            size += FfiConverterTypeSendOnchainFeeQuote.allocationSize(inner.feeQuote);
            return size;
          }
        case SendPaymentMethod_Tags.Bolt11Invoice:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(2);
            size += FfiConverterTypeBolt11InvoiceDetails.allocationSize(inner.invoiceDetails);
            size += FfiConverterOptionalUInt64.allocationSize(inner.sparkTransferFeeSats);
            size += _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(inner.lightningFeeSats);
            return size;
          }
        case SendPaymentMethod_Tags.SparkAddress:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(3);
            size += FfiConverterString.allocationSize(inner.address);
            size += _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(inner.feeSats);
            return size;
          }
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();

// Enum: SendPaymentOptions
let SendPaymentOptions_Tags = exports.SendPaymentOptions_Tags = /*#__PURE__*/function (SendPaymentOptions_Tags) {
  SendPaymentOptions_Tags["BitcoinAddress"] = "BitcoinAddress";
  SendPaymentOptions_Tags["Bolt11Invoice"] = "Bolt11Invoice";
  return SendPaymentOptions_Tags;
}({});
const SendPaymentOptions = exports.SendPaymentOptions = (() => {
  class BitcoinAddress_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SendPaymentOptions';
    tag = SendPaymentOptions_Tags.BitcoinAddress;
    constructor(inner) {
      super('SendPaymentOptions', 'BitcoinAddress');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new BitcoinAddress_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === SendPaymentOptions_Tags.BitcoinAddress;
    }
  }
  class Bolt11Invoice_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SendPaymentOptions';
    tag = SendPaymentOptions_Tags.Bolt11Invoice;
    constructor(inner) {
      super('SendPaymentOptions', 'Bolt11Invoice');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new Bolt11Invoice_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === SendPaymentOptions_Tags.Bolt11Invoice;
    }
  }
  function instanceOf(obj) {
    return obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'SendPaymentOptions';
  }
  return Object.freeze({
    instanceOf,
    BitcoinAddress: BitcoinAddress_,
    Bolt11Invoice: Bolt11Invoice_
  });
})();
// FfiConverter for enum SendPaymentOptions
const FfiConverterTypeSendPaymentOptions = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new SendPaymentOptions.BitcoinAddress({
            confirmationSpeed: FfiConverterTypeOnchainConfirmationSpeed.read(from)
          });
        case 2:
          return new SendPaymentOptions.Bolt11Invoice({
            preferSpark: _uniffiBindgenReactNative.FfiConverterBool.read(from)
          });
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value.tag) {
        case SendPaymentOptions_Tags.BitcoinAddress:
          {
            ordinalConverter.write(1, into);
            const inner = value.inner;
            FfiConverterTypeOnchainConfirmationSpeed.write(inner.confirmationSpeed, into);
            return;
          }
        case SendPaymentOptions_Tags.Bolt11Invoice:
          {
            ordinalConverter.write(2, into);
            const inner = value.inner;
            _uniffiBindgenReactNative.FfiConverterBool.write(inner.preferSpark, into);
            return;
          }
        default:
          // Throwing from here means that SendPaymentOptions_Tags hasn't matched an ordinal.
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value) {
      switch (value.tag) {
        case SendPaymentOptions_Tags.BitcoinAddress:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(1);
            size += FfiConverterTypeOnchainConfirmationSpeed.allocationSize(inner.confirmationSpeed);
            return size;
          }
        case SendPaymentOptions_Tags.Bolt11Invoice:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(2);
            size += _uniffiBindgenReactNative.FfiConverterBool.allocationSize(inner.preferSpark);
            return size;
          }
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();

// Error type: StorageError

// Enum: StorageError
let StorageError_Tags = exports.StorageError_Tags = /*#__PURE__*/function (StorageError_Tags) {
  StorageError_Tags["Implementation"] = "Implementation";
  StorageError_Tags["InitializationError"] = "InitializationError";
  StorageError_Tags["Serialization"] = "Serialization";
  return StorageError_Tags;
}({});
/**
 * Errors that can occur during storage operations
 */
const StorageError = exports.StorageError = (() => {
  class Implementation_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'StorageError';
    tag = StorageError_Tags.Implementation;
    constructor(v0) {
      super('StorageError', 'Implementation');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new Implementation_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === StorageError_Tags.Implementation;
    }
    static hasInner(obj) {
      return Implementation_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  /**
   * Database initialization error
   */
  class InitializationError_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'StorageError';
    tag = StorageError_Tags.InitializationError;
    constructor(v0) {
      super('StorageError', 'InitializationError');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new InitializationError_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === StorageError_Tags.InitializationError;
    }
    static hasInner(obj) {
      return InitializationError_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  class Serialization_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'StorageError';
    tag = StorageError_Tags.Serialization;
    constructor(v0) {
      super('StorageError', 'Serialization');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new Serialization_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === StorageError_Tags.Serialization;
    }
    static hasInner(obj) {
      return Serialization_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  function instanceOf(obj) {
    return obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'StorageError';
  }
  return Object.freeze({
    instanceOf,
    Implementation: Implementation_,
    InitializationError: InitializationError_,
    Serialization: Serialization_
  });
})();

/**
 * Errors that can occur during storage operations
 */

// FfiConverter for enum StorageError
const FfiConverterTypeStorageError = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new StorageError.Implementation(FfiConverterString.read(from));
        case 2:
          return new StorageError.InitializationError(FfiConverterString.read(from));
        case 3:
          return new StorageError.Serialization(FfiConverterString.read(from));
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value.tag) {
        case StorageError_Tags.Implementation:
          {
            ordinalConverter.write(1, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        case StorageError_Tags.InitializationError:
          {
            ordinalConverter.write(2, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        case StorageError_Tags.Serialization:
          {
            ordinalConverter.write(3, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        default:
          // Throwing from here means that StorageError_Tags hasn't matched an ordinal.
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value) {
      switch (value.tag) {
        case StorageError_Tags.Implementation:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(1);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        case StorageError_Tags.InitializationError:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(2);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        case StorageError_Tags.Serialization:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(3);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();

// Enum: UpdateDepositPayload
let UpdateDepositPayload_Tags = exports.UpdateDepositPayload_Tags = /*#__PURE__*/function (UpdateDepositPayload_Tags) {
  UpdateDepositPayload_Tags["ClaimError"] = "ClaimError";
  UpdateDepositPayload_Tags["Refund"] = "Refund";
  return UpdateDepositPayload_Tags;
}({});
const UpdateDepositPayload = exports.UpdateDepositPayload = (() => {
  class ClaimError_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'UpdateDepositPayload';
    tag = UpdateDepositPayload_Tags.ClaimError;
    constructor(inner) {
      super('UpdateDepositPayload', 'ClaimError');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new ClaimError_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === UpdateDepositPayload_Tags.ClaimError;
    }
  }
  class Refund_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'UpdateDepositPayload';
    tag = UpdateDepositPayload_Tags.Refund;
    constructor(inner) {
      super('UpdateDepositPayload', 'Refund');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new Refund_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === UpdateDepositPayload_Tags.Refund;
    }
  }
  function instanceOf(obj) {
    return obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'UpdateDepositPayload';
  }
  return Object.freeze({
    instanceOf,
    ClaimError: ClaimError_,
    Refund: Refund_
  });
})();
// FfiConverter for enum UpdateDepositPayload
const FfiConverterTypeUpdateDepositPayload = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new UpdateDepositPayload.ClaimError({
            error: FfiConverterTypeDepositClaimError.read(from)
          });
        case 2:
          return new UpdateDepositPayload.Refund({
            refundTxid: FfiConverterString.read(from),
            refundTx: FfiConverterString.read(from)
          });
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value.tag) {
        case UpdateDepositPayload_Tags.ClaimError:
          {
            ordinalConverter.write(1, into);
            const inner = value.inner;
            FfiConverterTypeDepositClaimError.write(inner.error, into);
            return;
          }
        case UpdateDepositPayload_Tags.Refund:
          {
            ordinalConverter.write(2, into);
            const inner = value.inner;
            FfiConverterString.write(inner.refundTxid, into);
            FfiConverterString.write(inner.refundTx, into);
            return;
          }
        default:
          // Throwing from here means that UpdateDepositPayload_Tags hasn't matched an ordinal.
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value) {
      switch (value.tag) {
        case UpdateDepositPayload_Tags.ClaimError:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(1);
            size += FfiConverterTypeDepositClaimError.allocationSize(inner.error);
            return size;
          }
        case UpdateDepositPayload_Tags.Refund:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(2);
            size += FfiConverterString.allocationSize(inner.refundTxid);
            size += FfiConverterString.allocationSize(inner.refundTx);
            return size;
          }
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();
class BitcoinChainServiceImpl extends _uniffiBindgenReactNative.UniffiAbstractObject {
  [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'BitcoinChainServiceImpl';
  // No primary constructor declared for this class.
  constructor(pointer) {
    super();
    this[_uniffiBindgenReactNative.pointerLiteralSymbol] = pointer;
    this[_uniffiBindgenReactNative.destructorGuardSymbol] = uniffiTypeBitcoinChainServiceImplObjectFactory.bless(pointer);
  }
  async getAddressUtxos(address, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_bitcoinchainservice_get_address_utxos(uniffiTypeBitcoinChainServiceImplObjectFactory.clonePointer(this), FfiConverterString.lower(address));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterArrayTypeUtxo.lift.bind(FfiConverterArrayTypeUtxo), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeChainServiceError.lift.bind(FfiConverterTypeChainServiceError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }
  async getTransactionHex(txid, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_bitcoinchainservice_get_transaction_hex(uniffiTypeBitcoinChainServiceImplObjectFactory.clonePointer(this), FfiConverterString.lower(txid));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterString.lift.bind(FfiConverterString), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeChainServiceError.lift.bind(FfiConverterTypeChainServiceError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }
  async broadcastTransaction(tx, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_bitcoinchainservice_broadcast_transaction(uniffiTypeBitcoinChainServiceImplObjectFactory.clonePointer(this), FfiConverterString.lower(tx));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_void, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_void, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_void, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_void, /*liftFunc:*/_v => {}, /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeChainServiceError.lift.bind(FfiConverterTypeChainServiceError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy() {
    const ptr = this[_uniffiBindgenReactNative.destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeBitcoinChainServiceImplObjectFactory.pointer(this);
      uniffiTypeBitcoinChainServiceImplObjectFactory.freePointer(pointer);
      uniffiTypeBitcoinChainServiceImplObjectFactory.unbless(ptr);
      delete this[_uniffiBindgenReactNative.destructorGuardSymbol];
    }
  }
  static instanceOf(obj) {
    return uniffiTypeBitcoinChainServiceImplObjectFactory.isConcreteType(obj);
  }
}
exports.BitcoinChainServiceImpl = BitcoinChainServiceImpl;
const uniffiTypeBitcoinChainServiceImplObjectFactory = {
  create(pointer) {
    const instance = Object.create(BitcoinChainServiceImpl.prototype);
    instance[_uniffiBindgenReactNative.pointerLiteralSymbol] = pointer;
    instance[_uniffiBindgenReactNative.destructorGuardSymbol] = this.bless(pointer);
    instance[_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'BitcoinChainServiceImpl';
    return instance;
  },
  bless(p) {
    return uniffiCaller.rustCall(/*caller:*/status => (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_internal_fn_method_bitcoinchainservice_ffi__bless_pointer(p, status), /*liftString:*/FfiConverterString.lift);
  },
  unbless(ptr) {
    ptr.markDestroyed();
  },
  pointer(obj) {
    if (obj[_uniffiBindgenReactNative.destructorGuardSymbol] === undefined) {
      throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedNullPointer();
    }
    return obj[_uniffiBindgenReactNative.pointerLiteralSymbol];
  },
  clonePointer(obj) {
    const pointer = this.pointer(obj);
    return uniffiCaller.rustCall(/*caller:*/callStatus => (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_clone_bitcoinchainservice(pointer, callStatus), /*liftString:*/FfiConverterString.lift);
  },
  freePointer(pointer) {
    uniffiCaller.rustCall(/*caller:*/callStatus => (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_free_bitcoinchainservice(pointer, callStatus), /*liftString:*/FfiConverterString.lift);
  },
  isConcreteType(obj) {
    return obj[_uniffiBindgenReactNative.destructorGuardSymbol] && obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'BitcoinChainServiceImpl';
  }
};
// FfiConverter for BitcoinChainService
const FfiConverterTypeBitcoinChainService = new _uniffiBindgenReactNative.FfiConverterObjectWithCallbacks(uniffiTypeBitcoinChainServiceImplObjectFactory);

// Add a vtavble for the callbacks that go in BitcoinChainService.

// Put the implementation in a struct so we don't pollute the top-level namespace
const uniffiCallbackInterfaceBitcoinChainService = {
  // Create the VTable using a series of closures.
  // ts automatically converts these into C callback functions.
  vtable: {
    getAddressUtxos: (uniffiHandle, address, uniffiFutureCallback, uniffiCallbackData) => {
      const uniffiMakeCall = async signal => {
        const jsCallback = FfiConverterTypeBitcoinChainService.lift(uniffiHandle);
        return await jsCallback.getAddressUtxos(FfiConverterString.lift(address), {
          signal
        });
      };
      const uniffiHandleSuccess = returnValue => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructRustBuffer */{
          returnValue: FfiConverterArrayTypeUtxo.lower(returnValue),
          callStatus: uniffiCaller.createCallStatus()
        });
      };
      const uniffiHandleError = (code, errorBuf) => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructRustBuffer */{
          returnValue: /*empty*/new Uint8Array(0),
          // TODO create callstatus with error.
          callStatus: {
            code,
            errorBuf
          }
        });
      };
      const uniffiForeignFuture = (0, _uniffiBindgenReactNative.uniffiTraitInterfaceCallAsyncWithError)(/*makeCall:*/uniffiMakeCall, /*handleSuccess:*/uniffiHandleSuccess, /*handleError:*/uniffiHandleError, /*isErrorType:*/ChainServiceError.instanceOf, /*lowerError:*/FfiConverterTypeChainServiceError.lower.bind(FfiConverterTypeChainServiceError), /*lowerString:*/FfiConverterString.lower);
      return _uniffiBindgenReactNative.UniffiResult.success(uniffiForeignFuture);
    },
    getTransactionHex: (uniffiHandle, txid, uniffiFutureCallback, uniffiCallbackData) => {
      const uniffiMakeCall = async signal => {
        const jsCallback = FfiConverterTypeBitcoinChainService.lift(uniffiHandle);
        return await jsCallback.getTransactionHex(FfiConverterString.lift(txid), {
          signal
        });
      };
      const uniffiHandleSuccess = returnValue => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructRustBuffer */{
          returnValue: FfiConverterString.lower(returnValue),
          callStatus: uniffiCaller.createCallStatus()
        });
      };
      const uniffiHandleError = (code, errorBuf) => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructRustBuffer */{
          returnValue: /*empty*/new Uint8Array(0),
          // TODO create callstatus with error.
          callStatus: {
            code,
            errorBuf
          }
        });
      };
      const uniffiForeignFuture = (0, _uniffiBindgenReactNative.uniffiTraitInterfaceCallAsyncWithError)(/*makeCall:*/uniffiMakeCall, /*handleSuccess:*/uniffiHandleSuccess, /*handleError:*/uniffiHandleError, /*isErrorType:*/ChainServiceError.instanceOf, /*lowerError:*/FfiConverterTypeChainServiceError.lower.bind(FfiConverterTypeChainServiceError), /*lowerString:*/FfiConverterString.lower);
      return _uniffiBindgenReactNative.UniffiResult.success(uniffiForeignFuture);
    },
    broadcastTransaction: (uniffiHandle, tx, uniffiFutureCallback, uniffiCallbackData) => {
      const uniffiMakeCall = async signal => {
        const jsCallback = FfiConverterTypeBitcoinChainService.lift(uniffiHandle);
        return await jsCallback.broadcastTransaction(FfiConverterString.lift(tx), {
          signal
        });
      };
      const uniffiHandleSuccess = returnValue => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructVoid */{
          callStatus: uniffiCaller.createCallStatus()
        });
      };
      const uniffiHandleError = (code, errorBuf) => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructVoid */{
          // TODO create callstatus with error.
          callStatus: {
            code,
            errorBuf
          }
        });
      };
      const uniffiForeignFuture = (0, _uniffiBindgenReactNative.uniffiTraitInterfaceCallAsyncWithError)(/*makeCall:*/uniffiMakeCall, /*handleSuccess:*/uniffiHandleSuccess, /*handleError:*/uniffiHandleError, /*isErrorType:*/ChainServiceError.instanceOf, /*lowerError:*/FfiConverterTypeChainServiceError.lower.bind(FfiConverterTypeChainServiceError), /*lowerString:*/FfiConverterString.lower);
      return _uniffiBindgenReactNative.UniffiResult.success(uniffiForeignFuture);
    },
    uniffiFree: uniffiHandle => {
      // BitcoinChainService: this will throw a stale handle error if the handle isn't found.
      FfiConverterTypeBitcoinChainService.drop(uniffiHandle);
    }
  },
  register: () => {
    (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_init_callback_vtable_bitcoinchainservice(uniffiCallbackInterfaceBitcoinChainService.vtable);
  }
};

/**
 * `BreezSDK` is a wrapper around `SparkSDK` that provides a more structured API
 * with request/response objects and comprehensive error handling.
 */

/**
 * `BreezSDK` is a wrapper around `SparkSDK` that provides a more structured API
 * with request/response objects and comprehensive error handling.
 */
class BreezSdk extends _uniffiBindgenReactNative.UniffiAbstractObject {
  [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'BreezSdk';
  // No primary constructor declared for this class.
  constructor(pointer) {
    super();
    this[_uniffiBindgenReactNative.pointerLiteralSymbol] = pointer;
    this[_uniffiBindgenReactNative.destructorGuardSymbol] = uniffiTypeBreezSdkObjectFactory.bless(pointer);
  }

  /**
   * Registers a listener to receive SDK events
   *
   * # Arguments
   *
   * * `listener` - An implementation of the `EventListener` trait
   *
   * # Returns
   *
   * A unique identifier for the listener, which can be used to remove it later
   */
  addEventListener(listener) {
    return FfiConverterString.lift(uniffiCaller.rustCall(/*caller:*/callStatus => {
      return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_add_event_listener(uniffiTypeBreezSdkObjectFactory.clonePointer(this), FfiConverterTypeEventListener.lower(listener), callStatus);
    }, /*liftString:*/FfiConverterString.lift));
  }
  async checkLightningAddressAvailable(req, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_check_lightning_address_available(uniffiTypeBreezSdkObjectFactory.clonePointer(this), FfiConverterTypeCheckLightningAddressRequest.lower(req));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_i8, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_i8, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_i8, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_i8, /*liftFunc:*/_uniffiBindgenReactNative.FfiConverterBool.lift.bind(_uniffiBindgenReactNative.FfiConverterBool), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }
  async claimDeposit(request, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_claim_deposit(uniffiTypeBreezSdkObjectFactory.clonePointer(this), FfiConverterTypeClaimDepositRequest.lower(request));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterTypeClaimDepositResponse.lift.bind(FfiConverterTypeClaimDepositResponse), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }
  async deleteLightningAddress(asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_delete_lightning_address(uniffiTypeBreezSdkObjectFactory.clonePointer(this));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_void, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_void, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_void, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_void, /*liftFunc:*/_v => {}, /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * Stops the SDK's background tasks
   *
   * This method stops the background tasks started by the `start()` method.
   * It should be called before your application terminates to ensure proper cleanup.
   *
   * # Returns
   *
   * Result containing either success or an `SdkError` if the background task couldn't be stopped
   */
  disconnect() /*throws*/{
    uniffiCaller.rustCallWithError(/*liftError:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError), /*caller:*/callStatus => {
      (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_disconnect(uniffiTypeBreezSdkObjectFactory.clonePointer(this), callStatus);
    }, /*liftString:*/FfiConverterString.lift);
  }

  /**
   * Returns the balance of the wallet in satoshis
   */
  async getInfo(request, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_get_info(uniffiTypeBreezSdkObjectFactory.clonePointer(this), FfiConverterTypeGetInfoRequest.lower(request));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterTypeGetInfoResponse.lift.bind(FfiConverterTypeGetInfoResponse), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }
  async getLightningAddress(asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_get_lightning_address(uniffiTypeBreezSdkObjectFactory.clonePointer(this));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterOptionalTypeLightningAddressInfo.lift.bind(FfiConverterOptionalTypeLightningAddressInfo), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }
  async getPayment(request, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_get_payment(uniffiTypeBreezSdkObjectFactory.clonePointer(this), FfiConverterTypeGetPaymentRequest.lower(request));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterTypeGetPaymentResponse.lift.bind(FfiConverterTypeGetPaymentResponse), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * List fiat currencies for which there is a known exchange rate,
   * sorted by the canonical name of the currency.
   */
  async listFiatCurrencies(asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_list_fiat_currencies(uniffiTypeBreezSdkObjectFactory.clonePointer(this));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterTypeListFiatCurrenciesResponse.lift.bind(FfiConverterTypeListFiatCurrenciesResponse), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * List the latest rates of fiat currencies, sorted by name.
   */
  async listFiatRates(asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_list_fiat_rates(uniffiTypeBreezSdkObjectFactory.clonePointer(this));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterTypeListFiatRatesResponse.lift.bind(FfiConverterTypeListFiatRatesResponse), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
     * Lists payments from the storage with pagination
     *
     * This method provides direct access to the payment history stored in the database.
     * It returns payments in reverse chronological order (newest first).
     *
     * # Arguments
     *
     * * `request` - Contains pagination parameters (offset and limit)
     *
     * # Returns
     *
     * * `Ok(ListPaymentsResponse)` - Contains the list of payments if successful
     * * `Err(SdkError)` - If there was an error accessing the storage
      */
  async listPayments(request, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_list_payments(uniffiTypeBreezSdkObjectFactory.clonePointer(this), FfiConverterTypeListPaymentsRequest.lower(request));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterTypeListPaymentsResponse.lift.bind(FfiConverterTypeListPaymentsResponse), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }
  async listUnclaimedDeposits(request, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_list_unclaimed_deposits(uniffiTypeBreezSdkObjectFactory.clonePointer(this), FfiConverterTypeListUnclaimedDepositsRequest.lower(request));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterTypeListUnclaimedDepositsResponse.lift.bind(FfiConverterTypeListUnclaimedDepositsResponse), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }
  async lnurlPay(request, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_lnurl_pay(uniffiTypeBreezSdkObjectFactory.clonePointer(this), FfiConverterTypeLnurlPayRequest.lower(request));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterTypeLnurlPayResponse.lift.bind(FfiConverterTypeLnurlPayResponse), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }
  pollLightningSendPayment(payment, sspId) {
    uniffiCaller.rustCall(/*caller:*/callStatus => {
      (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_poll_lightning_send_payment(uniffiTypeBreezSdkObjectFactory.clonePointer(this), FfiConverterTypePayment.lower(payment), FfiConverterString.lower(sspId), callStatus);
    }, /*liftString:*/FfiConverterString.lift);
  }
  async prepareLnurlPay(request, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_prepare_lnurl_pay(uniffiTypeBreezSdkObjectFactory.clonePointer(this), FfiConverterTypePrepareLnurlPayRequest.lower(request));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterTypePrepareLnurlPayResponse.lift.bind(FfiConverterTypePrepareLnurlPayResponse), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }
  async prepareSendPayment(request, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_prepare_send_payment(uniffiTypeBreezSdkObjectFactory.clonePointer(this), FfiConverterTypePrepareSendPaymentRequest.lower(request));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterTypePrepareSendPaymentResponse.lift.bind(FfiConverterTypePrepareSendPaymentResponse), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }
  async receivePayment(request, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_receive_payment(uniffiTypeBreezSdkObjectFactory.clonePointer(this), FfiConverterTypeReceivePaymentRequest.lower(request));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterTypeReceivePaymentResponse.lift.bind(FfiConverterTypeReceivePaymentResponse), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * Attempts to recover a lightning address from the lnurl server.
   */
  async recoverLightningAddress(asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_recover_lightning_address(uniffiTypeBreezSdkObjectFactory.clonePointer(this));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterOptionalTypeLightningAddressInfo.lift.bind(FfiConverterOptionalTypeLightningAddressInfo), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }
  async refundDeposit(request, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_refund_deposit(uniffiTypeBreezSdkObjectFactory.clonePointer(this), FfiConverterTypeRefundDepositRequest.lower(request));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterTypeRefundDepositResponse.lift.bind(FfiConverterTypeRefundDepositResponse), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }
  async registerLightningAddress(request, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_register_lightning_address(uniffiTypeBreezSdkObjectFactory.clonePointer(this), FfiConverterTypeRegisterLightningAddressRequest.lower(request));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterTypeLightningAddressInfo.lift.bind(FfiConverterTypeLightningAddressInfo), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * Removes a previously registered event listener
   *
   * # Arguments
   *
   * * `id` - The listener ID returned from `add_event_listener`
   *
   * # Returns
   *
   * `true` if the listener was found and removed, `false` otherwise
   */
  removeEventListener(id) {
    return _uniffiBindgenReactNative.FfiConverterBool.lift(uniffiCaller.rustCall(/*caller:*/callStatus => {
      return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_remove_event_listener(uniffiTypeBreezSdkObjectFactory.clonePointer(this), FfiConverterString.lower(id), callStatus);
    }, /*liftString:*/FfiConverterString.lift));
  }
  async sendPayment(request, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_send_payment(uniffiTypeBreezSdkObjectFactory.clonePointer(this), FfiConverterTypeSendPaymentRequest.lower(request));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterTypeSendPaymentResponse.lift.bind(FfiConverterTypeSendPaymentResponse), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }
  async sendPaymentInternal(request, suppressPaymentEvent, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_send_payment_internal(uniffiTypeBreezSdkObjectFactory.clonePointer(this), FfiConverterTypeSendPaymentRequest.lower(request), _uniffiBindgenReactNative.FfiConverterBool.lower(suppressPaymentEvent));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterTypeSendPaymentResponse.lift.bind(FfiConverterTypeSendPaymentResponse), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * Synchronizes the wallet with the Spark network
   */
  syncWallet(request) /*throws*/{
    return FfiConverterTypeSyncWalletResponse.lift(uniffiCaller.rustCallWithError(/*liftError:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError), /*caller:*/callStatus => {
      return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_breezsdk_sync_wallet(uniffiTypeBreezSdkObjectFactory.clonePointer(this), FfiConverterTypeSyncWalletRequest.lower(request), callStatus);
    }, /*liftString:*/FfiConverterString.lift));
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy() {
    const ptr = this[_uniffiBindgenReactNative.destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeBreezSdkObjectFactory.pointer(this);
      uniffiTypeBreezSdkObjectFactory.freePointer(pointer);
      uniffiTypeBreezSdkObjectFactory.unbless(ptr);
      delete this[_uniffiBindgenReactNative.destructorGuardSymbol];
    }
  }
  static instanceOf(obj) {
    return uniffiTypeBreezSdkObjectFactory.isConcreteType(obj);
  }
}
exports.BreezSdk = BreezSdk;
const uniffiTypeBreezSdkObjectFactory = {
  create(pointer) {
    const instance = Object.create(BreezSdk.prototype);
    instance[_uniffiBindgenReactNative.pointerLiteralSymbol] = pointer;
    instance[_uniffiBindgenReactNative.destructorGuardSymbol] = this.bless(pointer);
    instance[_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'BreezSdk';
    return instance;
  },
  bless(p) {
    return uniffiCaller.rustCall(/*caller:*/status => (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_internal_fn_method_breezsdk_ffi__bless_pointer(p, status), /*liftString:*/FfiConverterString.lift);
  },
  unbless(ptr) {
    ptr.markDestroyed();
  },
  pointer(obj) {
    if (obj[_uniffiBindgenReactNative.destructorGuardSymbol] === undefined) {
      throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedNullPointer();
    }
    return obj[_uniffiBindgenReactNative.pointerLiteralSymbol];
  },
  clonePointer(obj) {
    const pointer = this.pointer(obj);
    return uniffiCaller.rustCall(/*caller:*/callStatus => (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_clone_breezsdk(pointer, callStatus), /*liftString:*/FfiConverterString.lift);
  },
  freePointer(pointer) {
    uniffiCaller.rustCall(/*caller:*/callStatus => (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_free_breezsdk(pointer, callStatus), /*liftString:*/FfiConverterString.lift);
  },
  isConcreteType(obj) {
    return obj[_uniffiBindgenReactNative.destructorGuardSymbol] && obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'BreezSdk';
  }
};
// FfiConverter for BreezSdkInterface
const FfiConverterTypeBreezSdk = new _uniffiBindgenReactNative.FfiConverterObject(uniffiTypeBreezSdkObjectFactory);

/**
 * Builder for creating `BreezSdk` instances with customizable components.
 */

/**
 * Builder for creating `BreezSdk` instances with customizable components.
 */
class SdkBuilder extends _uniffiBindgenReactNative.UniffiAbstractObject {
  [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SdkBuilder';
  /**
   * Creates a new `SdkBuilder` with the provided configuration.
   * Arguments:
   * - `config`: The configuration to be used.
   * - `seed`: The seed for wallet generation.
   * - `storage`: The storage backend to be used.
   */
  constructor(config, seed, storage) {
    super();
    const pointer = uniffiCaller.rustCall(/*caller:*/callStatus => {
      return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_constructor_sdkbuilder_new(FfiConverterTypeConfig.lower(config), FfiConverterTypeSeed.lower(seed), FfiConverterTypeStorage.lower(storage), callStatus);
    }, /*liftString:*/FfiConverterString.lift);
    this[_uniffiBindgenReactNative.pointerLiteralSymbol] = pointer;
    this[_uniffiBindgenReactNative.destructorGuardSymbol] = uniffiTypeSdkBuilderObjectFactory.bless(pointer);
  }

  /**
   * Builds the `BreezSdk` instance with the configured components.
   */
  async build(asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_sdkbuilder_build(uniffiTypeSdkBuilderObjectFactory.clonePointer(this));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_pointer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_pointer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_pointer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_pointer, /*liftFunc:*/FfiConverterTypeBreezSdk.lift.bind(FfiConverterTypeBreezSdk), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeSdkError.lift.bind(FfiConverterTypeSdkError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * Sets the chain service to be used by the SDK.
   * Arguments:
   * - `chain_service`: The chain service to be used.
   */
  async withChainService(chainService, asyncOpts_) {
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_sdkbuilder_with_chain_service(uniffiTypeSdkBuilderObjectFactory.clonePointer(this), FfiConverterTypeBitcoinChainService.lower(chainService));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_void, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_void, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_void, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_void, /*liftFunc:*/_v => {}, /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_);
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * Sets the fiat service to be used by the SDK.
   * Arguments:
   * - `fiat_service`: The fiat service to be used.
   */
  async withFiatService(fiatService, asyncOpts_) {
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_sdkbuilder_with_fiat_service(uniffiTypeSdkBuilderObjectFactory.clonePointer(this), FfiConverterTypeFiatService.lower(fiatService));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_void, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_void, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_void, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_void, /*liftFunc:*/_v => {}, /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_);
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * Sets the key set type to be used by the SDK.
   * Arguments:
   * - `key_set_type`: The key set type which determines the derivation path.
   * - `use_address_index`: Controls the structure of the BIP derivation path.
   */
  async withKeySet(keySetType, useAddressIndex, asyncOpts_) {
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_sdkbuilder_with_key_set(uniffiTypeSdkBuilderObjectFactory.clonePointer(this), FfiConverterTypeKeySetType.lower(keySetType), _uniffiBindgenReactNative.FfiConverterBool.lower(useAddressIndex));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_void, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_void, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_void, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_void, /*liftFunc:*/_v => {}, /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_);
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }
  async withLnurlClient(lnurlClient, asyncOpts_) {
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_sdkbuilder_with_lnurl_client(uniffiTypeSdkBuilderObjectFactory.clonePointer(this), FfiConverterTypeRestClient.lower(lnurlClient));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_void, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_void, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_void, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_void, /*liftFunc:*/_v => {}, /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_);
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * Sets the REST chain service to be used by the SDK.
   * Arguments:
   * - `url`: The base URL of the REST API.
   * - `credentials`: Optional credentials for basic authentication.
   */
  async withRestChainService(url, credentials, asyncOpts_) {
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_sdkbuilder_with_rest_chain_service(uniffiTypeSdkBuilderObjectFactory.clonePointer(this), FfiConverterString.lower(url), FfiConverterOptionalTypeCredentials.lower(credentials));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_void, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_void, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_void, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_void, /*liftFunc:*/_v => {}, /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_);
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy() {
    const ptr = this[_uniffiBindgenReactNative.destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeSdkBuilderObjectFactory.pointer(this);
      uniffiTypeSdkBuilderObjectFactory.freePointer(pointer);
      uniffiTypeSdkBuilderObjectFactory.unbless(ptr);
      delete this[_uniffiBindgenReactNative.destructorGuardSymbol];
    }
  }
  static instanceOf(obj) {
    return uniffiTypeSdkBuilderObjectFactory.isConcreteType(obj);
  }
}
exports.SdkBuilder = SdkBuilder;
const uniffiTypeSdkBuilderObjectFactory = {
  create(pointer) {
    const instance = Object.create(SdkBuilder.prototype);
    instance[_uniffiBindgenReactNative.pointerLiteralSymbol] = pointer;
    instance[_uniffiBindgenReactNative.destructorGuardSymbol] = this.bless(pointer);
    instance[_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SdkBuilder';
    return instance;
  },
  bless(p) {
    return uniffiCaller.rustCall(/*caller:*/status => (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_internal_fn_method_sdkbuilder_ffi__bless_pointer(p, status), /*liftString:*/FfiConverterString.lift);
  },
  unbless(ptr) {
    ptr.markDestroyed();
  },
  pointer(obj) {
    if (obj[_uniffiBindgenReactNative.destructorGuardSymbol] === undefined) {
      throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedNullPointer();
    }
    return obj[_uniffiBindgenReactNative.pointerLiteralSymbol];
  },
  clonePointer(obj) {
    const pointer = this.pointer(obj);
    return uniffiCaller.rustCall(/*caller:*/callStatus => (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_clone_sdkbuilder(pointer, callStatus), /*liftString:*/FfiConverterString.lift);
  },
  freePointer(pointer) {
    uniffiCaller.rustCall(/*caller:*/callStatus => (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_free_sdkbuilder(pointer, callStatus), /*liftString:*/FfiConverterString.lift);
  },
  isConcreteType(obj) {
    return obj[_uniffiBindgenReactNative.destructorGuardSymbol] && obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'SdkBuilder';
  }
};
// FfiConverter for SdkBuilderInterface
const FfiConverterTypeSdkBuilder = new _uniffiBindgenReactNative.FfiConverterObject(uniffiTypeSdkBuilderObjectFactory);

/**
 * Trait for persistent storage
 */

/**
 * Trait for persistent storage
 */
class StorageImpl extends _uniffiBindgenReactNative.UniffiAbstractObject {
  [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'StorageImpl';
  // No primary constructor declared for this class.
  constructor(pointer) {
    super();
    this[_uniffiBindgenReactNative.pointerLiteralSymbol] = pointer;
    this[_uniffiBindgenReactNative.destructorGuardSymbol] = uniffiTypeStorageImplObjectFactory.bless(pointer);
  }
  async deleteCachedItem(key, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_storage_delete_cached_item(uniffiTypeStorageImplObjectFactory.clonePointer(this), FfiConverterString.lower(key));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_void, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_void, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_void, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_void, /*liftFunc:*/_v => {}, /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeStorageError.lift.bind(FfiConverterTypeStorageError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }
  async getCachedItem(key, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_storage_get_cached_item(uniffiTypeStorageImplObjectFactory.clonePointer(this), FfiConverterString.lower(key));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterOptionalString.lift.bind(FfiConverterOptionalString), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeStorageError.lift.bind(FfiConverterTypeStorageError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }
  async setCachedItem(key, value, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_storage_set_cached_item(uniffiTypeStorageImplObjectFactory.clonePointer(this), FfiConverterString.lower(key), FfiConverterString.lower(value));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_void, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_void, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_void, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_void, /*liftFunc:*/_v => {}, /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeStorageError.lift.bind(FfiConverterTypeStorageError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * Lists payments with pagination
   *
   * # Arguments
   *
   * * `offset` - Number of records to skip
   * * `limit` - Maximum number of records to return
   *
   * # Returns
   *
   * A vector of payments or a `StorageError`
   */
  async listPayments(offset, limit, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_storage_list_payments(uniffiTypeStorageImplObjectFactory.clonePointer(this), FfiConverterOptionalUInt32.lower(offset), FfiConverterOptionalUInt32.lower(limit));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterArrayTypePayment.lift.bind(FfiConverterArrayTypePayment), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeStorageError.lift.bind(FfiConverterTypeStorageError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * Inserts a payment into storage
   *
   * # Arguments
   *
   * * `payment` - The payment to insert
   *
   * # Returns
   *
   * Success or a `StorageError`
   */
  async insertPayment(payment, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_storage_insert_payment(uniffiTypeStorageImplObjectFactory.clonePointer(this), FfiConverterTypePayment.lower(payment));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_void, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_void, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_void, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_void, /*liftFunc:*/_v => {}, /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeStorageError.lift.bind(FfiConverterTypeStorageError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * Inserts payment metadata into storage
   *
   * # Arguments
   *
   * * `payment_id` - The ID of the payment
   * * `metadata` - The metadata to insert
   *
   * # Returns
   *
   * Success or a `StorageError`
   */
  async setPaymentMetadata(paymentId, metadata, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_storage_set_payment_metadata(uniffiTypeStorageImplObjectFactory.clonePointer(this), FfiConverterString.lower(paymentId), FfiConverterTypePaymentMetadata.lower(metadata));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_void, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_void, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_void, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_void, /*liftFunc:*/_v => {}, /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeStorageError.lift.bind(FfiConverterTypeStorageError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * Gets a payment by its ID
   * # Arguments
   *
   * * `id` - The ID of the payment to retrieve
   *
   * # Returns
   *
   * The payment if found or None if not found
   */
  async getPaymentById(id, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_storage_get_payment_by_id(uniffiTypeStorageImplObjectFactory.clonePointer(this), FfiConverterString.lower(id));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterTypePayment.lift.bind(FfiConverterTypePayment), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeStorageError.lift.bind(FfiConverterTypeStorageError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * Add a deposit to storage
   * # Arguments
   *
   * * `txid` - The transaction ID of the deposit
   * * `vout` - The output index of the deposit
   * * `amount_sats` - The amount of the deposit in sats
   *
   * # Returns
   *
   * Success or a `StorageError`
   */
  async addDeposit(txid, vout, amountSats, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_storage_add_deposit(uniffiTypeStorageImplObjectFactory.clonePointer(this), FfiConverterString.lower(txid), _uniffiBindgenReactNative.FfiConverterUInt32.lower(vout), _uniffiBindgenReactNative.FfiConverterUInt64.lower(amountSats));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_void, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_void, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_void, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_void, /*liftFunc:*/_v => {}, /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeStorageError.lift.bind(FfiConverterTypeStorageError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * Removes an unclaimed deposit from storage
   * # Arguments
   *
   * * `txid` - The transaction ID of the deposit
   * * `vout` - The output index of the deposit
   *
   * # Returns
   *
   * Success or a `StorageError`
   */
  async deleteDeposit(txid, vout, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_storage_delete_deposit(uniffiTypeStorageImplObjectFactory.clonePointer(this), FfiConverterString.lower(txid), _uniffiBindgenReactNative.FfiConverterUInt32.lower(vout));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_void, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_void, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_void, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_void, /*liftFunc:*/_v => {}, /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeStorageError.lift.bind(FfiConverterTypeStorageError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * Lists all unclaimed deposits from storage
   * # Returns
   *
   * A vector of `DepositInfo` or a `StorageError`
   */
  async listDeposits(asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_storage_list_deposits(uniffiTypeStorageImplObjectFactory.clonePointer(this));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterArrayTypeDepositInfo.lift.bind(FfiConverterArrayTypeDepositInfo), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeStorageError.lift.bind(FfiConverterTypeStorageError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * Updates or inserts unclaimed deposit details
   * # Arguments
   *
   * * `txid` - The transaction ID of the deposit
   * * `vout` - The output index of the deposit
   * * `payload` - The payload for the update
   *
   * # Returns
   *
   * Success or a `StorageError`
   */
  async updateDeposit(txid, vout, payload, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_method_storage_update_deposit(uniffiTypeStorageImplObjectFactory.clonePointer(this), FfiConverterString.lower(txid), _uniffiBindgenReactNative.FfiConverterUInt32.lower(vout), FfiConverterTypeUpdateDepositPayload.lower(payload));
      }, /*pollFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_poll_void, /*cancelFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_cancel_void, /*completeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_complete_void, /*freeFunc:*/(0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_rust_future_free_void, /*liftFunc:*/_v => {}, /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeStorageError.lift.bind(FfiConverterTypeStorageError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy() {
    const ptr = this[_uniffiBindgenReactNative.destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeStorageImplObjectFactory.pointer(this);
      uniffiTypeStorageImplObjectFactory.freePointer(pointer);
      uniffiTypeStorageImplObjectFactory.unbless(ptr);
      delete this[_uniffiBindgenReactNative.destructorGuardSymbol];
    }
  }
  static instanceOf(obj) {
    return uniffiTypeStorageImplObjectFactory.isConcreteType(obj);
  }
}
exports.StorageImpl = StorageImpl;
const uniffiTypeStorageImplObjectFactory = {
  create(pointer) {
    const instance = Object.create(StorageImpl.prototype);
    instance[_uniffiBindgenReactNative.pointerLiteralSymbol] = pointer;
    instance[_uniffiBindgenReactNative.destructorGuardSymbol] = this.bless(pointer);
    instance[_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'StorageImpl';
    return instance;
  },
  bless(p) {
    return uniffiCaller.rustCall(/*caller:*/status => (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_internal_fn_method_storage_ffi__bless_pointer(p, status), /*liftString:*/FfiConverterString.lift);
  },
  unbless(ptr) {
    ptr.markDestroyed();
  },
  pointer(obj) {
    if (obj[_uniffiBindgenReactNative.destructorGuardSymbol] === undefined) {
      throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedNullPointer();
    }
    return obj[_uniffiBindgenReactNative.pointerLiteralSymbol];
  },
  clonePointer(obj) {
    const pointer = this.pointer(obj);
    return uniffiCaller.rustCall(/*caller:*/callStatus => (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_clone_storage(pointer, callStatus), /*liftString:*/FfiConverterString.lift);
  },
  freePointer(pointer) {
    uniffiCaller.rustCall(/*caller:*/callStatus => (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_free_storage(pointer, callStatus), /*liftString:*/FfiConverterString.lift);
  },
  isConcreteType(obj) {
    return obj[_uniffiBindgenReactNative.destructorGuardSymbol] && obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'StorageImpl';
  }
};
// FfiConverter for Storage
const FfiConverterTypeStorage = new _uniffiBindgenReactNative.FfiConverterObjectWithCallbacks(uniffiTypeStorageImplObjectFactory);

// Add a vtavble for the callbacks that go in Storage.

// Put the implementation in a struct so we don't pollute the top-level namespace
const uniffiCallbackInterfaceStorage = {
  // Create the VTable using a series of closures.
  // ts automatically converts these into C callback functions.
  vtable: {
    deleteCachedItem: (uniffiHandle, key, uniffiFutureCallback, uniffiCallbackData) => {
      const uniffiMakeCall = async signal => {
        const jsCallback = FfiConverterTypeStorage.lift(uniffiHandle);
        return await jsCallback.deleteCachedItem(FfiConverterString.lift(key), {
          signal
        });
      };
      const uniffiHandleSuccess = returnValue => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructVoid */{
          callStatus: uniffiCaller.createCallStatus()
        });
      };
      const uniffiHandleError = (code, errorBuf) => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructVoid */{
          // TODO create callstatus with error.
          callStatus: {
            code,
            errorBuf
          }
        });
      };
      const uniffiForeignFuture = (0, _uniffiBindgenReactNative.uniffiTraitInterfaceCallAsyncWithError)(/*makeCall:*/uniffiMakeCall, /*handleSuccess:*/uniffiHandleSuccess, /*handleError:*/uniffiHandleError, /*isErrorType:*/StorageError.instanceOf, /*lowerError:*/FfiConverterTypeStorageError.lower.bind(FfiConverterTypeStorageError), /*lowerString:*/FfiConverterString.lower);
      return _uniffiBindgenReactNative.UniffiResult.success(uniffiForeignFuture);
    },
    getCachedItem: (uniffiHandle, key, uniffiFutureCallback, uniffiCallbackData) => {
      const uniffiMakeCall = async signal => {
        const jsCallback = FfiConverterTypeStorage.lift(uniffiHandle);
        return await jsCallback.getCachedItem(FfiConverterString.lift(key), {
          signal
        });
      };
      const uniffiHandleSuccess = returnValue => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructRustBuffer */{
          returnValue: FfiConverterOptionalString.lower(returnValue),
          callStatus: uniffiCaller.createCallStatus()
        });
      };
      const uniffiHandleError = (code, errorBuf) => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructRustBuffer */{
          returnValue: /*empty*/new Uint8Array(0),
          // TODO create callstatus with error.
          callStatus: {
            code,
            errorBuf
          }
        });
      };
      const uniffiForeignFuture = (0, _uniffiBindgenReactNative.uniffiTraitInterfaceCallAsyncWithError)(/*makeCall:*/uniffiMakeCall, /*handleSuccess:*/uniffiHandleSuccess, /*handleError:*/uniffiHandleError, /*isErrorType:*/StorageError.instanceOf, /*lowerError:*/FfiConverterTypeStorageError.lower.bind(FfiConverterTypeStorageError), /*lowerString:*/FfiConverterString.lower);
      return _uniffiBindgenReactNative.UniffiResult.success(uniffiForeignFuture);
    },
    setCachedItem: (uniffiHandle, key, value, uniffiFutureCallback, uniffiCallbackData) => {
      const uniffiMakeCall = async signal => {
        const jsCallback = FfiConverterTypeStorage.lift(uniffiHandle);
        return await jsCallback.setCachedItem(FfiConverterString.lift(key), FfiConverterString.lift(value), {
          signal
        });
      };
      const uniffiHandleSuccess = returnValue => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructVoid */{
          callStatus: uniffiCaller.createCallStatus()
        });
      };
      const uniffiHandleError = (code, errorBuf) => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructVoid */{
          // TODO create callstatus with error.
          callStatus: {
            code,
            errorBuf
          }
        });
      };
      const uniffiForeignFuture = (0, _uniffiBindgenReactNative.uniffiTraitInterfaceCallAsyncWithError)(/*makeCall:*/uniffiMakeCall, /*handleSuccess:*/uniffiHandleSuccess, /*handleError:*/uniffiHandleError, /*isErrorType:*/StorageError.instanceOf, /*lowerError:*/FfiConverterTypeStorageError.lower.bind(FfiConverterTypeStorageError), /*lowerString:*/FfiConverterString.lower);
      return _uniffiBindgenReactNative.UniffiResult.success(uniffiForeignFuture);
    },
    listPayments: (uniffiHandle, offset, limit, uniffiFutureCallback, uniffiCallbackData) => {
      const uniffiMakeCall = async signal => {
        const jsCallback = FfiConverterTypeStorage.lift(uniffiHandle);
        return await jsCallback.listPayments(FfiConverterOptionalUInt32.lift(offset), FfiConverterOptionalUInt32.lift(limit), {
          signal
        });
      };
      const uniffiHandleSuccess = returnValue => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructRustBuffer */{
          returnValue: FfiConverterArrayTypePayment.lower(returnValue),
          callStatus: uniffiCaller.createCallStatus()
        });
      };
      const uniffiHandleError = (code, errorBuf) => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructRustBuffer */{
          returnValue: /*empty*/new Uint8Array(0),
          // TODO create callstatus with error.
          callStatus: {
            code,
            errorBuf
          }
        });
      };
      const uniffiForeignFuture = (0, _uniffiBindgenReactNative.uniffiTraitInterfaceCallAsyncWithError)(/*makeCall:*/uniffiMakeCall, /*handleSuccess:*/uniffiHandleSuccess, /*handleError:*/uniffiHandleError, /*isErrorType:*/StorageError.instanceOf, /*lowerError:*/FfiConverterTypeStorageError.lower.bind(FfiConverterTypeStorageError), /*lowerString:*/FfiConverterString.lower);
      return _uniffiBindgenReactNative.UniffiResult.success(uniffiForeignFuture);
    },
    insertPayment: (uniffiHandle, payment, uniffiFutureCallback, uniffiCallbackData) => {
      const uniffiMakeCall = async signal => {
        const jsCallback = FfiConverterTypeStorage.lift(uniffiHandle);
        return await jsCallback.insertPayment(FfiConverterTypePayment.lift(payment), {
          signal
        });
      };
      const uniffiHandleSuccess = returnValue => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructVoid */{
          callStatus: uniffiCaller.createCallStatus()
        });
      };
      const uniffiHandleError = (code, errorBuf) => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructVoid */{
          // TODO create callstatus with error.
          callStatus: {
            code,
            errorBuf
          }
        });
      };
      const uniffiForeignFuture = (0, _uniffiBindgenReactNative.uniffiTraitInterfaceCallAsyncWithError)(/*makeCall:*/uniffiMakeCall, /*handleSuccess:*/uniffiHandleSuccess, /*handleError:*/uniffiHandleError, /*isErrorType:*/StorageError.instanceOf, /*lowerError:*/FfiConverterTypeStorageError.lower.bind(FfiConverterTypeStorageError), /*lowerString:*/FfiConverterString.lower);
      return _uniffiBindgenReactNative.UniffiResult.success(uniffiForeignFuture);
    },
    setPaymentMetadata: (uniffiHandle, paymentId, metadata, uniffiFutureCallback, uniffiCallbackData) => {
      const uniffiMakeCall = async signal => {
        const jsCallback = FfiConverterTypeStorage.lift(uniffiHandle);
        return await jsCallback.setPaymentMetadata(FfiConverterString.lift(paymentId), FfiConverterTypePaymentMetadata.lift(metadata), {
          signal
        });
      };
      const uniffiHandleSuccess = returnValue => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructVoid */{
          callStatus: uniffiCaller.createCallStatus()
        });
      };
      const uniffiHandleError = (code, errorBuf) => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructVoid */{
          // TODO create callstatus with error.
          callStatus: {
            code,
            errorBuf
          }
        });
      };
      const uniffiForeignFuture = (0, _uniffiBindgenReactNative.uniffiTraitInterfaceCallAsyncWithError)(/*makeCall:*/uniffiMakeCall, /*handleSuccess:*/uniffiHandleSuccess, /*handleError:*/uniffiHandleError, /*isErrorType:*/StorageError.instanceOf, /*lowerError:*/FfiConverterTypeStorageError.lower.bind(FfiConverterTypeStorageError), /*lowerString:*/FfiConverterString.lower);
      return _uniffiBindgenReactNative.UniffiResult.success(uniffiForeignFuture);
    },
    getPaymentById: (uniffiHandle, id, uniffiFutureCallback, uniffiCallbackData) => {
      const uniffiMakeCall = async signal => {
        const jsCallback = FfiConverterTypeStorage.lift(uniffiHandle);
        return await jsCallback.getPaymentById(FfiConverterString.lift(id), {
          signal
        });
      };
      const uniffiHandleSuccess = returnValue => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructRustBuffer */{
          returnValue: FfiConverterTypePayment.lower(returnValue),
          callStatus: uniffiCaller.createCallStatus()
        });
      };
      const uniffiHandleError = (code, errorBuf) => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructRustBuffer */{
          returnValue: /*empty*/new Uint8Array(0),
          // TODO create callstatus with error.
          callStatus: {
            code,
            errorBuf
          }
        });
      };
      const uniffiForeignFuture = (0, _uniffiBindgenReactNative.uniffiTraitInterfaceCallAsyncWithError)(/*makeCall:*/uniffiMakeCall, /*handleSuccess:*/uniffiHandleSuccess, /*handleError:*/uniffiHandleError, /*isErrorType:*/StorageError.instanceOf, /*lowerError:*/FfiConverterTypeStorageError.lower.bind(FfiConverterTypeStorageError), /*lowerString:*/FfiConverterString.lower);
      return _uniffiBindgenReactNative.UniffiResult.success(uniffiForeignFuture);
    },
    addDeposit: (uniffiHandle, txid, vout, amountSats, uniffiFutureCallback, uniffiCallbackData) => {
      const uniffiMakeCall = async signal => {
        const jsCallback = FfiConverterTypeStorage.lift(uniffiHandle);
        return await jsCallback.addDeposit(FfiConverterString.lift(txid), _uniffiBindgenReactNative.FfiConverterUInt32.lift(vout), _uniffiBindgenReactNative.FfiConverterUInt64.lift(amountSats), {
          signal
        });
      };
      const uniffiHandleSuccess = returnValue => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructVoid */{
          callStatus: uniffiCaller.createCallStatus()
        });
      };
      const uniffiHandleError = (code, errorBuf) => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructVoid */{
          // TODO create callstatus with error.
          callStatus: {
            code,
            errorBuf
          }
        });
      };
      const uniffiForeignFuture = (0, _uniffiBindgenReactNative.uniffiTraitInterfaceCallAsyncWithError)(/*makeCall:*/uniffiMakeCall, /*handleSuccess:*/uniffiHandleSuccess, /*handleError:*/uniffiHandleError, /*isErrorType:*/StorageError.instanceOf, /*lowerError:*/FfiConverterTypeStorageError.lower.bind(FfiConverterTypeStorageError), /*lowerString:*/FfiConverterString.lower);
      return _uniffiBindgenReactNative.UniffiResult.success(uniffiForeignFuture);
    },
    deleteDeposit: (uniffiHandle, txid, vout, uniffiFutureCallback, uniffiCallbackData) => {
      const uniffiMakeCall = async signal => {
        const jsCallback = FfiConverterTypeStorage.lift(uniffiHandle);
        return await jsCallback.deleteDeposit(FfiConverterString.lift(txid), _uniffiBindgenReactNative.FfiConverterUInt32.lift(vout), {
          signal
        });
      };
      const uniffiHandleSuccess = returnValue => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructVoid */{
          callStatus: uniffiCaller.createCallStatus()
        });
      };
      const uniffiHandleError = (code, errorBuf) => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructVoid */{
          // TODO create callstatus with error.
          callStatus: {
            code,
            errorBuf
          }
        });
      };
      const uniffiForeignFuture = (0, _uniffiBindgenReactNative.uniffiTraitInterfaceCallAsyncWithError)(/*makeCall:*/uniffiMakeCall, /*handleSuccess:*/uniffiHandleSuccess, /*handleError:*/uniffiHandleError, /*isErrorType:*/StorageError.instanceOf, /*lowerError:*/FfiConverterTypeStorageError.lower.bind(FfiConverterTypeStorageError), /*lowerString:*/FfiConverterString.lower);
      return _uniffiBindgenReactNative.UniffiResult.success(uniffiForeignFuture);
    },
    listDeposits: (uniffiHandle, uniffiFutureCallback, uniffiCallbackData) => {
      const uniffiMakeCall = async signal => {
        const jsCallback = FfiConverterTypeStorage.lift(uniffiHandle);
        return await jsCallback.listDeposits({
          signal
        });
      };
      const uniffiHandleSuccess = returnValue => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructRustBuffer */{
          returnValue: FfiConverterArrayTypeDepositInfo.lower(returnValue),
          callStatus: uniffiCaller.createCallStatus()
        });
      };
      const uniffiHandleError = (code, errorBuf) => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructRustBuffer */{
          returnValue: /*empty*/new Uint8Array(0),
          // TODO create callstatus with error.
          callStatus: {
            code,
            errorBuf
          }
        });
      };
      const uniffiForeignFuture = (0, _uniffiBindgenReactNative.uniffiTraitInterfaceCallAsyncWithError)(/*makeCall:*/uniffiMakeCall, /*handleSuccess:*/uniffiHandleSuccess, /*handleError:*/uniffiHandleError, /*isErrorType:*/StorageError.instanceOf, /*lowerError:*/FfiConverterTypeStorageError.lower.bind(FfiConverterTypeStorageError), /*lowerString:*/FfiConverterString.lower);
      return _uniffiBindgenReactNative.UniffiResult.success(uniffiForeignFuture);
    },
    updateDeposit: (uniffiHandle, txid, vout, payload, uniffiFutureCallback, uniffiCallbackData) => {
      const uniffiMakeCall = async signal => {
        const jsCallback = FfiConverterTypeStorage.lift(uniffiHandle);
        return await jsCallback.updateDeposit(FfiConverterString.lift(txid), _uniffiBindgenReactNative.FfiConverterUInt32.lift(vout), FfiConverterTypeUpdateDepositPayload.lift(payload), {
          signal
        });
      };
      const uniffiHandleSuccess = returnValue => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructVoid */{
          callStatus: uniffiCaller.createCallStatus()
        });
      };
      const uniffiHandleError = (code, errorBuf) => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructVoid */{
          // TODO create callstatus with error.
          callStatus: {
            code,
            errorBuf
          }
        });
      };
      const uniffiForeignFuture = (0, _uniffiBindgenReactNative.uniffiTraitInterfaceCallAsyncWithError)(/*makeCall:*/uniffiMakeCall, /*handleSuccess:*/uniffiHandleSuccess, /*handleError:*/uniffiHandleError, /*isErrorType:*/StorageError.instanceOf, /*lowerError:*/FfiConverterTypeStorageError.lower.bind(FfiConverterTypeStorageError), /*lowerString:*/FfiConverterString.lower);
      return _uniffiBindgenReactNative.UniffiResult.success(uniffiForeignFuture);
    },
    uniffiFree: uniffiHandle => {
      // Storage: this will throw a stale handle error if the handle isn't found.
      FfiConverterTypeStorage.drop(uniffiHandle);
    }
  },
  register: () => {
    (0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_fn_init_callback_vtable_storage(uniffiCallbackInterfaceStorage.vtable);
  }
};

// FfiConverter for boolean | undefined
const FfiConverterOptionalBool = new _uniffiBindgenReactNative.FfiConverterOptional(_uniffiBindgenReactNative.FfiConverterBool);

// FfiConverter for Logger | undefined
const FfiConverterOptionalTypeLogger = new _uniffiBindgenReactNative.FfiConverterOptional(FfiConverterTypeLogger);

// FfiConverter for SuccessAction | undefined
const FfiConverterOptionalTypeSuccessAction = new _uniffiBindgenReactNative.FfiConverterOptional(FfiConverterTypeSuccessAction);

// FfiConverter for SuccessActionProcessed | undefined
const FfiConverterOptionalTypeSuccessActionProcessed = new _uniffiBindgenReactNative.FfiConverterOptional(FfiConverterTypeSuccessActionProcessed);

// FfiConverter for Credentials | undefined
const FfiConverterOptionalTypeCredentials = new _uniffiBindgenReactNative.FfiConverterOptional(FfiConverterTypeCredentials);

// FfiConverter for LightningAddressInfo | undefined
const FfiConverterOptionalTypeLightningAddressInfo = new _uniffiBindgenReactNative.FfiConverterOptional(FfiConverterTypeLightningAddressInfo);

// FfiConverter for LnurlPayInfo | undefined
const FfiConverterOptionalTypeLnurlPayInfo = new _uniffiBindgenReactNative.FfiConverterOptional(FfiConverterTypeLnurlPayInfo);

// FfiConverter for string | undefined
const FfiConverterOptionalString = new _uniffiBindgenReactNative.FfiConverterOptional(FfiConverterString);

// FfiConverter for /*u32*/number | undefined
const FfiConverterOptionalUInt32 = new _uniffiBindgenReactNative.FfiConverterOptional(_uniffiBindgenReactNative.FfiConverterUInt32);

// FfiConverter for /*u64*/bigint | undefined
const FfiConverterOptionalUInt64 = new _uniffiBindgenReactNative.FfiConverterOptional(_uniffiBindgenReactNative.FfiConverterUInt64);

// FfiConverter for Array<FiatCurrency>
const FfiConverterArrayTypeFiatCurrency = new _uniffiBindgenReactNative.FfiConverterArray(FfiConverterTypeFiatCurrency);

// FfiConverter for Array<Rate>
const FfiConverterArrayTypeRate = new _uniffiBindgenReactNative.FfiConverterArray(FfiConverterTypeRate);

// FfiConverter for Array<DepositInfo>
const FfiConverterArrayTypeDepositInfo = new _uniffiBindgenReactNative.FfiConverterArray(FfiConverterTypeDepositInfo);

// FfiConverter for Array<Payment>
const FfiConverterArrayTypePayment = new _uniffiBindgenReactNative.FfiConverterArray(FfiConverterTypePayment);

// FfiConverter for Array<Utxo>
const FfiConverterArrayTypeUtxo = new _uniffiBindgenReactNative.FfiConverterArray(FfiConverterTypeUtxo);

// FfiConverter for DepositClaimError | undefined
const FfiConverterOptionalTypeDepositClaimError = new _uniffiBindgenReactNative.FfiConverterOptional(FfiConverterTypeDepositClaimError);

// FfiConverter for Fee | undefined
const FfiConverterOptionalTypeFee = new _uniffiBindgenReactNative.FfiConverterOptional(FfiConverterTypeFee);

// FfiConverter for PaymentDetails | undefined
const FfiConverterOptionalTypePaymentDetails = new _uniffiBindgenReactNative.FfiConverterOptional(FfiConverterTypePaymentDetails);

// FfiConverter for SendPaymentOptions | undefined
const FfiConverterOptionalTypeSendPaymentOptions = new _uniffiBindgenReactNative.FfiConverterOptional(FfiConverterTypeSendPaymentOptions);

/**
 * This should be called before anything else.
 *
 * It is likely that this is being done for you by the library's `index.ts`.
 *
 * It checks versions of uniffi between when the Rust scaffolding was generated
 * and when the bindings were generated.
 *
 * It also initializes the machinery to enable Rust to talk back to Javascript.
 */
function uniffiEnsureInitialized() {
  // Get the bindings contract version from our ComponentInterface
  const bindingsContractVersion = 26;
  // Get the scaffolding contract version by calling the into the dylib
  const scaffoldingContractVersion = (0, _breez_sdk_sparkFfi.default)().ubrn_ffi_breez_sdk_spark_uniffi_contract_version();
  if (bindingsContractVersion !== scaffoldingContractVersion) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ContractVersionMismatch(scaffoldingContractVersion, bindingsContractVersion);
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_func_connect() !== 40345) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_func_connect');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_func_default_config() !== 62194) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_func_default_config');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_func_default_storage() !== 46285) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_func_default_storage');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_func_init_logging() !== 8518) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_func_init_logging');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_func_parse() !== 58372) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_func_parse');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_bitcoinchainservice_get_address_utxos() !== 20959) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_bitcoinchainservice_get_address_utxos');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_bitcoinchainservice_get_transaction_hex() !== 19571) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_bitcoinchainservice_get_transaction_hex');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_bitcoinchainservice_broadcast_transaction() !== 61083) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_bitcoinchainservice_broadcast_transaction');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_add_event_listener() !== 61844) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_add_event_listener');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_check_lightning_address_available() !== 31624) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_check_lightning_address_available');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_claim_deposit() !== 43529) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_claim_deposit');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_delete_lightning_address() !== 44132) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_delete_lightning_address');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_disconnect() !== 30986) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_disconnect');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_get_info() !== 6771) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_get_info');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_get_lightning_address() !== 36552) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_get_lightning_address');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_get_payment() !== 11540) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_get_payment');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_list_fiat_currencies() !== 63366) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_list_fiat_currencies');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_list_fiat_rates() !== 5904) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_list_fiat_rates');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_list_payments() !== 16156) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_list_payments');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_list_unclaimed_deposits() !== 22486) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_list_unclaimed_deposits');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_lnurl_pay() !== 10147) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_lnurl_pay');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_poll_lightning_send_payment() !== 57601) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_poll_lightning_send_payment');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_prepare_lnurl_pay() !== 37691) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_prepare_lnurl_pay');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_prepare_send_payment() !== 34185) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_prepare_send_payment');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_receive_payment() !== 36984) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_receive_payment');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_recover_lightning_address() !== 43367) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_recover_lightning_address');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_refund_deposit() !== 33646) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_refund_deposit');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_register_lightning_address() !== 530) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_register_lightning_address');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_remove_event_listener() !== 60980) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_remove_event_listener');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_send_payment() !== 54349) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_send_payment');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_send_payment_internal() !== 37855) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_send_payment_internal');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_breezsdk_sync_wallet() !== 36066) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_breezsdk_sync_wallet');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_sdkbuilder_build() !== 8126) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_sdkbuilder_build');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_sdkbuilder_with_chain_service() !== 2848) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_sdkbuilder_with_chain_service');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_sdkbuilder_with_fiat_service() !== 41113) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_sdkbuilder_with_fiat_service');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_sdkbuilder_with_key_set() !== 55523) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_sdkbuilder_with_key_set');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_sdkbuilder_with_lnurl_client() !== 61720) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_sdkbuilder_with_lnurl_client');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_sdkbuilder_with_rest_chain_service() !== 56288) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_sdkbuilder_with_rest_chain_service');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_storage_delete_cached_item() !== 6883) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_storage_delete_cached_item');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_storage_get_cached_item() !== 30248) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_storage_get_cached_item');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_storage_set_cached_item() !== 7970) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_storage_set_cached_item');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_storage_list_payments() !== 35678) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_storage_list_payments');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_storage_insert_payment() !== 28075) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_storage_insert_payment');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_storage_set_payment_metadata() !== 45500) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_storage_set_payment_metadata');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_storage_get_payment_by_id() !== 35394) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_storage_get_payment_by_id');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_storage_add_deposit() !== 55082) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_storage_add_deposit');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_storage_delete_deposit() !== 13111) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_storage_delete_deposit');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_storage_list_deposits() !== 22806) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_storage_list_deposits');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_storage_update_deposit() !== 48478) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_storage_update_deposit');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_constructor_sdkbuilder_new() !== 53882) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_constructor_sdkbuilder_new');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_eventlistener_on_event() !== 10824) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_eventlistener_on_event');
  }
  if ((0, _breez_sdk_sparkFfi.default)().ubrn_uniffi_breez_sdk_spark_checksum_method_logger_log() !== 11839) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_spark_checksum_method_logger_log');
  }
  uniffiCallbackInterfaceEventListener.register();
  uniffiCallbackInterfaceLogger.register();
  uniffiCallbackInterfaceBitcoinChainService.register();
  uniffiCallbackInterfaceStorage.register();
}
var _default = exports.default = Object.freeze({
  initialize: uniffiEnsureInitialized,
  converters: {
    FfiConverterTypeBitcoinChainService,
    FfiConverterTypeBreezSdk,
    FfiConverterTypeCheckLightningAddressRequest,
    FfiConverterTypeClaimDepositRequest,
    FfiConverterTypeClaimDepositResponse,
    FfiConverterTypeConfig,
    FfiConverterTypeConnectRequest,
    FfiConverterTypeCredentials,
    FfiConverterTypeDepositClaimError,
    FfiConverterTypeDepositInfo,
    FfiConverterTypeFee,
    FfiConverterTypeGetInfoRequest,
    FfiConverterTypeGetInfoResponse,
    FfiConverterTypeGetPaymentRequest,
    FfiConverterTypeGetPaymentResponse,
    FfiConverterTypeKeySetType,
    FfiConverterTypeLightningAddressInfo,
    FfiConverterTypeListFiatCurrenciesResponse,
    FfiConverterTypeListFiatRatesResponse,
    FfiConverterTypeListPaymentsRequest,
    FfiConverterTypeListPaymentsResponse,
    FfiConverterTypeListUnclaimedDepositsRequest,
    FfiConverterTypeListUnclaimedDepositsResponse,
    FfiConverterTypeLnurlPayInfo,
    FfiConverterTypeLnurlPayRequest,
    FfiConverterTypeLnurlPayResponse,
    FfiConverterTypeLogEntry,
    FfiConverterTypeNetwork,
    FfiConverterTypeOnchainConfirmationSpeed,
    FfiConverterTypePayment,
    FfiConverterTypePaymentDetails,
    FfiConverterTypePaymentMetadata,
    FfiConverterTypePaymentMethod,
    FfiConverterTypePaymentStatus,
    FfiConverterTypePaymentType,
    FfiConverterTypePrepareLnurlPayRequest,
    FfiConverterTypePrepareLnurlPayResponse,
    FfiConverterTypePrepareSendPaymentRequest,
    FfiConverterTypePrepareSendPaymentResponse,
    FfiConverterTypeReceivePaymentMethod,
    FfiConverterTypeReceivePaymentRequest,
    FfiConverterTypeReceivePaymentResponse,
    FfiConverterTypeRefundDepositRequest,
    FfiConverterTypeRefundDepositResponse,
    FfiConverterTypeRegisterLightningAddressRequest,
    FfiConverterTypeSdkBuilder,
    FfiConverterTypeSdkEvent,
    FfiConverterTypeSeed,
    FfiConverterTypeSendOnchainFeeQuote,
    FfiConverterTypeSendOnchainSpeedFeeQuote,
    FfiConverterTypeSendPaymentMethod,
    FfiConverterTypeSendPaymentOptions,
    FfiConverterTypeSendPaymentRequest,
    FfiConverterTypeSendPaymentResponse,
    FfiConverterTypeStorage,
    FfiConverterTypeSyncWalletRequest,
    FfiConverterTypeSyncWalletResponse,
    FfiConverterTypeTxStatus,
    FfiConverterTypeUpdateDepositPayload,
    FfiConverterTypeUtxo
  }
});
//# sourceMappingURL=breez_sdk_spark.js.map