"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.UrlSuccessActionData = exports.TokensPaymentDetails = exports.Symbol = exports.SuccessAction_Tags = exports.SuccessActionProcessed_Tags = exports.SuccessActionProcessed = exports.SuccessAction = exports.SparkInvoiceFields = exports.SparkAddressPaymentType_Tags = exports.SparkAddressPaymentType = exports.SparkAddressDetails = exports.SparkAddress = exports.SilentPaymentAddressDetails = exports.ServiceConnectivityError_Tags = exports.ServiceConnectivityError = exports.SatsPaymentDetails = exports.RestResponse = exports.RestClientImpl = exports.Rate = exports.PaymentRequestSource = exports.MessageSuccessActionData = exports.LocalizedName = exports.LocaleOverrides = exports.LnurlWithdrawRequestDetails = exports.LnurlPayRequestDetails = exports.LnurlErrorDetails = exports.LnurlCallbackStatus_Tags = exports.LnurlCallbackStatus = exports.LnurlAuthRequestDetails = exports.LightningAddressDetails = exports.InputType_Tags = exports.InputType = exports.FiatCurrency = exports.CurrencyInfo = exports.Bolt12OfferDetails = exports.Bolt12OfferBlindedPath = exports.Bolt12Offer = exports.Bolt12InvoiceRequestDetails = exports.Bolt12InvoiceDetails = exports.Bolt12Invoice = exports.Bolt11RouteHintHop = exports.Bolt11RouteHint = exports.Bolt11InvoiceDetails = exports.Bolt11Invoice = exports.BitcoinNetwork = exports.BitcoinAddressDetails = exports.Bip21Extra = exports.Bip21Details = exports.Amount_Tags = exports.Amount = exports.AesSuccessActionDataResult_Tags = exports.AesSuccessActionDataResult = exports.AesSuccessActionDataDecrypted = exports.AesSuccessActionData = void 0;
var _breez_sdk_commonFfi = _interopRequireDefault(require("./breez_sdk_common-ffi.js"));
var _uniffiBindgenReactNative = require("uniffi-bindgen-react-native");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// This file was autogenerated by some hot garbage in the `uniffi-bindgen-react-native` crate.
// Trust me, you don't want to mess with it!

// Get converters from the other files, if any.
const uniffiCaller = new _uniffiBindgenReactNative.UniffiRustCaller();
const uniffiIsDebug =
// @ts-ignore -- The process global might not be defined
typeof process !== 'object' ||
// @ts-ignore -- The process global might not be defined
process?.env?.NODE_ENV !== 'production' || false;
// Public interface members begin here.

/**
 * Payload of the AES success action, as received from the LNURL endpoint
 *
 * See [`AesSuccessActionDataDecrypted`] for a similar wrapper containing the decrypted payload
 */

/**
 * Generated factory for {@link AesSuccessActionData} record objects.
 */
const AesSuccessActionData = exports.AesSuccessActionData = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link AesSuccessActionData}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link AesSuccessActionData}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeAesSuccessActionData = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        description: FfiConverterString.read(from),
        ciphertext: FfiConverterString.read(from),
        iv: FfiConverterString.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.description, into);
      FfiConverterString.write(value.ciphertext, into);
      FfiConverterString.write(value.iv, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.description) + FfiConverterString.allocationSize(value.ciphertext) + FfiConverterString.allocationSize(value.iv);
    }
  }
  return new FFIConverter();
})();

/**
 * Wrapper for the decrypted [`AesSuccessActionData`] payload
 */

/**
 * Generated factory for {@link AesSuccessActionDataDecrypted} record objects.
 */
const AesSuccessActionDataDecrypted = exports.AesSuccessActionDataDecrypted = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link AesSuccessActionDataDecrypted}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link AesSuccessActionDataDecrypted}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeAesSuccessActionDataDecrypted = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        description: FfiConverterString.read(from),
        plaintext: FfiConverterString.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.description, into);
      FfiConverterString.write(value.plaintext, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.description) + FfiConverterString.allocationSize(value.plaintext);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link Bip21Details} record objects.
 */
const Bip21Details = exports.Bip21Details = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link Bip21Details}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link Bip21Details}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeBip21Details = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        amountSat: FfiConverterOptionalUInt64.read(from),
        assetId: FfiConverterOptionalString.read(from),
        uri: FfiConverterString.read(from),
        extras: FfiConverterArrayTypeBip21Extra.read(from),
        label: FfiConverterOptionalString.read(from),
        message: FfiConverterOptionalString.read(from),
        paymentMethods: FfiConverterArrayTypeInputType.read(from)
      };
    }
    write(value, into) {
      FfiConverterOptionalUInt64.write(value.amountSat, into);
      FfiConverterOptionalString.write(value.assetId, into);
      FfiConverterString.write(value.uri, into);
      FfiConverterArrayTypeBip21Extra.write(value.extras, into);
      FfiConverterOptionalString.write(value.label, into);
      FfiConverterOptionalString.write(value.message, into);
      FfiConverterArrayTypeInputType.write(value.paymentMethods, into);
    }
    allocationSize(value) {
      return FfiConverterOptionalUInt64.allocationSize(value.amountSat) + FfiConverterOptionalString.allocationSize(value.assetId) + FfiConverterString.allocationSize(value.uri) + FfiConverterArrayTypeBip21Extra.allocationSize(value.extras) + FfiConverterOptionalString.allocationSize(value.label) + FfiConverterOptionalString.allocationSize(value.message) + FfiConverterArrayTypeInputType.allocationSize(value.paymentMethods);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link Bip21Extra} record objects.
 */
const Bip21Extra = exports.Bip21Extra = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link Bip21Extra}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link Bip21Extra}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeBip21Extra = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        key: FfiConverterString.read(from),
        value: FfiConverterString.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.key, into);
      FfiConverterString.write(value.value, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.key) + FfiConverterString.allocationSize(value.value);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link BitcoinAddressDetails} record objects.
 */
const BitcoinAddressDetails = exports.BitcoinAddressDetails = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link BitcoinAddressDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link BitcoinAddressDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeBitcoinAddressDetails = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        address: FfiConverterString.read(from),
        network: FfiConverterTypeBitcoinNetwork.read(from),
        source: FfiConverterTypePaymentRequestSource.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.address, into);
      FfiConverterTypeBitcoinNetwork.write(value.network, into);
      FfiConverterTypePaymentRequestSource.write(value.source, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.address) + FfiConverterTypeBitcoinNetwork.allocationSize(value.network) + FfiConverterTypePaymentRequestSource.allocationSize(value.source);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link Bolt11Invoice} record objects.
 */
const Bolt11Invoice = exports.Bolt11Invoice = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link Bolt11Invoice}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link Bolt11Invoice}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeBolt11Invoice = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        bolt11: FfiConverterString.read(from),
        source: FfiConverterTypePaymentRequestSource.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.bolt11, into);
      FfiConverterTypePaymentRequestSource.write(value.source, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.bolt11) + FfiConverterTypePaymentRequestSource.allocationSize(value.source);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link Bolt11InvoiceDetails} record objects.
 */
const Bolt11InvoiceDetails = exports.Bolt11InvoiceDetails = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link Bolt11InvoiceDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link Bolt11InvoiceDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeBolt11InvoiceDetails = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        amountMsat: FfiConverterOptionalUInt64.read(from),
        description: FfiConverterOptionalString.read(from),
        descriptionHash: FfiConverterOptionalString.read(from),
        expiry: _uniffiBindgenReactNative.FfiConverterUInt64.read(from),
        invoice: FfiConverterTypeBolt11Invoice.read(from),
        minFinalCltvExpiryDelta: _uniffiBindgenReactNative.FfiConverterUInt64.read(from),
        network: FfiConverterTypeBitcoinNetwork.read(from),
        payeePubkey: FfiConverterString.read(from),
        paymentHash: FfiConverterString.read(from),
        paymentSecret: FfiConverterString.read(from),
        routingHints: FfiConverterArrayTypeBolt11RouteHint.read(from),
        timestamp: _uniffiBindgenReactNative.FfiConverterUInt64.read(from)
      };
    }
    write(value, into) {
      FfiConverterOptionalUInt64.write(value.amountMsat, into);
      FfiConverterOptionalString.write(value.description, into);
      FfiConverterOptionalString.write(value.descriptionHash, into);
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.expiry, into);
      FfiConverterTypeBolt11Invoice.write(value.invoice, into);
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.minFinalCltvExpiryDelta, into);
      FfiConverterTypeBitcoinNetwork.write(value.network, into);
      FfiConverterString.write(value.payeePubkey, into);
      FfiConverterString.write(value.paymentHash, into);
      FfiConverterString.write(value.paymentSecret, into);
      FfiConverterArrayTypeBolt11RouteHint.write(value.routingHints, into);
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.timestamp, into);
    }
    allocationSize(value) {
      return FfiConverterOptionalUInt64.allocationSize(value.amountMsat) + FfiConverterOptionalString.allocationSize(value.description) + FfiConverterOptionalString.allocationSize(value.descriptionHash) + _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.expiry) + FfiConverterTypeBolt11Invoice.allocationSize(value.invoice) + _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.minFinalCltvExpiryDelta) + FfiConverterTypeBitcoinNetwork.allocationSize(value.network) + FfiConverterString.allocationSize(value.payeePubkey) + FfiConverterString.allocationSize(value.paymentHash) + FfiConverterString.allocationSize(value.paymentSecret) + FfiConverterArrayTypeBolt11RouteHint.allocationSize(value.routingHints) + _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.timestamp);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link Bolt11RouteHint} record objects.
 */
const Bolt11RouteHint = exports.Bolt11RouteHint = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link Bolt11RouteHint}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link Bolt11RouteHint}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeBolt11RouteHint = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        hops: FfiConverterArrayTypeBolt11RouteHintHop.read(from)
      };
    }
    write(value, into) {
      FfiConverterArrayTypeBolt11RouteHintHop.write(value.hops, into);
    }
    allocationSize(value) {
      return FfiConverterArrayTypeBolt11RouteHintHop.allocationSize(value.hops);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link Bolt11RouteHintHop} record objects.
 */
const Bolt11RouteHintHop = exports.Bolt11RouteHintHop = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link Bolt11RouteHintHop}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link Bolt11RouteHintHop}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeBolt11RouteHintHop = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        srcNodeId: FfiConverterString.read(from),
        shortChannelId: FfiConverterString.read(from),
        feesBaseMsat: _uniffiBindgenReactNative.FfiConverterUInt32.read(from),
        feesProportionalMillionths: _uniffiBindgenReactNative.FfiConverterUInt32.read(from),
        cltvExpiryDelta: _uniffiBindgenReactNative.FfiConverterUInt16.read(from),
        htlcMinimumMsat: FfiConverterOptionalUInt64.read(from),
        htlcMaximumMsat: FfiConverterOptionalUInt64.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.srcNodeId, into);
      FfiConverterString.write(value.shortChannelId, into);
      _uniffiBindgenReactNative.FfiConverterUInt32.write(value.feesBaseMsat, into);
      _uniffiBindgenReactNative.FfiConverterUInt32.write(value.feesProportionalMillionths, into);
      _uniffiBindgenReactNative.FfiConverterUInt16.write(value.cltvExpiryDelta, into);
      FfiConverterOptionalUInt64.write(value.htlcMinimumMsat, into);
      FfiConverterOptionalUInt64.write(value.htlcMaximumMsat, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.srcNodeId) + FfiConverterString.allocationSize(value.shortChannelId) + _uniffiBindgenReactNative.FfiConverterUInt32.allocationSize(value.feesBaseMsat) + _uniffiBindgenReactNative.FfiConverterUInt32.allocationSize(value.feesProportionalMillionths) + _uniffiBindgenReactNative.FfiConverterUInt16.allocationSize(value.cltvExpiryDelta) + FfiConverterOptionalUInt64.allocationSize(value.htlcMinimumMsat) + FfiConverterOptionalUInt64.allocationSize(value.htlcMaximumMsat);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link Bolt12Invoice} record objects.
 */
const Bolt12Invoice = exports.Bolt12Invoice = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link Bolt12Invoice}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link Bolt12Invoice}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeBolt12Invoice = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        invoice: FfiConverterString.read(from),
        source: FfiConverterTypePaymentRequestSource.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.invoice, into);
      FfiConverterTypePaymentRequestSource.write(value.source, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.invoice) + FfiConverterTypePaymentRequestSource.allocationSize(value.source);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link Bolt12InvoiceDetails} record objects.
 */
const Bolt12InvoiceDetails = exports.Bolt12InvoiceDetails = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link Bolt12InvoiceDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link Bolt12InvoiceDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeBolt12InvoiceDetails = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        amountMsat: _uniffiBindgenReactNative.FfiConverterUInt64.read(from),
        invoice: FfiConverterTypeBolt12Invoice.read(from)
      };
    }
    write(value, into) {
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.amountMsat, into);
      FfiConverterTypeBolt12Invoice.write(value.invoice, into);
    }
    allocationSize(value) {
      return _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.amountMsat) + FfiConverterTypeBolt12Invoice.allocationSize(value.invoice);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link Bolt12InvoiceRequestDetails} record objects.
 */
const Bolt12InvoiceRequestDetails = exports.Bolt12InvoiceRequestDetails = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link Bolt12InvoiceRequestDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link Bolt12InvoiceRequestDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeBolt12InvoiceRequestDetails = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {};
    }
    write(value, into) {}
    allocationSize(value) {
      return 0;
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link Bolt12Offer} record objects.
 */
const Bolt12Offer = exports.Bolt12Offer = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link Bolt12Offer}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link Bolt12Offer}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeBolt12Offer = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        offer: FfiConverterString.read(from),
        source: FfiConverterTypePaymentRequestSource.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.offer, into);
      FfiConverterTypePaymentRequestSource.write(value.source, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.offer) + FfiConverterTypePaymentRequestSource.allocationSize(value.source);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link Bolt12OfferBlindedPath} record objects.
 */
const Bolt12OfferBlindedPath = exports.Bolt12OfferBlindedPath = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link Bolt12OfferBlindedPath}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link Bolt12OfferBlindedPath}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeBolt12OfferBlindedPath = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        blindedHops: FfiConverterArrayString.read(from)
      };
    }
    write(value, into) {
      FfiConverterArrayString.write(value.blindedHops, into);
    }
    allocationSize(value) {
      return FfiConverterArrayString.allocationSize(value.blindedHops);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link Bolt12OfferDetails} record objects.
 */
const Bolt12OfferDetails = exports.Bolt12OfferDetails = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link Bolt12OfferDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link Bolt12OfferDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeBolt12OfferDetails = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        absoluteExpiry: FfiConverterOptionalUInt64.read(from),
        chains: FfiConverterArrayString.read(from),
        description: FfiConverterOptionalString.read(from),
        issuer: FfiConverterOptionalString.read(from),
        minAmount: FfiConverterOptionalTypeAmount.read(from),
        offer: FfiConverterTypeBolt12Offer.read(from),
        paths: FfiConverterArrayTypeBolt12OfferBlindedPath.read(from),
        signingPubkey: FfiConverterOptionalString.read(from)
      };
    }
    write(value, into) {
      FfiConverterOptionalUInt64.write(value.absoluteExpiry, into);
      FfiConverterArrayString.write(value.chains, into);
      FfiConverterOptionalString.write(value.description, into);
      FfiConverterOptionalString.write(value.issuer, into);
      FfiConverterOptionalTypeAmount.write(value.minAmount, into);
      FfiConverterTypeBolt12Offer.write(value.offer, into);
      FfiConverterArrayTypeBolt12OfferBlindedPath.write(value.paths, into);
      FfiConverterOptionalString.write(value.signingPubkey, into);
    }
    allocationSize(value) {
      return FfiConverterOptionalUInt64.allocationSize(value.absoluteExpiry) + FfiConverterArrayString.allocationSize(value.chains) + FfiConverterOptionalString.allocationSize(value.description) + FfiConverterOptionalString.allocationSize(value.issuer) + FfiConverterOptionalTypeAmount.allocationSize(value.minAmount) + FfiConverterTypeBolt12Offer.allocationSize(value.offer) + FfiConverterArrayTypeBolt12OfferBlindedPath.allocationSize(value.paths) + FfiConverterOptionalString.allocationSize(value.signingPubkey);
    }
  }
  return new FFIConverter();
})();

/**
 * Details about a supported currency in the fiat rate feed
 */

/**
 * Generated factory for {@link CurrencyInfo} record objects.
 */
const CurrencyInfo = exports.CurrencyInfo = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link CurrencyInfo}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link CurrencyInfo}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeCurrencyInfo = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        name: FfiConverterString.read(from),
        fractionSize: _uniffiBindgenReactNative.FfiConverterUInt32.read(from),
        spacing: FfiConverterOptionalUInt32.read(from),
        symbol: FfiConverterOptionalTypeSymbol.read(from),
        uniqSymbol: FfiConverterOptionalTypeSymbol.read(from),
        localizedName: FfiConverterArrayTypeLocalizedName.read(from),
        localeOverrides: FfiConverterArrayTypeLocaleOverrides.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.name, into);
      _uniffiBindgenReactNative.FfiConverterUInt32.write(value.fractionSize, into);
      FfiConverterOptionalUInt32.write(value.spacing, into);
      FfiConverterOptionalTypeSymbol.write(value.symbol, into);
      FfiConverterOptionalTypeSymbol.write(value.uniqSymbol, into);
      FfiConverterArrayTypeLocalizedName.write(value.localizedName, into);
      FfiConverterArrayTypeLocaleOverrides.write(value.localeOverrides, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.name) + _uniffiBindgenReactNative.FfiConverterUInt32.allocationSize(value.fractionSize) + FfiConverterOptionalUInt32.allocationSize(value.spacing) + FfiConverterOptionalTypeSymbol.allocationSize(value.symbol) + FfiConverterOptionalTypeSymbol.allocationSize(value.uniqSymbol) + FfiConverterArrayTypeLocalizedName.allocationSize(value.localizedName) + FfiConverterArrayTypeLocaleOverrides.allocationSize(value.localeOverrides);
    }
  }
  return new FFIConverter();
})();

/**
 * Wrapper around the [`CurrencyInfo`] of a fiat currency
 */

/**
 * Generated factory for {@link FiatCurrency} record objects.
 */
const FiatCurrency = exports.FiatCurrency = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link FiatCurrency}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link FiatCurrency}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeFiatCurrency = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        id: FfiConverterString.read(from),
        info: FfiConverterTypeCurrencyInfo.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.id, into);
      FfiConverterTypeCurrencyInfo.write(value.info, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.id) + FfiConverterTypeCurrencyInfo.allocationSize(value.info);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link LightningAddressDetails} record objects.
 */
const LightningAddressDetails = exports.LightningAddressDetails = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link LightningAddressDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link LightningAddressDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeLightningAddressDetails = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        address: FfiConverterString.read(from),
        payRequest: FfiConverterTypeLnurlPayRequestDetails.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.address, into);
      FfiConverterTypeLnurlPayRequestDetails.write(value.payRequest, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.address) + FfiConverterTypeLnurlPayRequestDetails.allocationSize(value.payRequest);
    }
  }
  return new FFIConverter();
})();

/**
 * Wrapped in a [`LnurlAuth`], this is the result of [`parse`] when given a LNURL-auth endpoint.
 *
 * It represents the endpoint's parameters for the LNURL workflow.
 *
 * See <https://github.com/lnurl/luds/blob/luds/04.md>
 */

/**
 * Generated factory for {@link LnurlAuthRequestDetails} record objects.
 */
const LnurlAuthRequestDetails = exports.LnurlAuthRequestDetails = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link LnurlAuthRequestDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link LnurlAuthRequestDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeLnurlAuthRequestDetails = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        k1: FfiConverterString.read(from),
        action: FfiConverterOptionalString.read(from),
        domain: FfiConverterString.read(from),
        url: FfiConverterString.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.k1, into);
      FfiConverterOptionalString.write(value.action, into);
      FfiConverterString.write(value.domain, into);
      FfiConverterString.write(value.url, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.k1) + FfiConverterOptionalString.allocationSize(value.action) + FfiConverterString.allocationSize(value.domain) + FfiConverterString.allocationSize(value.url);
    }
  }
  return new FFIConverter();
})();

/**
 * Wrapped in a [`LnUrlError`], this represents a LNURL-endpoint error.
 */

/**
 * Generated factory for {@link LnurlErrorDetails} record objects.
 */
const LnurlErrorDetails = exports.LnurlErrorDetails = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link LnurlErrorDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link LnurlErrorDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeLnurlErrorDetails = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        reason: FfiConverterString.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.reason, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.reason);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link LnurlPayRequestDetails} record objects.
 */
const LnurlPayRequestDetails = exports.LnurlPayRequestDetails = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link LnurlPayRequestDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link LnurlPayRequestDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeLnurlPayRequestDetails = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        callback: FfiConverterString.read(from),
        minSendable: _uniffiBindgenReactNative.FfiConverterUInt64.read(from),
        maxSendable: _uniffiBindgenReactNative.FfiConverterUInt64.read(from),
        metadataStr: FfiConverterString.read(from),
        commentAllowed: _uniffiBindgenReactNative.FfiConverterUInt16.read(from),
        domain: FfiConverterString.read(from),
        url: FfiConverterString.read(from),
        address: FfiConverterOptionalString.read(from),
        allowsNostr: FfiConverterOptionalBool.read(from),
        nostrPubkey: FfiConverterOptionalString.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.callback, into);
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.minSendable, into);
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.maxSendable, into);
      FfiConverterString.write(value.metadataStr, into);
      _uniffiBindgenReactNative.FfiConverterUInt16.write(value.commentAllowed, into);
      FfiConverterString.write(value.domain, into);
      FfiConverterString.write(value.url, into);
      FfiConverterOptionalString.write(value.address, into);
      FfiConverterOptionalBool.write(value.allowsNostr, into);
      FfiConverterOptionalString.write(value.nostrPubkey, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.callback) + _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.minSendable) + _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.maxSendable) + FfiConverterString.allocationSize(value.metadataStr) + _uniffiBindgenReactNative.FfiConverterUInt16.allocationSize(value.commentAllowed) + FfiConverterString.allocationSize(value.domain) + FfiConverterString.allocationSize(value.url) + FfiConverterOptionalString.allocationSize(value.address) + FfiConverterOptionalBool.allocationSize(value.allowsNostr) + FfiConverterOptionalString.allocationSize(value.nostrPubkey);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link LnurlWithdrawRequestDetails} record objects.
 */
const LnurlWithdrawRequestDetails = exports.LnurlWithdrawRequestDetails = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link LnurlWithdrawRequestDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link LnurlWithdrawRequestDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeLnurlWithdrawRequestDetails = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        callback: FfiConverterString.read(from),
        k1: FfiConverterString.read(from),
        defaultDescription: FfiConverterString.read(from),
        minWithdrawable: _uniffiBindgenReactNative.FfiConverterUInt64.read(from),
        maxWithdrawable: _uniffiBindgenReactNative.FfiConverterUInt64.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.callback, into);
      FfiConverterString.write(value.k1, into);
      FfiConverterString.write(value.defaultDescription, into);
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.minWithdrawable, into);
      _uniffiBindgenReactNative.FfiConverterUInt64.write(value.maxWithdrawable, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.callback) + FfiConverterString.allocationSize(value.k1) + FfiConverterString.allocationSize(value.defaultDescription) + _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.minWithdrawable) + _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(value.maxWithdrawable);
    }
  }
  return new FFIConverter();
})();

/**
 * Locale-specific settings for the representation of a currency
 */

/**
 * Generated factory for {@link LocaleOverrides} record objects.
 */
const LocaleOverrides = exports.LocaleOverrides = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link LocaleOverrides}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link LocaleOverrides}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeLocaleOverrides = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        locale: FfiConverterString.read(from),
        spacing: FfiConverterOptionalUInt32.read(from),
        symbol: FfiConverterTypeSymbol.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.locale, into);
      FfiConverterOptionalUInt32.write(value.spacing, into);
      FfiConverterTypeSymbol.write(value.symbol, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.locale) + FfiConverterOptionalUInt32.allocationSize(value.spacing) + FfiConverterTypeSymbol.allocationSize(value.symbol);
    }
  }
  return new FFIConverter();
})();

/**
 * Localized name of a currency
 */

/**
 * Generated factory for {@link LocalizedName} record objects.
 */
const LocalizedName = exports.LocalizedName = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link LocalizedName}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link LocalizedName}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeLocalizedName = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        locale: FfiConverterString.read(from),
        name: FfiConverterString.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.locale, into);
      FfiConverterString.write(value.name, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.locale) + FfiConverterString.allocationSize(value.name);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link MessageSuccessActionData} record objects.
 */
const MessageSuccessActionData = exports.MessageSuccessActionData = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link MessageSuccessActionData}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link MessageSuccessActionData}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeMessageSuccessActionData = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        message: FfiConverterString.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.message, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.message);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link PaymentRequestSource} record objects.
 */
const PaymentRequestSource = exports.PaymentRequestSource = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link PaymentRequestSource}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link PaymentRequestSource}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypePaymentRequestSource = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        bip21Uri: FfiConverterOptionalString.read(from),
        bip353Address: FfiConverterOptionalString.read(from)
      };
    }
    write(value, into) {
      FfiConverterOptionalString.write(value.bip21Uri, into);
      FfiConverterOptionalString.write(value.bip353Address, into);
    }
    allocationSize(value) {
      return FfiConverterOptionalString.allocationSize(value.bip21Uri) + FfiConverterOptionalString.allocationSize(value.bip353Address);
    }
  }
  return new FFIConverter();
})();

/**
 * Denominator in an exchange rate
 */

/**
 * Generated factory for {@link Rate} record objects.
 */
const Rate = exports.Rate = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link Rate}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link Rate}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeRate = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        coin: FfiConverterString.read(from),
        value: _uniffiBindgenReactNative.FfiConverterFloat64.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.coin, into);
      _uniffiBindgenReactNative.FfiConverterFloat64.write(value.value, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.coin) + _uniffiBindgenReactNative.FfiConverterFloat64.allocationSize(value.value);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link RestResponse} record objects.
 */
const RestResponse = exports.RestResponse = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link RestResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link RestResponse}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeRestResponse = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        status: _uniffiBindgenReactNative.FfiConverterUInt16.read(from),
        body: FfiConverterString.read(from)
      };
    }
    write(value, into) {
      _uniffiBindgenReactNative.FfiConverterUInt16.write(value.status, into);
      FfiConverterString.write(value.body, into);
    }
    allocationSize(value) {
      return _uniffiBindgenReactNative.FfiConverterUInt16.allocationSize(value.status) + FfiConverterString.allocationSize(value.body);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link SatsPaymentDetails} record objects.
 */
const SatsPaymentDetails = exports.SatsPaymentDetails = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link SatsPaymentDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link SatsPaymentDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeSatsPaymentDetails = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        amount: FfiConverterOptionalUInt64.read(from)
      };
    }
    write(value, into) {
      FfiConverterOptionalUInt64.write(value.amount, into);
    }
    allocationSize(value) {
      return FfiConverterOptionalUInt64.allocationSize(value.amount);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link SilentPaymentAddressDetails} record objects.
 */
const SilentPaymentAddressDetails = exports.SilentPaymentAddressDetails = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link SilentPaymentAddressDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link SilentPaymentAddressDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeSilentPaymentAddressDetails = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        address: FfiConverterString.read(from),
        network: FfiConverterTypeBitcoinNetwork.read(from),
        source: FfiConverterTypePaymentRequestSource.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.address, into);
      FfiConverterTypeBitcoinNetwork.write(value.network, into);
      FfiConverterTypePaymentRequestSource.write(value.source, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.address) + FfiConverterTypeBitcoinNetwork.allocationSize(value.network) + FfiConverterTypePaymentRequestSource.allocationSize(value.source);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link SparkAddress} record objects.
 */
const SparkAddress = exports.SparkAddress = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link SparkAddress}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link SparkAddress}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeSparkAddress = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        identityPublicKey: FfiConverterString.read(from),
        network: FfiConverterTypeBitcoinNetwork.read(from),
        sparkInvoiceFields: FfiConverterOptionalTypeSparkInvoiceFields.read(from),
        signature: FfiConverterOptionalString.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.identityPublicKey, into);
      FfiConverterTypeBitcoinNetwork.write(value.network, into);
      FfiConverterOptionalTypeSparkInvoiceFields.write(value.sparkInvoiceFields, into);
      FfiConverterOptionalString.write(value.signature, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.identityPublicKey) + FfiConverterTypeBitcoinNetwork.allocationSize(value.network) + FfiConverterOptionalTypeSparkInvoiceFields.allocationSize(value.sparkInvoiceFields) + FfiConverterOptionalString.allocationSize(value.signature);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link SparkAddressDetails} record objects.
 */
const SparkAddressDetails = exports.SparkAddressDetails = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link SparkAddressDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link SparkAddressDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeSparkAddressDetails = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        address: FfiConverterString.read(from),
        decodedAddress: FfiConverterTypeSparkAddress.read(from),
        source: FfiConverterTypePaymentRequestSource.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.address, into);
      FfiConverterTypeSparkAddress.write(value.decodedAddress, into);
      FfiConverterTypePaymentRequestSource.write(value.source, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.address) + FfiConverterTypeSparkAddress.allocationSize(value.decodedAddress) + FfiConverterTypePaymentRequestSource.allocationSize(value.source);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link SparkInvoiceFields} record objects.
 */
const SparkInvoiceFields = exports.SparkInvoiceFields = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link SparkInvoiceFields}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link SparkInvoiceFields}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeSparkInvoiceFields = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        id: FfiConverterString.read(from),
        version: _uniffiBindgenReactNative.FfiConverterUInt32.read(from),
        memo: FfiConverterOptionalString.read(from),
        senderPublicKey: FfiConverterOptionalString.read(from),
        expiryTime: FfiConverterOptionalUInt64.read(from),
        paymentType: FfiConverterOptionalTypeSparkAddressPaymentType.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.id, into);
      _uniffiBindgenReactNative.FfiConverterUInt32.write(value.version, into);
      FfiConverterOptionalString.write(value.memo, into);
      FfiConverterOptionalString.write(value.senderPublicKey, into);
      FfiConverterOptionalUInt64.write(value.expiryTime, into);
      FfiConverterOptionalTypeSparkAddressPaymentType.write(value.paymentType, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.id) + _uniffiBindgenReactNative.FfiConverterUInt32.allocationSize(value.version) + FfiConverterOptionalString.allocationSize(value.memo) + FfiConverterOptionalString.allocationSize(value.senderPublicKey) + FfiConverterOptionalUInt64.allocationSize(value.expiryTime) + FfiConverterOptionalTypeSparkAddressPaymentType.allocationSize(value.paymentType);
    }
  }
  return new FFIConverter();
})();

/**
 * Settings for the symbol representation of a currency
 */

/**
 * Generated factory for {@link Symbol} record objects.
 */
const Symbol = exports.Symbol = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link Symbol}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link Symbol}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeSymbol = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        grapheme: FfiConverterOptionalString.read(from),
        template: FfiConverterOptionalString.read(from),
        rtl: FfiConverterOptionalBool.read(from),
        position: FfiConverterOptionalUInt32.read(from)
      };
    }
    write(value, into) {
      FfiConverterOptionalString.write(value.grapheme, into);
      FfiConverterOptionalString.write(value.template, into);
      FfiConverterOptionalBool.write(value.rtl, into);
      FfiConverterOptionalUInt32.write(value.position, into);
    }
    allocationSize(value) {
      return FfiConverterOptionalString.allocationSize(value.grapheme) + FfiConverterOptionalString.allocationSize(value.template) + FfiConverterOptionalBool.allocationSize(value.rtl) + FfiConverterOptionalUInt32.allocationSize(value.position);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link TokensPaymentDetails} record objects.
 */
const TokensPaymentDetails = exports.TokensPaymentDetails = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link TokensPaymentDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link TokensPaymentDetails}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeTokensPaymentDetails = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        tokenIdentifier: FfiConverterOptionalString.read(from),
        amount: FfiConverterOptionalUInt64.read(from)
      };
    }
    write(value, into) {
      FfiConverterOptionalString.write(value.tokenIdentifier, into);
      FfiConverterOptionalUInt64.write(value.amount, into);
    }
    allocationSize(value) {
      return FfiConverterOptionalString.allocationSize(value.tokenIdentifier) + FfiConverterOptionalUInt64.allocationSize(value.amount);
    }
  }
  return new FFIConverter();
})();
/**
 * Generated factory for {@link UrlSuccessActionData} record objects.
 */
const UrlSuccessActionData = exports.UrlSuccessActionData = (() => {
  const defaults = () => ({});
  const create = (() => {
    return (0, _uniffiBindgenReactNative.uniffiCreateRecord)(defaults);
  })();
  return Object.freeze({
    /**
     * Create a frozen instance of {@link UrlSuccessActionData}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    create,
    /**
     * Create a frozen instance of {@link UrlSuccessActionData}, with defaults specified
     * in Rust, in the {@link breez_sdk_common} crate.
     */
    new: create,
    /**
     * Defaults specified in the {@link breez_sdk_common} crate.
     */
    defaults: () => Object.freeze(defaults())
  });
})();
const FfiConverterTypeUrlSuccessActionData = (() => {
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      return {
        description: FfiConverterString.read(from),
        url: FfiConverterString.read(from),
        matchesCallbackDomain: _uniffiBindgenReactNative.FfiConverterBool.read(from)
      };
    }
    write(value, into) {
      FfiConverterString.write(value.description, into);
      FfiConverterString.write(value.url, into);
      _uniffiBindgenReactNative.FfiConverterBool.write(value.matchesCallbackDomain, into);
    }
    allocationSize(value) {
      return FfiConverterString.allocationSize(value.description) + FfiConverterString.allocationSize(value.url) + _uniffiBindgenReactNative.FfiConverterBool.allocationSize(value.matchesCallbackDomain);
    }
  }
  return new FFIConverter();
})();
const stringConverter = {
  stringToBytes: s => uniffiCaller.rustCall(status => (0, _breez_sdk_commonFfi.default)().ubrn_uniffi_internal_fn_func_ffi__string_to_arraybuffer(s, status)),
  bytesToString: ab => uniffiCaller.rustCall(status => (0, _breez_sdk_commonFfi.default)().ubrn_uniffi_internal_fn_func_ffi__arraybuffer_to_string(ab, status)),
  stringByteLength: s => uniffiCaller.rustCall(status => (0, _breez_sdk_commonFfi.default)().ubrn_uniffi_internal_fn_func_ffi__string_to_byte_length(s, status))
};
const FfiConverterString = (0, _uniffiBindgenReactNative.uniffiCreateFfiConverterString)(stringConverter);

// Enum: AesSuccessActionDataResult
let AesSuccessActionDataResult_Tags = exports.AesSuccessActionDataResult_Tags = /*#__PURE__*/function (AesSuccessActionDataResult_Tags) {
  AesSuccessActionDataResult_Tags["Decrypted"] = "Decrypted";
  AesSuccessActionDataResult_Tags["ErrorStatus"] = "ErrorStatus";
  return AesSuccessActionDataResult_Tags;
}({});
/**
 * Result of decryption of [`AesSuccessActionData`] payload
 */
const AesSuccessActionDataResult = exports.AesSuccessActionDataResult = (() => {
  class Decrypted_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'AesSuccessActionDataResult';
    tag = AesSuccessActionDataResult_Tags.Decrypted;
    constructor(inner) {
      super('AesSuccessActionDataResult', 'Decrypted');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new Decrypted_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === AesSuccessActionDataResult_Tags.Decrypted;
    }
  }
  class ErrorStatus_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'AesSuccessActionDataResult';
    tag = AesSuccessActionDataResult_Tags.ErrorStatus;
    constructor(inner) {
      super('AesSuccessActionDataResult', 'ErrorStatus');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new ErrorStatus_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === AesSuccessActionDataResult_Tags.ErrorStatus;
    }
  }
  function instanceOf(obj) {
    return obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'AesSuccessActionDataResult';
  }
  return Object.freeze({
    instanceOf,
    Decrypted: Decrypted_,
    ErrorStatus: ErrorStatus_
  });
})();

/**
 * Result of decryption of [`AesSuccessActionData`] payload
 */

// FfiConverter for enum AesSuccessActionDataResult
const FfiConverterTypeAesSuccessActionDataResult = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new AesSuccessActionDataResult.Decrypted({
            data: FfiConverterTypeAesSuccessActionDataDecrypted.read(from)
          });
        case 2:
          return new AesSuccessActionDataResult.ErrorStatus({
            reason: FfiConverterString.read(from)
          });
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value.tag) {
        case AesSuccessActionDataResult_Tags.Decrypted:
          {
            ordinalConverter.write(1, into);
            const inner = value.inner;
            FfiConverterTypeAesSuccessActionDataDecrypted.write(inner.data, into);
            return;
          }
        case AesSuccessActionDataResult_Tags.ErrorStatus:
          {
            ordinalConverter.write(2, into);
            const inner = value.inner;
            FfiConverterString.write(inner.reason, into);
            return;
          }
        default:
          // Throwing from here means that AesSuccessActionDataResult_Tags hasn't matched an ordinal.
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value) {
      switch (value.tag) {
        case AesSuccessActionDataResult_Tags.Decrypted:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(1);
            size += FfiConverterTypeAesSuccessActionDataDecrypted.allocationSize(inner.data);
            return size;
          }
        case AesSuccessActionDataResult_Tags.ErrorStatus:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(2);
            size += FfiConverterString.allocationSize(inner.reason);
            return size;
          }
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();

// Enum: Amount
let Amount_Tags = exports.Amount_Tags = /*#__PURE__*/function (Amount_Tags) {
  Amount_Tags["Bitcoin"] = "Bitcoin";
  Amount_Tags["Currency"] = "Currency";
  return Amount_Tags;
}({});
const Amount = exports.Amount = (() => {
  class Bitcoin_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'Amount';
    tag = Amount_Tags.Bitcoin;
    constructor(inner) {
      super('Amount', 'Bitcoin');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new Bitcoin_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === Amount_Tags.Bitcoin;
    }
  }
  /**
   * An amount of currency specified using ISO 4712.
   */
  class Currency_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'Amount';
    tag = Amount_Tags.Currency;
    constructor(inner) {
      super('Amount', 'Currency');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new Currency_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === Amount_Tags.Currency;
    }
  }
  function instanceOf(obj) {
    return obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'Amount';
  }
  return Object.freeze({
    instanceOf,
    Bitcoin: Bitcoin_,
    Currency: Currency_
  });
})();
// FfiConverter for enum Amount
const FfiConverterTypeAmount = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new Amount.Bitcoin({
            amountMsat: _uniffiBindgenReactNative.FfiConverterUInt64.read(from)
          });
        case 2:
          return new Amount.Currency({
            iso4217Code: FfiConverterString.read(from),
            fractionalAmount: _uniffiBindgenReactNative.FfiConverterUInt64.read(from)
          });
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value.tag) {
        case Amount_Tags.Bitcoin:
          {
            ordinalConverter.write(1, into);
            const inner = value.inner;
            _uniffiBindgenReactNative.FfiConverterUInt64.write(inner.amountMsat, into);
            return;
          }
        case Amount_Tags.Currency:
          {
            ordinalConverter.write(2, into);
            const inner = value.inner;
            FfiConverterString.write(inner.iso4217Code, into);
            _uniffiBindgenReactNative.FfiConverterUInt64.write(inner.fractionalAmount, into);
            return;
          }
        default:
          // Throwing from here means that Amount_Tags hasn't matched an ordinal.
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value) {
      switch (value.tag) {
        case Amount_Tags.Bitcoin:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(1);
            size += _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(inner.amountMsat);
            return size;
          }
        case Amount_Tags.Currency:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(2);
            size += FfiConverterString.allocationSize(inner.iso4217Code);
            size += _uniffiBindgenReactNative.FfiConverterUInt64.allocationSize(inner.fractionalAmount);
            return size;
          }
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();
let BitcoinNetwork = exports.BitcoinNetwork = /*#__PURE__*/function (BitcoinNetwork) {
  /**
   * Mainnet
   */
  BitcoinNetwork[BitcoinNetwork["Bitcoin"] = 0] = "Bitcoin";
  BitcoinNetwork[BitcoinNetwork["Testnet3"] = 1] = "Testnet3";
  BitcoinNetwork[BitcoinNetwork["Testnet4"] = 2] = "Testnet4";
  BitcoinNetwork[BitcoinNetwork["Signet"] = 3] = "Signet";
  BitcoinNetwork[BitcoinNetwork["Regtest"] = 4] = "Regtest";
  return BitcoinNetwork;
}({});
const FfiConverterTypeBitcoinNetwork = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return BitcoinNetwork.Bitcoin;
        case 2:
          return BitcoinNetwork.Testnet3;
        case 3:
          return BitcoinNetwork.Testnet4;
        case 4:
          return BitcoinNetwork.Signet;
        case 5:
          return BitcoinNetwork.Regtest;
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value) {
        case BitcoinNetwork.Bitcoin:
          return ordinalConverter.write(1, into);
        case BitcoinNetwork.Testnet3:
          return ordinalConverter.write(2, into);
        case BitcoinNetwork.Testnet4:
          return ordinalConverter.write(3, into);
        case BitcoinNetwork.Signet:
          return ordinalConverter.write(4, into);
        case BitcoinNetwork.Regtest:
          return ordinalConverter.write(5, into);
      }
    }
    allocationSize(value) {
      return ordinalConverter.allocationSize(0);
    }
  }
  return new FFIConverter();
})();

// Enum: InputType
let InputType_Tags = exports.InputType_Tags = /*#__PURE__*/function (InputType_Tags) {
  InputType_Tags["BitcoinAddress"] = "BitcoinAddress";
  InputType_Tags["Bolt11Invoice"] = "Bolt11Invoice";
  InputType_Tags["Bolt12Invoice"] = "Bolt12Invoice";
  InputType_Tags["Bolt12Offer"] = "Bolt12Offer";
  InputType_Tags["LightningAddress"] = "LightningAddress";
  InputType_Tags["LnurlPay"] = "LnurlPay";
  InputType_Tags["SilentPaymentAddress"] = "SilentPaymentAddress";
  InputType_Tags["LnurlAuth"] = "LnurlAuth";
  InputType_Tags["Url"] = "Url";
  InputType_Tags["Bip21"] = "Bip21";
  InputType_Tags["Bolt12InvoiceRequest"] = "Bolt12InvoiceRequest";
  InputType_Tags["LnurlWithdraw"] = "LnurlWithdraw";
  InputType_Tags["SparkAddress"] = "SparkAddress";
  return InputType_Tags;
}({});
const InputType = exports.InputType = (() => {
  class BitcoinAddress_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'InputType';
    tag = InputType_Tags.BitcoinAddress;
    constructor(v0) {
      super('InputType', 'BitcoinAddress');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new BitcoinAddress_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === InputType_Tags.BitcoinAddress;
    }
  }
  class Bolt11Invoice_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'InputType';
    tag = InputType_Tags.Bolt11Invoice;
    constructor(v0) {
      super('InputType', 'Bolt11Invoice');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new Bolt11Invoice_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === InputType_Tags.Bolt11Invoice;
    }
  }
  class Bolt12Invoice_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'InputType';
    tag = InputType_Tags.Bolt12Invoice;
    constructor(v0) {
      super('InputType', 'Bolt12Invoice');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new Bolt12Invoice_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === InputType_Tags.Bolt12Invoice;
    }
  }
  class Bolt12Offer_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'InputType';
    tag = InputType_Tags.Bolt12Offer;
    constructor(v0) {
      super('InputType', 'Bolt12Offer');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new Bolt12Offer_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === InputType_Tags.Bolt12Offer;
    }
  }
  class LightningAddress_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'InputType';
    tag = InputType_Tags.LightningAddress;
    constructor(v0) {
      super('InputType', 'LightningAddress');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new LightningAddress_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === InputType_Tags.LightningAddress;
    }
  }
  class LnurlPay_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'InputType';
    tag = InputType_Tags.LnurlPay;
    constructor(v0) {
      super('InputType', 'LnurlPay');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new LnurlPay_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === InputType_Tags.LnurlPay;
    }
  }
  class SilentPaymentAddress_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'InputType';
    tag = InputType_Tags.SilentPaymentAddress;
    constructor(v0) {
      super('InputType', 'SilentPaymentAddress');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new SilentPaymentAddress_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === InputType_Tags.SilentPaymentAddress;
    }
  }
  class LnurlAuth_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'InputType';
    tag = InputType_Tags.LnurlAuth;
    constructor(v0) {
      super('InputType', 'LnurlAuth');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new LnurlAuth_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === InputType_Tags.LnurlAuth;
    }
  }
  class Url_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'InputType';
    tag = InputType_Tags.Url;
    constructor(v0) {
      super('InputType', 'Url');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new Url_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === InputType_Tags.Url;
    }
  }
  class Bip21_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'InputType';
    tag = InputType_Tags.Bip21;
    constructor(v0) {
      super('InputType', 'Bip21');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new Bip21_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === InputType_Tags.Bip21;
    }
  }
  class Bolt12InvoiceRequest_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'InputType';
    tag = InputType_Tags.Bolt12InvoiceRequest;
    constructor(v0) {
      super('InputType', 'Bolt12InvoiceRequest');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new Bolt12InvoiceRequest_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === InputType_Tags.Bolt12InvoiceRequest;
    }
  }
  class LnurlWithdraw_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'InputType';
    tag = InputType_Tags.LnurlWithdraw;
    constructor(v0) {
      super('InputType', 'LnurlWithdraw');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new LnurlWithdraw_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === InputType_Tags.LnurlWithdraw;
    }
  }
  class SparkAddress_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'InputType';
    tag = InputType_Tags.SparkAddress;
    constructor(v0) {
      super('InputType', 'SparkAddress');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new SparkAddress_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === InputType_Tags.SparkAddress;
    }
  }
  function instanceOf(obj) {
    return obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'InputType';
  }
  return Object.freeze({
    instanceOf,
    BitcoinAddress: BitcoinAddress_,
    Bolt11Invoice: Bolt11Invoice_,
    Bolt12Invoice: Bolt12Invoice_,
    Bolt12Offer: Bolt12Offer_,
    LightningAddress: LightningAddress_,
    LnurlPay: LnurlPay_,
    SilentPaymentAddress: SilentPaymentAddress_,
    LnurlAuth: LnurlAuth_,
    Url: Url_,
    Bip21: Bip21_,
    Bolt12InvoiceRequest: Bolt12InvoiceRequest_,
    LnurlWithdraw: LnurlWithdraw_,
    SparkAddress: SparkAddress_
  });
})();
// FfiConverter for enum InputType
const FfiConverterTypeInputType = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new InputType.BitcoinAddress(FfiConverterTypeBitcoinAddressDetails.read(from));
        case 2:
          return new InputType.Bolt11Invoice(FfiConverterTypeBolt11InvoiceDetails.read(from));
        case 3:
          return new InputType.Bolt12Invoice(FfiConverterTypeBolt12InvoiceDetails.read(from));
        case 4:
          return new InputType.Bolt12Offer(FfiConverterTypeBolt12OfferDetails.read(from));
        case 5:
          return new InputType.LightningAddress(FfiConverterTypeLightningAddressDetails.read(from));
        case 6:
          return new InputType.LnurlPay(FfiConverterTypeLnurlPayRequestDetails.read(from));
        case 7:
          return new InputType.SilentPaymentAddress(FfiConverterTypeSilentPaymentAddressDetails.read(from));
        case 8:
          return new InputType.LnurlAuth(FfiConverterTypeLnurlAuthRequestDetails.read(from));
        case 9:
          return new InputType.Url(FfiConverterString.read(from));
        case 10:
          return new InputType.Bip21(FfiConverterTypeBip21Details.read(from));
        case 11:
          return new InputType.Bolt12InvoiceRequest(FfiConverterTypeBolt12InvoiceRequestDetails.read(from));
        case 12:
          return new InputType.LnurlWithdraw(FfiConverterTypeLnurlWithdrawRequestDetails.read(from));
        case 13:
          return new InputType.SparkAddress(FfiConverterTypeSparkAddressDetails.read(from));
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value.tag) {
        case InputType_Tags.BitcoinAddress:
          {
            ordinalConverter.write(1, into);
            const inner = value.inner;
            FfiConverterTypeBitcoinAddressDetails.write(inner[0], into);
            return;
          }
        case InputType_Tags.Bolt11Invoice:
          {
            ordinalConverter.write(2, into);
            const inner = value.inner;
            FfiConverterTypeBolt11InvoiceDetails.write(inner[0], into);
            return;
          }
        case InputType_Tags.Bolt12Invoice:
          {
            ordinalConverter.write(3, into);
            const inner = value.inner;
            FfiConverterTypeBolt12InvoiceDetails.write(inner[0], into);
            return;
          }
        case InputType_Tags.Bolt12Offer:
          {
            ordinalConverter.write(4, into);
            const inner = value.inner;
            FfiConverterTypeBolt12OfferDetails.write(inner[0], into);
            return;
          }
        case InputType_Tags.LightningAddress:
          {
            ordinalConverter.write(5, into);
            const inner = value.inner;
            FfiConverterTypeLightningAddressDetails.write(inner[0], into);
            return;
          }
        case InputType_Tags.LnurlPay:
          {
            ordinalConverter.write(6, into);
            const inner = value.inner;
            FfiConverterTypeLnurlPayRequestDetails.write(inner[0], into);
            return;
          }
        case InputType_Tags.SilentPaymentAddress:
          {
            ordinalConverter.write(7, into);
            const inner = value.inner;
            FfiConverterTypeSilentPaymentAddressDetails.write(inner[0], into);
            return;
          }
        case InputType_Tags.LnurlAuth:
          {
            ordinalConverter.write(8, into);
            const inner = value.inner;
            FfiConverterTypeLnurlAuthRequestDetails.write(inner[0], into);
            return;
          }
        case InputType_Tags.Url:
          {
            ordinalConverter.write(9, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        case InputType_Tags.Bip21:
          {
            ordinalConverter.write(10, into);
            const inner = value.inner;
            FfiConverterTypeBip21Details.write(inner[0], into);
            return;
          }
        case InputType_Tags.Bolt12InvoiceRequest:
          {
            ordinalConverter.write(11, into);
            const inner = value.inner;
            FfiConverterTypeBolt12InvoiceRequestDetails.write(inner[0], into);
            return;
          }
        case InputType_Tags.LnurlWithdraw:
          {
            ordinalConverter.write(12, into);
            const inner = value.inner;
            FfiConverterTypeLnurlWithdrawRequestDetails.write(inner[0], into);
            return;
          }
        case InputType_Tags.SparkAddress:
          {
            ordinalConverter.write(13, into);
            const inner = value.inner;
            FfiConverterTypeSparkAddressDetails.write(inner[0], into);
            return;
          }
        default:
          // Throwing from here means that InputType_Tags hasn't matched an ordinal.
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value) {
      switch (value.tag) {
        case InputType_Tags.BitcoinAddress:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(1);
            size += FfiConverterTypeBitcoinAddressDetails.allocationSize(inner[0]);
            return size;
          }
        case InputType_Tags.Bolt11Invoice:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(2);
            size += FfiConverterTypeBolt11InvoiceDetails.allocationSize(inner[0]);
            return size;
          }
        case InputType_Tags.Bolt12Invoice:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(3);
            size += FfiConverterTypeBolt12InvoiceDetails.allocationSize(inner[0]);
            return size;
          }
        case InputType_Tags.Bolt12Offer:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(4);
            size += FfiConverterTypeBolt12OfferDetails.allocationSize(inner[0]);
            return size;
          }
        case InputType_Tags.LightningAddress:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(5);
            size += FfiConverterTypeLightningAddressDetails.allocationSize(inner[0]);
            return size;
          }
        case InputType_Tags.LnurlPay:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(6);
            size += FfiConverterTypeLnurlPayRequestDetails.allocationSize(inner[0]);
            return size;
          }
        case InputType_Tags.SilentPaymentAddress:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(7);
            size += FfiConverterTypeSilentPaymentAddressDetails.allocationSize(inner[0]);
            return size;
          }
        case InputType_Tags.LnurlAuth:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(8);
            size += FfiConverterTypeLnurlAuthRequestDetails.allocationSize(inner[0]);
            return size;
          }
        case InputType_Tags.Url:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(9);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        case InputType_Tags.Bip21:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(10);
            size += FfiConverterTypeBip21Details.allocationSize(inner[0]);
            return size;
          }
        case InputType_Tags.Bolt12InvoiceRequest:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(11);
            size += FfiConverterTypeBolt12InvoiceRequestDetails.allocationSize(inner[0]);
            return size;
          }
        case InputType_Tags.LnurlWithdraw:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(12);
            size += FfiConverterTypeLnurlWithdrawRequestDetails.allocationSize(inner[0]);
            return size;
          }
        case InputType_Tags.SparkAddress:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(13);
            size += FfiConverterTypeSparkAddressDetails.allocationSize(inner[0]);
            return size;
          }
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();

// Enum: LnurlCallbackStatus
let LnurlCallbackStatus_Tags = exports.LnurlCallbackStatus_Tags = /*#__PURE__*/function (LnurlCallbackStatus_Tags) {
  LnurlCallbackStatus_Tags["Ok"] = "Ok";
  LnurlCallbackStatus_Tags["ErrorStatus"] = "ErrorStatus";
  return LnurlCallbackStatus_Tags;
}({});
/**
 * Contains the result of the entire LNURL interaction, as reported by the LNURL endpoint.
 *
 * * `Ok` indicates the interaction with the endpoint was valid, and the endpoint
 * - started to pay the invoice asynchronously in the case of LNURL-withdraw,
 * - verified the client signature in the case of LNURL-auth
 * * `Error` indicates a generic issue the LNURL endpoint encountered, including a freetext
 * description of the reason.
 *
 * Both cases are described in LUD-03 <https://github.com/lnurl/luds/blob/luds/03.md> & LUD-04: <https://github.com/lnurl/luds/blob/luds/04.md>
 */
const LnurlCallbackStatus = exports.LnurlCallbackStatus = (() => {
  /**
   * On-wire format is: `{"status": "OK"}`
   */
  class Ok_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'LnurlCallbackStatus';
    tag = LnurlCallbackStatus_Tags.Ok;
    constructor() {
      super('LnurlCallbackStatus', 'Ok');
    }
    static new() {
      return new Ok_();
    }
    static instanceOf(obj) {
      return obj.tag === LnurlCallbackStatus_Tags.Ok;
    }
  }
  /**
   * On-wire format is: `{"status": "ERROR", "reason": "error details..."}`
   */
  class ErrorStatus_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'LnurlCallbackStatus';
    tag = LnurlCallbackStatus_Tags.ErrorStatus;
    constructor(inner) {
      super('LnurlCallbackStatus', 'ErrorStatus');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new ErrorStatus_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === LnurlCallbackStatus_Tags.ErrorStatus;
    }
  }
  function instanceOf(obj) {
    return obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'LnurlCallbackStatus';
  }
  return Object.freeze({
    instanceOf,
    Ok: Ok_,
    ErrorStatus: ErrorStatus_
  });
})();

/**
 * Contains the result of the entire LNURL interaction, as reported by the LNURL endpoint.
 *
 * * `Ok` indicates the interaction with the endpoint was valid, and the endpoint
 * - started to pay the invoice asynchronously in the case of LNURL-withdraw,
 * - verified the client signature in the case of LNURL-auth
 * * `Error` indicates a generic issue the LNURL endpoint encountered, including a freetext
 * description of the reason.
 *
 * Both cases are described in LUD-03 <https://github.com/lnurl/luds/blob/luds/03.md> & LUD-04: <https://github.com/lnurl/luds/blob/luds/04.md>
 */

// FfiConverter for enum LnurlCallbackStatus
const FfiConverterTypeLnurlCallbackStatus = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new LnurlCallbackStatus.Ok();
        case 2:
          return new LnurlCallbackStatus.ErrorStatus({
            errorDetails: FfiConverterTypeLnurlErrorDetails.read(from)
          });
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value.tag) {
        case LnurlCallbackStatus_Tags.Ok:
          {
            ordinalConverter.write(1, into);
            return;
          }
        case LnurlCallbackStatus_Tags.ErrorStatus:
          {
            ordinalConverter.write(2, into);
            const inner = value.inner;
            FfiConverterTypeLnurlErrorDetails.write(inner.errorDetails, into);
            return;
          }
        default:
          // Throwing from here means that LnurlCallbackStatus_Tags hasn't matched an ordinal.
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value) {
      switch (value.tag) {
        case LnurlCallbackStatus_Tags.Ok:
          {
            return ordinalConverter.allocationSize(1);
          }
        case LnurlCallbackStatus_Tags.ErrorStatus:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(2);
            size += FfiConverterTypeLnurlErrorDetails.allocationSize(inner.errorDetails);
            return size;
          }
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();

// Error type: ServiceConnectivityError

// Enum: ServiceConnectivityError
let ServiceConnectivityError_Tags = exports.ServiceConnectivityError_Tags = /*#__PURE__*/function (ServiceConnectivityError_Tags) {
  ServiceConnectivityError_Tags["Builder"] = "Builder";
  ServiceConnectivityError_Tags["Redirect"] = "Redirect";
  ServiceConnectivityError_Tags["Status"] = "Status";
  ServiceConnectivityError_Tags["Timeout"] = "Timeout";
  ServiceConnectivityError_Tags["Request"] = "Request";
  ServiceConnectivityError_Tags["Connect"] = "Connect";
  ServiceConnectivityError_Tags["Body"] = "Body";
  ServiceConnectivityError_Tags["Decode"] = "Decode";
  ServiceConnectivityError_Tags["Json"] = "Json";
  ServiceConnectivityError_Tags["Other"] = "Other";
  return ServiceConnectivityError_Tags;
}({});
const ServiceConnectivityError = exports.ServiceConnectivityError = (() => {
  class Builder_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'ServiceConnectivityError';
    tag = ServiceConnectivityError_Tags.Builder;
    constructor(v0) {
      super('ServiceConnectivityError', 'Builder');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new Builder_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === ServiceConnectivityError_Tags.Builder;
    }
    static hasInner(obj) {
      return Builder_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  class Redirect_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'ServiceConnectivityError';
    tag = ServiceConnectivityError_Tags.Redirect;
    constructor(v0) {
      super('ServiceConnectivityError', 'Redirect');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new Redirect_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === ServiceConnectivityError_Tags.Redirect;
    }
    static hasInner(obj) {
      return Redirect_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  class Status_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'ServiceConnectivityError';
    tag = ServiceConnectivityError_Tags.Status;
    constructor(inner) {
      super('ServiceConnectivityError', 'Status');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new Status_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === ServiceConnectivityError_Tags.Status;
    }
    static hasInner(obj) {
      return Status_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  class Timeout_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'ServiceConnectivityError';
    tag = ServiceConnectivityError_Tags.Timeout;
    constructor(v0) {
      super('ServiceConnectivityError', 'Timeout');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new Timeout_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === ServiceConnectivityError_Tags.Timeout;
    }
    static hasInner(obj) {
      return Timeout_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  class Request_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'ServiceConnectivityError';
    tag = ServiceConnectivityError_Tags.Request;
    constructor(v0) {
      super('ServiceConnectivityError', 'Request');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new Request_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === ServiceConnectivityError_Tags.Request;
    }
    static hasInner(obj) {
      return Request_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  class Connect_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'ServiceConnectivityError';
    tag = ServiceConnectivityError_Tags.Connect;
    constructor(v0) {
      super('ServiceConnectivityError', 'Connect');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new Connect_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === ServiceConnectivityError_Tags.Connect;
    }
    static hasInner(obj) {
      return Connect_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  class Body_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'ServiceConnectivityError';
    tag = ServiceConnectivityError_Tags.Body;
    constructor(v0) {
      super('ServiceConnectivityError', 'Body');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new Body_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === ServiceConnectivityError_Tags.Body;
    }
    static hasInner(obj) {
      return Body_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  class Decode_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'ServiceConnectivityError';
    tag = ServiceConnectivityError_Tags.Decode;
    constructor(v0) {
      super('ServiceConnectivityError', 'Decode');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new Decode_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === ServiceConnectivityError_Tags.Decode;
    }
    static hasInner(obj) {
      return Decode_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  class Json_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'ServiceConnectivityError';
    tag = ServiceConnectivityError_Tags.Json;
    constructor(v0) {
      super('ServiceConnectivityError', 'Json');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new Json_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === ServiceConnectivityError_Tags.Json;
    }
    static hasInner(obj) {
      return Json_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  class Other_ extends _uniffiBindgenReactNative.UniffiError {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'ServiceConnectivityError';
    tag = ServiceConnectivityError_Tags.Other;
    constructor(v0) {
      super('ServiceConnectivityError', 'Other');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new Other_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === ServiceConnectivityError_Tags.Other;
    }
    static hasInner(obj) {
      return Other_.instanceOf(obj);
    }
    static getInner(obj) {
      return obj.inner;
    }
  }
  function instanceOf(obj) {
    return obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'ServiceConnectivityError';
  }
  return Object.freeze({
    instanceOf,
    Builder: Builder_,
    Redirect: Redirect_,
    Status: Status_,
    Timeout: Timeout_,
    Request: Request_,
    Connect: Connect_,
    Body: Body_,
    Decode: Decode_,
    Json: Json_,
    Other: Other_
  });
})();
// FfiConverter for enum ServiceConnectivityError
const FfiConverterTypeServiceConnectivityError = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new ServiceConnectivityError.Builder(FfiConverterString.read(from));
        case 2:
          return new ServiceConnectivityError.Redirect(FfiConverterString.read(from));
        case 3:
          return new ServiceConnectivityError.Status({
            status: _uniffiBindgenReactNative.FfiConverterUInt16.read(from),
            body: FfiConverterString.read(from)
          });
        case 4:
          return new ServiceConnectivityError.Timeout(FfiConverterString.read(from));
        case 5:
          return new ServiceConnectivityError.Request(FfiConverterString.read(from));
        case 6:
          return new ServiceConnectivityError.Connect(FfiConverterString.read(from));
        case 7:
          return new ServiceConnectivityError.Body(FfiConverterString.read(from));
        case 8:
          return new ServiceConnectivityError.Decode(FfiConverterString.read(from));
        case 9:
          return new ServiceConnectivityError.Json(FfiConverterString.read(from));
        case 10:
          return new ServiceConnectivityError.Other(FfiConverterString.read(from));
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value.tag) {
        case ServiceConnectivityError_Tags.Builder:
          {
            ordinalConverter.write(1, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        case ServiceConnectivityError_Tags.Redirect:
          {
            ordinalConverter.write(2, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        case ServiceConnectivityError_Tags.Status:
          {
            ordinalConverter.write(3, into);
            const inner = value.inner;
            _uniffiBindgenReactNative.FfiConverterUInt16.write(inner.status, into);
            FfiConverterString.write(inner.body, into);
            return;
          }
        case ServiceConnectivityError_Tags.Timeout:
          {
            ordinalConverter.write(4, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        case ServiceConnectivityError_Tags.Request:
          {
            ordinalConverter.write(5, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        case ServiceConnectivityError_Tags.Connect:
          {
            ordinalConverter.write(6, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        case ServiceConnectivityError_Tags.Body:
          {
            ordinalConverter.write(7, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        case ServiceConnectivityError_Tags.Decode:
          {
            ordinalConverter.write(8, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        case ServiceConnectivityError_Tags.Json:
          {
            ordinalConverter.write(9, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        case ServiceConnectivityError_Tags.Other:
          {
            ordinalConverter.write(10, into);
            const inner = value.inner;
            FfiConverterString.write(inner[0], into);
            return;
          }
        default:
          // Throwing from here means that ServiceConnectivityError_Tags hasn't matched an ordinal.
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value) {
      switch (value.tag) {
        case ServiceConnectivityError_Tags.Builder:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(1);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        case ServiceConnectivityError_Tags.Redirect:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(2);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        case ServiceConnectivityError_Tags.Status:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(3);
            size += _uniffiBindgenReactNative.FfiConverterUInt16.allocationSize(inner.status);
            size += FfiConverterString.allocationSize(inner.body);
            return size;
          }
        case ServiceConnectivityError_Tags.Timeout:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(4);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        case ServiceConnectivityError_Tags.Request:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(5);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        case ServiceConnectivityError_Tags.Connect:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(6);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        case ServiceConnectivityError_Tags.Body:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(7);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        case ServiceConnectivityError_Tags.Decode:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(8);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        case ServiceConnectivityError_Tags.Json:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(9);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        case ServiceConnectivityError_Tags.Other:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(10);
            size += FfiConverterString.allocationSize(inner[0]);
            return size;
          }
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();

// Enum: SparkAddressPaymentType
let SparkAddressPaymentType_Tags = exports.SparkAddressPaymentType_Tags = /*#__PURE__*/function (SparkAddressPaymentType_Tags) {
  SparkAddressPaymentType_Tags["TokensPayment"] = "TokensPayment";
  SparkAddressPaymentType_Tags["SatsPayment"] = "SatsPayment";
  return SparkAddressPaymentType_Tags;
}({});
const SparkAddressPaymentType = exports.SparkAddressPaymentType = (() => {
  class TokensPayment_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SparkAddressPaymentType';
    tag = SparkAddressPaymentType_Tags.TokensPayment;
    constructor(v0) {
      super('SparkAddressPaymentType', 'TokensPayment');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new TokensPayment_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === SparkAddressPaymentType_Tags.TokensPayment;
    }
  }
  class SatsPayment_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SparkAddressPaymentType';
    tag = SparkAddressPaymentType_Tags.SatsPayment;
    constructor(v0) {
      super('SparkAddressPaymentType', 'SatsPayment');
      this.inner = Object.freeze([v0]);
    }
    static new(v0) {
      return new SatsPayment_(v0);
    }
    static instanceOf(obj) {
      return obj.tag === SparkAddressPaymentType_Tags.SatsPayment;
    }
  }
  function instanceOf(obj) {
    return obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'SparkAddressPaymentType';
  }
  return Object.freeze({
    instanceOf,
    TokensPayment: TokensPayment_,
    SatsPayment: SatsPayment_
  });
})();
// FfiConverter for enum SparkAddressPaymentType
const FfiConverterTypeSparkAddressPaymentType = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new SparkAddressPaymentType.TokensPayment(FfiConverterTypeTokensPaymentDetails.read(from));
        case 2:
          return new SparkAddressPaymentType.SatsPayment(FfiConverterTypeSatsPaymentDetails.read(from));
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value.tag) {
        case SparkAddressPaymentType_Tags.TokensPayment:
          {
            ordinalConverter.write(1, into);
            const inner = value.inner;
            FfiConverterTypeTokensPaymentDetails.write(inner[0], into);
            return;
          }
        case SparkAddressPaymentType_Tags.SatsPayment:
          {
            ordinalConverter.write(2, into);
            const inner = value.inner;
            FfiConverterTypeSatsPaymentDetails.write(inner[0], into);
            return;
          }
        default:
          // Throwing from here means that SparkAddressPaymentType_Tags hasn't matched an ordinal.
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value) {
      switch (value.tag) {
        case SparkAddressPaymentType_Tags.TokensPayment:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(1);
            size += FfiConverterTypeTokensPaymentDetails.allocationSize(inner[0]);
            return size;
          }
        case SparkAddressPaymentType_Tags.SatsPayment:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(2);
            size += FfiConverterTypeSatsPaymentDetails.allocationSize(inner[0]);
            return size;
          }
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();

// Enum: SuccessAction
let SuccessAction_Tags = exports.SuccessAction_Tags = /*#__PURE__*/function (SuccessAction_Tags) {
  SuccessAction_Tags["Aes"] = "Aes";
  SuccessAction_Tags["Message"] = "Message";
  SuccessAction_Tags["Url"] = "Url";
  return SuccessAction_Tags;
}({});
/**
 * Supported success action types
 *
 * Receiving any other (unsupported) success action type will result in a failed parsing,
 * which will abort the LNURL-pay workflow, as per LUD-09.
 */
const SuccessAction = exports.SuccessAction = (() => {
  /**
   * AES type, described in LUD-10
   */
  class Aes_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SuccessAction';
    tag = SuccessAction_Tags.Aes;
    constructor(inner) {
      super('SuccessAction', 'Aes');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new Aes_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === SuccessAction_Tags.Aes;
    }
  }
  /**
   * Message type, described in LUD-09
   */
  class Message_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SuccessAction';
    tag = SuccessAction_Tags.Message;
    constructor(inner) {
      super('SuccessAction', 'Message');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new Message_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === SuccessAction_Tags.Message;
    }
  }
  /**
   * URL type, described in LUD-09
   */
  class Url_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SuccessAction';
    tag = SuccessAction_Tags.Url;
    constructor(inner) {
      super('SuccessAction', 'Url');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new Url_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === SuccessAction_Tags.Url;
    }
  }
  function instanceOf(obj) {
    return obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'SuccessAction';
  }
  return Object.freeze({
    instanceOf,
    Aes: Aes_,
    Message: Message_,
    Url: Url_
  });
})();

/**
 * Supported success action types
 *
 * Receiving any other (unsupported) success action type will result in a failed parsing,
 * which will abort the LNURL-pay workflow, as per LUD-09.
 */

// FfiConverter for enum SuccessAction
const FfiConverterTypeSuccessAction = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new SuccessAction.Aes({
            data: FfiConverterTypeAesSuccessActionData.read(from)
          });
        case 2:
          return new SuccessAction.Message({
            data: FfiConverterTypeMessageSuccessActionData.read(from)
          });
        case 3:
          return new SuccessAction.Url({
            data: FfiConverterTypeUrlSuccessActionData.read(from)
          });
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value.tag) {
        case SuccessAction_Tags.Aes:
          {
            ordinalConverter.write(1, into);
            const inner = value.inner;
            FfiConverterTypeAesSuccessActionData.write(inner.data, into);
            return;
          }
        case SuccessAction_Tags.Message:
          {
            ordinalConverter.write(2, into);
            const inner = value.inner;
            FfiConverterTypeMessageSuccessActionData.write(inner.data, into);
            return;
          }
        case SuccessAction_Tags.Url:
          {
            ordinalConverter.write(3, into);
            const inner = value.inner;
            FfiConverterTypeUrlSuccessActionData.write(inner.data, into);
            return;
          }
        default:
          // Throwing from here means that SuccessAction_Tags hasn't matched an ordinal.
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value) {
      switch (value.tag) {
        case SuccessAction_Tags.Aes:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(1);
            size += FfiConverterTypeAesSuccessActionData.allocationSize(inner.data);
            return size;
          }
        case SuccessAction_Tags.Message:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(2);
            size += FfiConverterTypeMessageSuccessActionData.allocationSize(inner.data);
            return size;
          }
        case SuccessAction_Tags.Url:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(3);
            size += FfiConverterTypeUrlSuccessActionData.allocationSize(inner.data);
            return size;
          }
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();

// Enum: SuccessActionProcessed
let SuccessActionProcessed_Tags = exports.SuccessActionProcessed_Tags = /*#__PURE__*/function (SuccessActionProcessed_Tags) {
  SuccessActionProcessed_Tags["Aes"] = "Aes";
  SuccessActionProcessed_Tags["Message"] = "Message";
  SuccessActionProcessed_Tags["Url"] = "Url";
  return SuccessActionProcessed_Tags;
}({});
/**
 * [`SuccessAction`] where contents are ready to be consumed by the caller
 *
 * Contents are identical to [`SuccessAction`], except for AES where the ciphertext is decrypted.
 */
const SuccessActionProcessed = exports.SuccessActionProcessed = (() => {
  /**
   * See [`SuccessAction::Aes`] for received payload
   *
   * See [`AesSuccessActionDataDecrypted`] for decrypted payload
   */
  class Aes_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SuccessActionProcessed';
    tag = SuccessActionProcessed_Tags.Aes;
    constructor(inner) {
      super('SuccessActionProcessed', 'Aes');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new Aes_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === SuccessActionProcessed_Tags.Aes;
    }
  }
  /**
   * See [`SuccessAction::Message`]
   */
  class Message_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SuccessActionProcessed';
    tag = SuccessActionProcessed_Tags.Message;
    constructor(inner) {
      super('SuccessActionProcessed', 'Message');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new Message_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === SuccessActionProcessed_Tags.Message;
    }
  }
  /**
   * See [`SuccessAction::Url`]
   */
  class Url_ extends _uniffiBindgenReactNative.UniffiEnum {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'SuccessActionProcessed';
    tag = SuccessActionProcessed_Tags.Url;
    constructor(inner) {
      super('SuccessActionProcessed', 'Url');
      this.inner = Object.freeze(inner);
    }
    static new(inner) {
      return new Url_(inner);
    }
    static instanceOf(obj) {
      return obj.tag === SuccessActionProcessed_Tags.Url;
    }
  }
  function instanceOf(obj) {
    return obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'SuccessActionProcessed';
  }
  return Object.freeze({
    instanceOf,
    Aes: Aes_,
    Message: Message_,
    Url: Url_
  });
})();

/**
 * [`SuccessAction`] where contents are ready to be consumed by the caller
 *
 * Contents are identical to [`SuccessAction`], except for AES where the ciphertext is decrypted.
 */

// FfiConverter for enum SuccessActionProcessed
const FfiConverterTypeSuccessActionProcessed = (() => {
  const ordinalConverter = _uniffiBindgenReactNative.FfiConverterInt32;
  class FFIConverter extends _uniffiBindgenReactNative.AbstractFfiConverterByteArray {
    read(from) {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new SuccessActionProcessed.Aes({
            result: FfiConverterTypeAesSuccessActionDataResult.read(from)
          });
        case 2:
          return new SuccessActionProcessed.Message({
            data: FfiConverterTypeMessageSuccessActionData.read(from)
          });
        case 3:
          return new SuccessActionProcessed.Url({
            data: FfiConverterTypeUrlSuccessActionData.read(from)
          });
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value, into) {
      switch (value.tag) {
        case SuccessActionProcessed_Tags.Aes:
          {
            ordinalConverter.write(1, into);
            const inner = value.inner;
            FfiConverterTypeAesSuccessActionDataResult.write(inner.result, into);
            return;
          }
        case SuccessActionProcessed_Tags.Message:
          {
            ordinalConverter.write(2, into);
            const inner = value.inner;
            FfiConverterTypeMessageSuccessActionData.write(inner.data, into);
            return;
          }
        case SuccessActionProcessed_Tags.Url:
          {
            ordinalConverter.write(3, into);
            const inner = value.inner;
            FfiConverterTypeUrlSuccessActionData.write(inner.data, into);
            return;
          }
        default:
          // Throwing from here means that SuccessActionProcessed_Tags hasn't matched an ordinal.
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value) {
      switch (value.tag) {
        case SuccessActionProcessed_Tags.Aes:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(1);
            size += FfiConverterTypeAesSuccessActionDataResult.allocationSize(inner.result);
            return size;
          }
        case SuccessActionProcessed_Tags.Message:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(2);
            size += FfiConverterTypeMessageSuccessActionData.allocationSize(inner.data);
            return size;
          }
        case SuccessActionProcessed_Tags.Url:
          {
            const inner = value.inner;
            let size = ordinalConverter.allocationSize(3);
            size += FfiConverterTypeUrlSuccessActionData.allocationSize(inner.data);
            return size;
          }
        default:
          throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();

// FfiConverter for Map<string, string>
const FfiConverterMapStringString = new _uniffiBindgenReactNative.FfiConverterMap(FfiConverterString, FfiConverterString);
class RestClientImpl extends _uniffiBindgenReactNative.UniffiAbstractObject {
  [_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'RestClientImpl';
  // No primary constructor declared for this class.
  constructor(pointer) {
    super();
    this[_uniffiBindgenReactNative.pointerLiteralSymbol] = pointer;
    this[_uniffiBindgenReactNative.destructorGuardSymbol] = uniffiTypeRestClientImplObjectFactory.bless(pointer);
  }

  /**
   * Makes a GET request and logs on DEBUG.
   * ### Arguments
   * - `url`: the URL on which GET will be called
   * - `headers`: optional headers that will be set on the request
   */
  async getRequest(url, headers, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_commonFfi.default)().ubrn_uniffi_breez_sdk_common_fn_method_restclient_get_request(uniffiTypeRestClientImplObjectFactory.clonePointer(this), FfiConverterString.lower(url), FfiConverterOptionalMapStringString.lower(headers));
      }, /*pollFunc:*/(0, _breez_sdk_commonFfi.default)().ubrn_ffi_breez_sdk_common_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_commonFfi.default)().ubrn_ffi_breez_sdk_common_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_commonFfi.default)().ubrn_ffi_breez_sdk_common_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_commonFfi.default)().ubrn_ffi_breez_sdk_common_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterTypeRestResponse.lift.bind(FfiConverterTypeRestResponse), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeServiceConnectivityError.lift.bind(FfiConverterTypeServiceConnectivityError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * Makes a POST request, and logs on DEBUG.
   * ### Arguments
   * - `url`: the URL on which POST will be called
   * - `headers`: the optional POST headers
   * - `body`: the optional POST body
   */
  async postRequest(url, headers, body, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_commonFfi.default)().ubrn_uniffi_breez_sdk_common_fn_method_restclient_post_request(uniffiTypeRestClientImplObjectFactory.clonePointer(this), FfiConverterString.lower(url), FfiConverterOptionalMapStringString.lower(headers), FfiConverterOptionalString.lower(body));
      }, /*pollFunc:*/(0, _breez_sdk_commonFfi.default)().ubrn_ffi_breez_sdk_common_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_commonFfi.default)().ubrn_ffi_breez_sdk_common_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_commonFfi.default)().ubrn_ffi_breez_sdk_common_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_commonFfi.default)().ubrn_ffi_breez_sdk_common_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterTypeRestResponse.lift.bind(FfiConverterTypeRestResponse), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeServiceConnectivityError.lift.bind(FfiConverterTypeServiceConnectivityError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * Makes a DELETE request, and logs on DEBUG.
   * ### Arguments
   * - `url`: the URL on which DELETE will be called
   * - `headers`: the optional DELETE headers
   * - `body`: the optional DELETE body
   */
  async deleteRequest(url, headers, body, asyncOpts_) /*throws*/{
    const __stack = uniffiIsDebug ? new Error().stack : undefined;
    try {
      return await (0, _uniffiBindgenReactNative.uniffiRustCallAsync)(/*rustCaller:*/uniffiCaller, /*rustFutureFunc:*/() => {
        return (0, _breez_sdk_commonFfi.default)().ubrn_uniffi_breez_sdk_common_fn_method_restclient_delete_request(uniffiTypeRestClientImplObjectFactory.clonePointer(this), FfiConverterString.lower(url), FfiConverterOptionalMapStringString.lower(headers), FfiConverterOptionalString.lower(body));
      }, /*pollFunc:*/(0, _breez_sdk_commonFfi.default)().ubrn_ffi_breez_sdk_common_rust_future_poll_rust_buffer, /*cancelFunc:*/(0, _breez_sdk_commonFfi.default)().ubrn_ffi_breez_sdk_common_rust_future_cancel_rust_buffer, /*completeFunc:*/(0, _breez_sdk_commonFfi.default)().ubrn_ffi_breez_sdk_common_rust_future_complete_rust_buffer, /*freeFunc:*/(0, _breez_sdk_commonFfi.default)().ubrn_ffi_breez_sdk_common_rust_future_free_rust_buffer, /*liftFunc:*/FfiConverterTypeRestResponse.lift.bind(FfiConverterTypeRestResponse), /*liftString:*/FfiConverterString.lift, /*asyncOpts:*/asyncOpts_, /*errorHandler:*/FfiConverterTypeServiceConnectivityError.lift.bind(FfiConverterTypeServiceConnectivityError));
    } catch (__error) {
      if (uniffiIsDebug && __error instanceof Error) {
        __error.stack = __stack;
      }
      throw __error;
    }
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy() {
    const ptr = this[_uniffiBindgenReactNative.destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeRestClientImplObjectFactory.pointer(this);
      uniffiTypeRestClientImplObjectFactory.freePointer(pointer);
      uniffiTypeRestClientImplObjectFactory.unbless(ptr);
      delete this[_uniffiBindgenReactNative.destructorGuardSymbol];
    }
  }
  static instanceOf(obj) {
    return uniffiTypeRestClientImplObjectFactory.isConcreteType(obj);
  }
}
exports.RestClientImpl = RestClientImpl;
const uniffiTypeRestClientImplObjectFactory = {
  create(pointer) {
    const instance = Object.create(RestClientImpl.prototype);
    instance[_uniffiBindgenReactNative.pointerLiteralSymbol] = pointer;
    instance[_uniffiBindgenReactNative.destructorGuardSymbol] = this.bless(pointer);
    instance[_uniffiBindgenReactNative.uniffiTypeNameSymbol] = 'RestClientImpl';
    return instance;
  },
  bless(p) {
    return uniffiCaller.rustCall(/*caller:*/status => (0, _breez_sdk_commonFfi.default)().ubrn_uniffi_internal_fn_method_restclient_ffi__bless_pointer(p, status), /*liftString:*/FfiConverterString.lift);
  },
  unbless(ptr) {
    ptr.markDestroyed();
  },
  pointer(obj) {
    if (obj[_uniffiBindgenReactNative.destructorGuardSymbol] === undefined) {
      throw new _uniffiBindgenReactNative.UniffiInternalError.UnexpectedNullPointer();
    }
    return obj[_uniffiBindgenReactNative.pointerLiteralSymbol];
  },
  clonePointer(obj) {
    const pointer = this.pointer(obj);
    return uniffiCaller.rustCall(/*caller:*/callStatus => (0, _breez_sdk_commonFfi.default)().ubrn_uniffi_breez_sdk_common_fn_clone_restclient(pointer, callStatus), /*liftString:*/FfiConverterString.lift);
  },
  freePointer(pointer) {
    uniffiCaller.rustCall(/*caller:*/callStatus => (0, _breez_sdk_commonFfi.default)().ubrn_uniffi_breez_sdk_common_fn_free_restclient(pointer, callStatus), /*liftString:*/FfiConverterString.lift);
  },
  isConcreteType(obj) {
    return obj[_uniffiBindgenReactNative.destructorGuardSymbol] && obj[_uniffiBindgenReactNative.uniffiTypeNameSymbol] === 'RestClientImpl';
  }
};
// FfiConverter for RestClient
const FfiConverterTypeRestClient = new _uniffiBindgenReactNative.FfiConverterObjectWithCallbacks(uniffiTypeRestClientImplObjectFactory);

// Add a vtavble for the callbacks that go in RestClient.

// Put the implementation in a struct so we don't pollute the top-level namespace
const uniffiCallbackInterfaceRestClient = {
  // Create the VTable using a series of closures.
  // ts automatically converts these into C callback functions.
  vtable: {
    getRequest: (uniffiHandle, url, headers, uniffiFutureCallback, uniffiCallbackData) => {
      const uniffiMakeCall = async signal => {
        const jsCallback = FfiConverterTypeRestClient.lift(uniffiHandle);
        return await jsCallback.getRequest(FfiConverterString.lift(url), FfiConverterOptionalMapStringString.lift(headers), {
          signal
        });
      };
      const uniffiHandleSuccess = returnValue => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructRustBuffer */{
          returnValue: FfiConverterTypeRestResponse.lower(returnValue),
          callStatus: uniffiCaller.createCallStatus()
        });
      };
      const uniffiHandleError = (code, errorBuf) => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructRustBuffer */{
          returnValue: /*empty*/new Uint8Array(0),
          // TODO create callstatus with error.
          callStatus: {
            code,
            errorBuf
          }
        });
      };
      const uniffiForeignFuture = (0, _uniffiBindgenReactNative.uniffiTraitInterfaceCallAsyncWithError)(/*makeCall:*/uniffiMakeCall, /*handleSuccess:*/uniffiHandleSuccess, /*handleError:*/uniffiHandleError, /*isErrorType:*/ServiceConnectivityError.instanceOf, /*lowerError:*/FfiConverterTypeServiceConnectivityError.lower.bind(FfiConverterTypeServiceConnectivityError), /*lowerString:*/FfiConverterString.lower);
      return _uniffiBindgenReactNative.UniffiResult.success(uniffiForeignFuture);
    },
    postRequest: (uniffiHandle, url, headers, body, uniffiFutureCallback, uniffiCallbackData) => {
      const uniffiMakeCall = async signal => {
        const jsCallback = FfiConverterTypeRestClient.lift(uniffiHandle);
        return await jsCallback.postRequest(FfiConverterString.lift(url), FfiConverterOptionalMapStringString.lift(headers), FfiConverterOptionalString.lift(body), {
          signal
        });
      };
      const uniffiHandleSuccess = returnValue => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructRustBuffer */{
          returnValue: FfiConverterTypeRestResponse.lower(returnValue),
          callStatus: uniffiCaller.createCallStatus()
        });
      };
      const uniffiHandleError = (code, errorBuf) => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructRustBuffer */{
          returnValue: /*empty*/new Uint8Array(0),
          // TODO create callstatus with error.
          callStatus: {
            code,
            errorBuf
          }
        });
      };
      const uniffiForeignFuture = (0, _uniffiBindgenReactNative.uniffiTraitInterfaceCallAsyncWithError)(/*makeCall:*/uniffiMakeCall, /*handleSuccess:*/uniffiHandleSuccess, /*handleError:*/uniffiHandleError, /*isErrorType:*/ServiceConnectivityError.instanceOf, /*lowerError:*/FfiConverterTypeServiceConnectivityError.lower.bind(FfiConverterTypeServiceConnectivityError), /*lowerString:*/FfiConverterString.lower);
      return _uniffiBindgenReactNative.UniffiResult.success(uniffiForeignFuture);
    },
    deleteRequest: (uniffiHandle, url, headers, body, uniffiFutureCallback, uniffiCallbackData) => {
      const uniffiMakeCall = async signal => {
        const jsCallback = FfiConverterTypeRestClient.lift(uniffiHandle);
        return await jsCallback.deleteRequest(FfiConverterString.lift(url), FfiConverterOptionalMapStringString.lift(headers), FfiConverterOptionalString.lift(body), {
          signal
        });
      };
      const uniffiHandleSuccess = returnValue => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructRustBuffer */{
          returnValue: FfiConverterTypeRestResponse.lower(returnValue),
          callStatus: uniffiCaller.createCallStatus()
        });
      };
      const uniffiHandleError = (code, errorBuf) => {
        uniffiFutureCallback(uniffiCallbackData, /* UniffiForeignFutureStructRustBuffer */{
          returnValue: /*empty*/new Uint8Array(0),
          // TODO create callstatus with error.
          callStatus: {
            code,
            errorBuf
          }
        });
      };
      const uniffiForeignFuture = (0, _uniffiBindgenReactNative.uniffiTraitInterfaceCallAsyncWithError)(/*makeCall:*/uniffiMakeCall, /*handleSuccess:*/uniffiHandleSuccess, /*handleError:*/uniffiHandleError, /*isErrorType:*/ServiceConnectivityError.instanceOf, /*lowerError:*/FfiConverterTypeServiceConnectivityError.lower.bind(FfiConverterTypeServiceConnectivityError), /*lowerString:*/FfiConverterString.lower);
      return _uniffiBindgenReactNative.UniffiResult.success(uniffiForeignFuture);
    },
    uniffiFree: uniffiHandle => {
      // RestClient: this will throw a stale handle error if the handle isn't found.
      FfiConverterTypeRestClient.drop(uniffiHandle);
    }
  },
  register: () => {
    (0, _breez_sdk_commonFfi.default)().ubrn_uniffi_breez_sdk_common_fn_init_callback_vtable_restclient(uniffiCallbackInterfaceRestClient.vtable);
  }
};

// FfiConverter for boolean | undefined
const FfiConverterOptionalBool = new _uniffiBindgenReactNative.FfiConverterOptional(_uniffiBindgenReactNative.FfiConverterBool);

// FfiConverter for SparkInvoiceFields | undefined
const FfiConverterOptionalTypeSparkInvoiceFields = new _uniffiBindgenReactNative.FfiConverterOptional(FfiConverterTypeSparkInvoiceFields);

// FfiConverter for Symbol | undefined
const FfiConverterOptionalTypeSymbol = new _uniffiBindgenReactNative.FfiConverterOptional(FfiConverterTypeSymbol);

// FfiConverter for string | undefined
const FfiConverterOptionalString = new _uniffiBindgenReactNative.FfiConverterOptional(FfiConverterString);

// FfiConverter for /*u32*/number | undefined
const FfiConverterOptionalUInt32 = new _uniffiBindgenReactNative.FfiConverterOptional(_uniffiBindgenReactNative.FfiConverterUInt32);

// FfiConverter for /*u64*/bigint | undefined
const FfiConverterOptionalUInt64 = new _uniffiBindgenReactNative.FfiConverterOptional(_uniffiBindgenReactNative.FfiConverterUInt64);

// FfiConverter for Array<Bip21Extra>
const FfiConverterArrayTypeBip21Extra = new _uniffiBindgenReactNative.FfiConverterArray(FfiConverterTypeBip21Extra);

// FfiConverter for Array<Bolt11RouteHint>
const FfiConverterArrayTypeBolt11RouteHint = new _uniffiBindgenReactNative.FfiConverterArray(FfiConverterTypeBolt11RouteHint);

// FfiConverter for Array<Bolt11RouteHintHop>
const FfiConverterArrayTypeBolt11RouteHintHop = new _uniffiBindgenReactNative.FfiConverterArray(FfiConverterTypeBolt11RouteHintHop);

// FfiConverter for Array<Bolt12OfferBlindedPath>
const FfiConverterArrayTypeBolt12OfferBlindedPath = new _uniffiBindgenReactNative.FfiConverterArray(FfiConverterTypeBolt12OfferBlindedPath);

// FfiConverter for Array<LocaleOverrides>
const FfiConverterArrayTypeLocaleOverrides = new _uniffiBindgenReactNative.FfiConverterArray(FfiConverterTypeLocaleOverrides);

// FfiConverter for Array<LocalizedName>
const FfiConverterArrayTypeLocalizedName = new _uniffiBindgenReactNative.FfiConverterArray(FfiConverterTypeLocalizedName);

// FfiConverter for Array<string>
const FfiConverterArrayString = new _uniffiBindgenReactNative.FfiConverterArray(FfiConverterString);

// FfiConverter for Amount | undefined
const FfiConverterOptionalTypeAmount = new _uniffiBindgenReactNative.FfiConverterOptional(FfiConverterTypeAmount);

// FfiConverter for SparkAddressPaymentType | undefined
const FfiConverterOptionalTypeSparkAddressPaymentType = new _uniffiBindgenReactNative.FfiConverterOptional(FfiConverterTypeSparkAddressPaymentType);

// FfiConverter for Map<string, string> | undefined
const FfiConverterOptionalMapStringString = new _uniffiBindgenReactNative.FfiConverterOptional(FfiConverterMapStringString);

// FfiConverter for Array<InputType>
const FfiConverterArrayTypeInputType = new _uniffiBindgenReactNative.FfiConverterArray(FfiConverterTypeInputType);

/**
 * This should be called before anything else.
 *
 * It is likely that this is being done for you by the library's `index.ts`.
 *
 * It checks versions of uniffi between when the Rust scaffolding was generated
 * and when the bindings were generated.
 *
 * It also initializes the machinery to enable Rust to talk back to Javascript.
 */
function uniffiEnsureInitialized() {
  // Get the bindings contract version from our ComponentInterface
  const bindingsContractVersion = 26;
  // Get the scaffolding contract version by calling the into the dylib
  const scaffoldingContractVersion = (0, _breez_sdk_commonFfi.default)().ubrn_ffi_breez_sdk_common_uniffi_contract_version();
  if (bindingsContractVersion !== scaffoldingContractVersion) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ContractVersionMismatch(scaffoldingContractVersion, bindingsContractVersion);
  }
  if ((0, _breez_sdk_commonFfi.default)().ubrn_uniffi_breez_sdk_common_checksum_method_restclient_get_request() !== 1702) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_common_checksum_method_restclient_get_request');
  }
  if ((0, _breez_sdk_commonFfi.default)().ubrn_uniffi_breez_sdk_common_checksum_method_restclient_post_request() !== 38998) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_common_checksum_method_restclient_post_request');
  }
  if ((0, _breez_sdk_commonFfi.default)().ubrn_uniffi_breez_sdk_common_checksum_method_restclient_delete_request() !== 26893) {
    throw new _uniffiBindgenReactNative.UniffiInternalError.ApiChecksumMismatch('uniffi_breez_sdk_common_checksum_method_restclient_delete_request');
  }
  uniffiCallbackInterfaceRestClient.register();
}
var _default = exports.default = Object.freeze({
  initialize: uniffiEnsureInitialized,
  converters: {
    FfiConverterTypeAesSuccessActionData,
    FfiConverterTypeAesSuccessActionDataDecrypted,
    FfiConverterTypeAesSuccessActionDataResult,
    FfiConverterTypeAmount,
    FfiConverterTypeBip21Details,
    FfiConverterTypeBip21Extra,
    FfiConverterTypeBitcoinAddressDetails,
    FfiConverterTypeBitcoinNetwork,
    FfiConverterTypeBolt11Invoice,
    FfiConverterTypeBolt11InvoiceDetails,
    FfiConverterTypeBolt11RouteHint,
    FfiConverterTypeBolt11RouteHintHop,
    FfiConverterTypeBolt12Invoice,
    FfiConverterTypeBolt12InvoiceDetails,
    FfiConverterTypeBolt12InvoiceRequestDetails,
    FfiConverterTypeBolt12Offer,
    FfiConverterTypeBolt12OfferBlindedPath,
    FfiConverterTypeBolt12OfferDetails,
    FfiConverterTypeCurrencyInfo,
    FfiConverterTypeFiatCurrency,
    FfiConverterTypeInputType,
    FfiConverterTypeLightningAddressDetails,
    FfiConverterTypeLnurlAuthRequestDetails,
    FfiConverterTypeLnurlCallbackStatus,
    FfiConverterTypeLnurlErrorDetails,
    FfiConverterTypeLnurlPayRequestDetails,
    FfiConverterTypeLnurlWithdrawRequestDetails,
    FfiConverterTypeLocaleOverrides,
    FfiConverterTypeLocalizedName,
    FfiConverterTypeMessageSuccessActionData,
    FfiConverterTypePaymentRequestSource,
    FfiConverterTypeRate,
    FfiConverterTypeRestClient,
    FfiConverterTypeRestResponse,
    FfiConverterTypeSatsPaymentDetails,
    FfiConverterTypeSilentPaymentAddressDetails,
    FfiConverterTypeSparkAddress,
    FfiConverterTypeSparkAddressDetails,
    FfiConverterTypeSparkAddressPaymentType,
    FfiConverterTypeSparkInvoiceFields,
    FfiConverterTypeSuccessAction,
    FfiConverterTypeSuccessActionProcessed,
    FfiConverterTypeSymbol,
    FfiConverterTypeTokensPaymentDetails,
    FfiConverterTypeUrlSuccessActionData
  }
});
//# sourceMappingURL=breez_sdk_common.js.map